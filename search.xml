<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于Appache Maven</title>
    <url>/2020/11/29/Maven/</url>
    <content><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h4 id="1-配置Maven一般要配置三个部分：本地仓库，镜像仓库，JDK版本（在users-m2-settings-xml）中进行配置。"><a href="#1-配置Maven一般要配置三个部分：本地仓库，镜像仓库，JDK版本（在users-m2-settings-xml）中进行配置。" class="headerlink" title="1.配置Maven一般要配置三个部分：本地仓库，镜像仓库，JDK版本（在users/.m2/settings.xml）中进行配置。"></a>1.配置Maven一般要配置三个部分：本地仓库，镜像仓库，JDK版本（在users/.m2/settings.xml）中进行配置。</h4><h4 id="2-Maven工程分类："><a href="#2-Maven工程分类：" class="headerlink" title="2.Maven工程分类："></a>2.Maven工程分类：</h4><ol>
<li>POM工程，POM工程是逻辑工程，用在父级工程或聚合工程中，用来做jar包的版本控制</li>
<li>JAR工程，用作jar包使用。即常见的本地工程——&gt;Java Project</li>
<li>WAR工程，将会打包成war，发布在服务器上的工程</li>
</ol>
<h4 id="3-在IDEA中创建Mavenue工程"><a href="#3-在IDEA中创建Mavenue工程" class="headerlink" title="3.在IDEA中创建Mavenue工程"></a>3.在IDEA中创建Mavenue工程</h4><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407103803854.png" alt="image-20210407103803854"></p>
<p>快照版一般意思就是非正式版，等你项目要上线的时候把snapshot去掉就行</p>
<h3 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407104106849.png" alt="image-20210407104106849"></p>
<p>蓝色的Java文件夹存放我们写的Java源代码</p>
<p>resources存放主要的资源文件，比如xml配置文件和properties文件</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407105025623.png" alt="image-20210407105025623"></p>
<h3 id="导入依赖和派出依赖"><a href="#导入依赖和派出依赖" class="headerlink" title="导入依赖和派出依赖"></a>导入依赖和派出依赖</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407113222382.png" alt="image-20210407113222382"></p>
<p>项目1中导入了mybatis的依赖，项目2中要导入项目1的依赖，但是不想导入mybatis，可以使用exclusion来排除mybatis依赖</p>
<h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407113845442.png" alt="image-20210407113845442"></p>
<p>加了dependencyManagement之后不会导入依赖，是对这个依赖进行管理：（一般在版本号上进行操作）</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407114810531.png" alt="image-20210407114810531"></p>
<p>要想把maven工程导出为jar包只需要点击右侧侧边栏的install即可</p>
<p>导入父工程：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407115136434.png" alt="image-20210407115136434"></p>
<p>relativePath指的是父工程的pom.xml配置文件的路径。</p>
<p>通过父工程配置过mybatis的版本号之后，子工程中注入mybatis依赖时不用写版本号，默认使用父工程中的版本号：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407115417480.png" alt="image-20210407115417480"></p>
<p>maven的继承关系本质上就是POM.xml文件的继承关系</p>
<h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><p>聚合其实就包含了继承关系。定义一个总的POM项目，不写代码，专门用来聚合各个不同的项目模块</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407121823467.png" alt="image-20210407121823467"></p>
<p><packing>是在声明当前的项目类型，即当前的项目是一个什么类型的项目</p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407123426745.png" alt="image-20210407123426745"></p>
<p>在.m2文件夹下的settings.xml里面配置的JDK版本是全局的，如果你想为项目单独指定JDK版本的话，可以使用上面这段代码，这个插件在右侧侧边栏的maven中可以找到</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407123550564.png" alt="image-20210407123550564"></p>
<p>没错，就是这个compiler插件</p>
<p>注意：如果想要把当前项目打包成jar包，需要点击install那个插件选项，安装（install）完之后，你的左侧项目文件中会出现一个target包，里面存放了一些打包好的文件，就是输出的jar包。</p>
<p>注意：只有放在resource目录下的配置文件才会被打包放入target中。但是蓝色的Java下面可能也会有一些配置文件，比如我们用mybatis的时候就会有。但是我们自己搞的时候不会有。</p>
<p>如果我们想把非resource目录下的文件打包成jar包，需要在pom.xml中配置如下信息：在<build>下面配置<resources></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407124706015.png" alt="image-20210407124706015"></p>
<p>Tomcat插件：</p>
<p>创建maven时如果勾选了webapps选项，剩下的java和resources、test文件夹等都需要自己补全</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407130140315.png" alt="image-20210407130140315"></p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407130109388.png" alt="image-20210407130109388" style="zoom: 50%;" />

<h3 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407130701966.png" alt="image-20210407130701966"></p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>二叉树基本算法</title>
    <url>/2019/08/21/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="二叉树基本算法"><a href="#二叉树基本算法" class="headerlink" title="二叉树基本算法"></a>二叉树基本算法</h2><p>二叉树，结构描述</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>二叉树的先序、中序、后序遍历。这个是数据结构的基础概念，这里就不展开了。不会的可以查资料、看课本。</p>
<p>但是教科书上讲的这个先序中序后序有点low。先序中序后序遍历本质上就是打印行为在方法中的位置不同，所以先序中序后序根本就不是递归遍历的本质，递归遍历的本质是递归序。</p>
<p>下面我们来讲讲什么是递归序。这个很重要，比你想象得要重要。后面讲的树型DP问题(在树上做动态规划)，其实全部基于这个认知，只是你们老师啥都没给你们讲。<span id="more"></span></p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201206100955415.png" alt="image-20201206100955415" style="zoom:40%;" />

<h3 id="递归序的本质"><a href="#递归序的本质" class="headerlink" title="递归序的本质"></a>递归序的本质</h3><p>递归序的本质，每一个结点都会来到3次（以二叉树的遍历为例，如上图）。那什么是先序呢1？你第一次来到一个结点时就打印，为先序(如下图)。你第二次到达时再打印，就是中序，你第三次到达时再打印，就是后序。任何一个结点都能在它的左树上收集一些信息，也能跑去右树上收集信息，还能第三次在它自己身上做整合，这是在树上做动态规划的基础。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201206101420283.png" alt="image-20201206101420283" style="zoom:40%;" />

<p>用非递归方法实现先序、中序、后序遍历。压栈实现</p>
<h3 id="使用非递归方法实现遍历——压栈实现"><a href="#使用非递归方法实现遍历——压栈实现" class="headerlink" title="使用非递归方法实现遍历——压栈实现"></a>使用非递归方法实现遍历——压栈实现</h3><p>使用压栈法实现先序遍历的步骤：1.先打印   2.如有右，压入右   3.如有左，压入左</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201206162148942.png" alt="image-20201206162148942" style="zoom: 40%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"pre-order："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">+</span>  <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207105122694.png" alt="image-20201207105122694" style="zoom:40%;" />

<p>如果是想使用“头、右、左”的顺序，把后两步压栈顺序改一下就行了。</p>
<p>头右左的打印顺序如下：你倒过来看(从右往左看，这不就是逆序吗，左右头)</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207105807624.png" alt="image-20201207105807624" style="zoom:40%;" />

<p>打印的时候，我把它单独放到一个另外的栈里去，我不打印，整个过程处理完之后，我再把另外收集的这个栈中的元素从头弹出来，不就实现后序打印了吗。所以大家看代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pos1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//后序遍历代码</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pos-order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这个s2完全是辅助用的</span>
        s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            head <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//s1里面的元素弹出时不打印，先放入s2中</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>中序遍历：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in-order:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>had <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
                head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>	
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207112352828.png" alt="image-20201207112352828" style="zoom:40%;" />

<p>后序遍历的第二种算法：（只使用一个栈）</p>
<p>条件1：整条左边界依次入栈；条件2：条件1的执行条件不满足时，弹出结点并打印 </p>
<h3 id="只使用一个栈的后序遍历算法："><a href="#只使用一个栈的后序遍历算法：" class="headerlink" title="只使用一个栈的后序遍历算法："></a>只使用一个栈的后序遍历算法：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先准备好两个引用，h和c</span>
<span class="token comment">//然后准备了一个栈</span>
<span class="token comment">//也就是说我们看流程的时候只需要看三个变化，一个是h，一个是c，一个是栈</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pos2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"pos - order: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Node</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            c <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> c<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> c<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> c<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                h <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>来说一下while中的三个if逻辑分支的作用。首先，h的作用是什么呢？注意观察，每次打印完当前结点c之后都会把c的值赋值给h，h的作用就是记录已经打印过的上一个结点。然后我们来看第一个if，c的左孩子不为空且h不是c的左右孩子，说明c的左右孩子还没有打印过，先遍历左子树（本代码为后序遍历），如果前两条逻辑分支中了，就代表c的左孩子已经被打印过了，短路与不会看后面的最后一个条件，所以下面看c的右孩子是否被打印过(h是否被记录为c的右孩子)，如果c的右孩子没有被打印过则遍历c的右子树。如果c的左右子树都被遍历过或都为空，则打印c本身。注意：如果你没有打印过任何结点，你只需要保证h处在一个不会干扰到你的位置就可以了。在还没有打印树中的任何结点之前，h是不会干扰逻辑分支1里面的条件判断的</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207182249030.png" alt="image-20201207182249030" style="zoom:33%;" />

<p>如果此时结点4已经打印完毕，h处于结点4的位置，那么它此时处的位置4是不会干扰到你接下来要打印的5这个逻辑分支的。<strong>注意第一条逻辑分支中判断左树有没有处理过的时候也要判断h是不是c的右子结点，为什么？</strong>看下图这种情况，此时c的右子结点刚好打印完，此时h处于c的右子结点的位置。那么前两段关于左子结点的判断是可以通过的（左子结点不为空且h处于c的左子结点上），但是此时h在c的右子结点上，右子结点都处理完了左子结点肯定也处理完了，所以在判断第一条左子结点时要加入右子结点的判断。你打印了往上，就得了。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207182736278.png" alt="image-20201207182736278" style="zoom:33%;" />

<h3 id="实现二叉树的按层遍历"><a href="#实现二叉树的按层遍历" class="headerlink" title="实现二叉树的按层遍历"></a>实现二叉树的按层遍历</h3><ol>
<li>其实就是宽度优先遍历，用队列</li>
<li>可以通过设置flag变量的方式，来发现某一层的结束（看题目）</li>
<li>整体思路很简单，先弹出当前结点打印，并依次加入弹出结点的左子结点和右子结点</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207183941104.png" alt="image-20201207183941104" style="zoom:33%;" />

<p><strong>现在请你统计二叉树的最大宽度</strong>（那一层的结点最多，并统计这一层的结点数量）。这要求我们不仅能够完成按层打印，还要能发现每一层的开始和结束。求树的最大宽度是一道非常经典的面试题。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//第一种方法：用map的方式</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">maxWidthUseMap</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//key在哪一层，value</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> levelMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        levelMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//头结点在第一层我们都知道</span>
        <span class="token keyword">int</span> curLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//当前结点在哪一层</span>
        <span class="token keyword">int</span> curLevelNodes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//当前层的结点数默认弹出之后再计入数据，进去的时候先不计数</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//max就是你更新的所有层的宽度中的最大值</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Node</span> cur <span class="token operator">=</span>  queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前队头结点出队并赋给cur(current:当前的)</span>
            <span class="token keyword">int</span> curNodeLevel <span class="token operator">=</span> levelMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从levelMap中把当前结点在的层数给取出来</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                levelMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">,</span> curNodeLevel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果左孩子不为空，加入左孩子并标记左孩子所处																						的层数</span>
                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//左孩子入队</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                levelMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">,</span> curNodeLevel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果右孩子不为空，记录右孩子的层数并将右孩子入队</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>curNodeLevel <span class="token operator">==</span> curlevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果当前节点的层数和你统计层的层数一样，说明此结点就在此层</span>
                curLevelNodes<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//当前层结点数++,当前层没有结束，所以我就不更新max了</span>
    <span class="token comment">//如果没有中这个逻辑分支，说明此时1的子节点已经入队，说明上一层该结算了		</span>
                
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curLevelNodes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//找到了目前为止的最大宽度,也就是上一层结算出来的宽度</span>
                curLevel<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//当前层成为下一层(第二层)</span>
                curLevelNodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//当前层弹出了第一个结点，当前层结点数设置为1</span>
            <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
   max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curLevelNodes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最后一层再也没有新层去结算它了，所以要在while结束之后再更新一次max</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207192919618.png" alt="image-20201207192919618" style="zoom:33%;" />

<h3 id="不使用HashMap的方法："><a href="#不使用HashMap的方法：" class="headerlink" title="不使用HashMap的方法："></a>不使用HashMap的方法：</h3><p>下面来看一下不用HashMap的方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxWidthNoMap</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//准备一个队列和几个变量</span>
    <span class="token class-name">Node</span> curEnd <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//当前层最右结点是谁</span>
    <span class="token class-name">Node</span> nextEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//下一层最右结点是谁</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//我只需要知道当前层什么时候结束然后更新max</span>
    <span class="token keyword">int</span> curLevelsNodes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//这个有没有都可以，因为我只需要知道当前层什么时候结束然后更新max</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token comment">//当前层在不断更新下一层的最右结点，只要下一层出来一个结点，下一层的最右结点就会更新</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        curLevelNodes<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span><span class="token operator">=</span> curEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果当前结点是当前层最右的结点，开始结算</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curLevelNodes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新当前的最大宽度</span>
            curLevelNodes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//当前层结算完跳到下一层，下一层的结点是0个(目前在当前层的最右结点上，下一层																				的结点还没有弹出)</span>
            curEnd <span class="token operator">=</span> nextEnd<span class="token punctuation">;</span><span class="token comment">//下一层的最右马上就要变成当前层了，所以我设置下一层的最右结点</span>
            
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//注意上面的一行代码，当前层再不断为下一层的最右结点做准备，以便我这一层结束之后，下一层的结点可以直接变成当前层的结点，就是用这种机制，完成的每一层的发现和结束的时刻</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span> <span class="token comment">//不用在while后面再更新max，因为我当前层结束当前层直接结算，不用等到下一层结算</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二叉树的序列化和反序列化"><a href="#二叉树的序列化和反序列化" class="headerlink" title="二叉树的序列化和反序列化"></a>二叉树的序列化和反序列化</h3><ol>
<li>可以先用先序或者中序或者后序或者按层遍历，来实现二叉树的序列化</li>
<li>用了什么方式序列化，就用什么方式反序列化</li>
</ol>
<p>（在树上是可以玩KMP的，这波神仙操作后面听左神讲…）</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207203024118.png" alt="image-20201207203024118" style="zoom:33%;" />

<p>序列化的时候把空节点加上。反序列化的方式和序列化的方式一样，先头再左再右，先把1拿出来建头结点，然后把1拿出来建左节点，然后把空拿出来建左节点，返回，把1拿出来建右结点….以此类推</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207203656194.png" alt="image-20201207203656194" style="zoom:67%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207203704977.png" alt="image-20201207203704977" style="zoom:67%;" />

<p>中序和后序就是把Node head那一句分别加在左和右中间、最后</p>
<p>按层序列化：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207204132547.png" alt="image-20201207204132547" style="zoom: 33%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207204212351.png" alt="image-20201207204212351" style="zoom: 67%;" />

<p>与之前不同的是序列化的时机是在加入结点的时候。ans就是序列化结果，也是一个队列。左孩子不为空，即序列化又加队列，左孩子为空，只序列化不加队列。右孩子同理。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207204533396.png" alt="image-20201207204533396" style="zoom:40%;" />

<p>反序列化代码：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201207204740515.png" alt="image-20201207204740515" style="zoom:67%;" />]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>multithreading and high currency</title>
    <url>/2021/05/23/multithread/</url>
    <content><![CDATA[<p>The high concurrency will not be talked in this article today, let’s talk about multithreading first.</p>
<h2 id="Multithreading"><a href="#Multithreading" class="headerlink" title="Multithreading"></a>Multithreading</h2><h3 id="The-first-way-to-create-a-thread-implements-Thread"><a href="#The-first-way-to-create-a-thread-implements-Thread" class="headerlink" title="The first way to create a thread: implements Thread"></a>The first way to create a thread: implements Thread</h3><span id="more"></span>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//One way to create Thread: implements Thread, and override the run() method, invoking the start() to start the Thread.</span>
<span class="token comment">//Note: the Thread may not execute immediately after it is started, it depends on the CPU scheduling.</span>
<span class="token comment">//Invoking run() does not create a new Thread, after finishing the contents of the run(), it'll continue to proceede the rest contents in this class.</span>
<span class="token comment">//Invoking start()'ll create a new Thread, which can be execute simultaneously with the main thread.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//the Thread body of run()</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm reading the code---------"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//main method is a main Thread</span>

        <span class="token comment">//Create an object of Thread</span>
        <span class="token class-name">ThreadDemo01</span> threadDemo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//Invoking run()</span>
        <span class="token comment">//threadDemo01.run();</span>

        <span class="token comment">//Invoking start()</span>
        threadDemo01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm doing multithreading---------"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Using-the-multithreading-to-download-pictures"><a href="#Using-the-multithreading-to-download-pictures" class="headerlink" title="Using the multithreading to download pictures"></a>Using the multithreading to download pictures</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>
<span class="token comment">/*steps:
1.write a downloader with a download method in it.
2.write a Thread Class with a constructor, inside this is the URL and the name of the image downloaded.
3.Override the run() of this Thread Class, create an object of downloader and invoke the download method in it.
4.Create the object of the Thread, invoking the start() to download.
*/</span>

<span class="token comment">//pratice using multithreading to download images.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>  <span class="token comment">//The url of online pictures</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//the filename saved</span>

    <span class="token keyword">public</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//the execute body of downloading Thread</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WebDownloader</span> webDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        webDownloader<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The filename downloaded is："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ThreadDemo02</span> threadDemo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token string">"https://s1.tuchong.com/content-image/201805/9d4d1c6aa1974569edaad5c668ac8578.jpeg"</span><span class="token punctuation">,</span><span class="token string">"1.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadDemo02</span> threadDemo02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/981318/ft640/242287039.jpg"</span><span class="token punctuation">,</span><span class="token string">"2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadDemo02</span> threadDemo03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2732846/ft640/20811104.jpg"</span><span class="token punctuation">,</span><span class="token string">"3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadDemo01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadDemo02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadDemo03<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//the downloader</span>
<span class="token keyword">class</span> <span class="token class-name">WebDownloader</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IOExcpetion，download() go wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="The-second-way-to-create-a-thread-implements-the-Runnable-interface"><a href="#The-second-way-to-create-a-thread-implements-the-Runnable-interface" class="headerlink" title="The second way to create a thread: implements the Runnable interface."></a>The second way to create a thread: implements the Runnable interface.</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//the second way to create a thread: implements the Runnable interface.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo03</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm studying the multithread："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//create the implementation object of the </span>
        <span class="token class-name">ThreadDemo03</span> threadDemo03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Create</span>
        <span class="token comment">// put the implementation object of Runnable into the constructor.</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo03<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//the tWO lines above can be abbreviated as: </span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main thread："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><strong>implements Thread is not recommended due to the limitations of single implements of Java, and the implementation of the Runnable  interface  is recommended</strong></p>
<p><strong>It is convenient  for  one object  to be used by  multiple threads</strong></p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//multiple thread operation one object</span>
<span class="token comment">//An example of buying train tickets</span>

<span class="token comment">//find the problem，When multiple threads operate on the same resource, the Thread is unsafe（got dulplicate tickets）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo04</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//Simulation of time delay</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" --> Got"</span> <span class="token operator">+</span> ticketNums<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"ticket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//Thread.currentThread() : got the current thread</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ThreadDemo04</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span><span class="token string">"老师"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//CTRL+B to read the source code，Pass Runnable implementation first，then pass a String as the name of the Thread.</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Tortoise-and-the-hare"><a href="#Tortoise-and-the-hare" class="headerlink" title="Tortoise and the hare"></a>Tortoise and the hare</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Race</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//Winner</span>
    <span class="token class-name">String</span> winner<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

            <span class="token comment">//Simulate rabbit rest</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">//Judge if the game is over</span>
            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">gameOver</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//if the match end, the program will be stopped</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---> 跑了"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//judge if the game is over</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">gameOver</span><span class="token punctuation">(</span><span class="token keyword">int</span> steps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//Determine if there is a winner</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>winner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>steps <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                winner <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"winner is"</span> <span class="token operator">+</span> winner<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Race</span> race <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Race</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>race<span class="token punctuation">,</span> <span class="token string">" hare"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>race<span class="token punctuation">,</span> <span class="token string">"tortoise"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="implements-Callable-interface"><a href="#implements-Callable-interface" class="headerlink" title="implements Callable interface"></a>implements Callable interface</h3><ol>
<li>The Class that implements Callable interface, need a return type.</li>
<li>The call() being Overridden needs to throw Exception.</li>
<li>Create the target Object</li>
<li>Create the execute service: ExecutorService ser = Executors.newFixedThreadPool(1);</li>
<li>submit the execution: Future<Boolean> result1 = ser.submit(t1);</li>
<li>Get the result: boolean r1 = result1.get();</li>
<li>Close the service: ser.shutdownNow();</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token comment">//he third to create a Thread：implements Callable interface</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WebDownloader</span> webDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        webDownloader<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Download a picture called："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestCallable</span> testCallable1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2610481/ft640/13343944.webp"</span><span class="token punctuation">,</span><span class="token string">"图片1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TestCallable</span> testCallable2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2613444/ft640/29545946.webp"</span><span class="token punctuation">,</span><span class="token string">"图片2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TestCallable</span> testCallable3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2983984/ft640/618791961.webp"</span><span class="token punctuation">,</span><span class="token string">"图片3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//The method used by this Class to create Thread：</span>
        <span class="token comment">//1. create an execute service:</span>
        <span class="token class-name">ExecutorService</span> ser <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. submit the execution</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> result1 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testCallable1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> result2 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testCallable2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> result3 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testCallable3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. get the result：</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">boolean</span> r1 <span class="token operator">=</span> result1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> r2 <span class="token operator">=</span> result2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> r3 <span class="token operator">=</span> result3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//4. close the service</span>
        ser<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//Downloader</span>
<span class="token keyword">class</span> <span class="token class-name">WebDownloader</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//downloading method</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常，download方法出现问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>just get to know this Callable, you may need it in the future work.</p>
</blockquote>
<h3 id="Static-Proxy"><a href="#Static-Proxy" class="headerlink" title="Static Proxy"></a>Static Proxy</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//summary of static Proxy</span>
<span class="token comment">//Both the real object and the target object need to implement the same interface</span>
<span class="token comment">//The proxy object need to acting the real role</span>

<span class="token comment">//Benefits: Proxy objects can do a lot of things that real objects can't, and real objects focus on doing their own things</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxy</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">You</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">WeddingCompany</span> weddingCompany <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeddingCompany</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">weddingCompany<span class="token punctuation">.</span></span>HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//There is a method in the Proxy interface that everyone has to override</span>
    <span class="token keyword">void</span> <span class="token class-name">HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//Real character that get married</span>
<span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你去结婚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//proxy role that helping you get married</span>
<span class="token keyword">class</span> <span class="token class-name">WeddingCompany</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//proxy who --> the real character</span>
    <span class="token keyword">private</span> <span class="token class-name">Marry</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WeddingCompany</span><span class="token punctuation">(</span><span class="token class-name">Marry</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>target<span class="token punctuation">.</span></span>HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this is the real object</span>
        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before the marriage, decorating the scene"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After the marriage, collecting the final payment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>To avoid the too much defination in the anonymous inner Class.</p>
<p>Sometime the inner Class create an object and use it only once, so it’s better to create the object of the class in the function’s parameter list.</p>
<p>It’s usually like this, to call an object of a functional interface, we can use anonymous inner Class to create the object then override the method, and the functional interface only allows one abstract method in it, so at this time we can use Lambda to simplify the code in the inner class.</p>
<p>A good note about static inner class: <a href="http://c.biancheng.net/view/1026.html">http://c.biancheng.net/view/1026.html</a>  </p>
<p>remember a key point: we can access the members of a static class without creating an object, while the normal class can not.</p>
<p>There is only one run() in the Runnable interface, it’s a functional interface, so multithread’s Runnable interface can use Lambda too.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda2</span> <span class="token punctuation">&#123;</span>
    
<span class="token comment">//Summarize a few types that can be simplified:</span>
<span class="token comment">//The parentheses can be removed when there is only one argument</span>
<span class="token comment">//The curly braces can be removed if the body of the code is only one sentence</span>
<span class="token comment">//The interfaces implemented must be functional interfaces</span>
<span class="token comment">//The same type of multiple arguments can also be removed, but the braces must be added</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//Simplification 1. Parameter types</span>
        <span class="token class-name">ILove</span> iLove <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i love you--> "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        iLove<span class="token punctuation">.</span><span class="token function">love</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Simplify 2. Simplify the parentheses</span>
        <span class="token class-name">ILove</span> iLove2 <span class="token operator">=</span> a <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i love you--> "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        iLove2<span class="token punctuation">.</span><span class="token function">love</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Simplify. Remove curly braces</span>
        <span class="token comment">//The above two have been removed</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">ILove</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>归并排序与随机快排</title>
    <url>/2019/08/27/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/</url>
    <content><![CDATA[<h2 id="归并排序与随机快排"><a href="#归并排序与随机快排" class="headerlink" title="归并排序与随机快排"></a>归并排序与随机快排</h2><h3 id="递归方式实现mergeSort"><a href="#递归方式实现mergeSort" class="headerlink" title="递归方式实现mergeSort"></a>递归方式实现mergeSort</h3><ol>
<li>整体是递归，左边排好序+右边排好序+merge让整体有序</li>
</ol>
<p>话不多说，直接上代码：<span id="more"></span></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//递归代码</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//这段递归代码很好理解，上一篇文章中解析过一个递归行为，和这个相似。</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//这个help数组的长度就是L到R之间的元素个数,用来存放合并之后的数组元素</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token comment">//i是拿给help数组使用的</span>
    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>                    <span class="token comment">//左边使用的指针</span>
    <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">//右边使用的指针</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> <span class="token class-name">M</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//这一行代码搞定了数组合并这个看起来貌似很复杂的问题                                                                                             </span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//要么p1越界了，要么p2越界了，上面的while循环就会break</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> <span class="token class-name">M</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> help<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//非递归方法实现</span>
    
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="非递归方式实现mergeSort："><a href="#非递归方式实现mergeSort：" class="headerlink" title="非递归方式实现mergeSort："></a>非递归方式实现mergeSort：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span> length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mergeSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//一组是两倍的mergeSize，分别是左边的mergeSize和右边的mergeSize</span>
    				  <span class="token comment">//可以解释为当前有序的左组长度</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>mergeSize <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//现在我令一个M，从L...M这段范围是左组大小(左组长度当然是mergeSize)，所以我可以把M算出来</span>
            <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span>  <span class="token class-name">L</span> <span class="token operator">+</span> mergeSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">M</span> <span class="token operator">></span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//如果我发现左组的范围已经大于了L到R的整体范围，break</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//L...M, M+1...R. 下面这行代码是判定右边的merge区域的右边界在哪里</span>
            <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">M</span> <span class="token operator">+</span> mergeSize<span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//防止溢出的安全语句</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mergeSize <span class="token operator">></span> <span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        mergeSize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//左移一位，相当于乘以二</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><p>让其整体有序的过程里用了排外序方法</p>
</li>
<li><p>利用master公式来求解时间复杂度</p>
<p>时间复杂度：T = T(N) = aT(N/b) + O(N^d)；</p>
<p>归并排序的时间复杂度：T =  2(N/2) +O(N)</p>
<p>满足logab = d = 1，所以其时间复杂度为N^d * logN = nlogn</p>
</li>
</ol>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20201128203601662.png" alt="image-20201128203601662"></p>
<p>归并排序的时间复杂度小于前三个排序的N^2，因为前三个排序（比如冒泡排序，存在浪费比较行为的问题）</p>
<p><strong>用常见面试题来深入理解一下归并排序的精髓</strong></p>
<p><strong>在一个数组中，一个数左边比它小的数的总和，叫数的小和，所有数的小和累加起来，叫数组小和，求数组小和</strong></p>
<p>这道题怎么做呢？用归并排序</p>
<p>跟归并排序的流程一模一样，其它地方不发生变动，唯一发生变动的过程就是merge的过程。</p>
<p>说一下merge过程的规则</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn3-1.png" alt="cn3-1"></p>
<p>首先我们知道归并排序的merge过程是准备了一个help数组的，然后呢被排序的数组中还分了左组和右组，左组和右组中各有一个指针，当左右指针分别指向左组和右组中第一个元素时，开始比较二者的大小，小的会被优先放入help数组，同时被取出元素的的那个数组的指针++，help数组的指针++。</p>
<p>merge过程中的新增规则：如果放入元素比较时左组的元素值小于右组的元素值，（因为此时左右组都是已经升序排好序了的），那么左组的这个元素的值，一定比右组指针此时指向的元素 /之后的元素的值 / 都要小，那么我们可以直接通过数组下标计算出右组中 /大于此时左组指针指向的左组元素 / 的元素个数，然后将左组指针此时所指元素放入help数组。如果左组指针和右组指针所指元素的值相等，优先放入右组元素，不记录。如果左组指针所指元素比右组指针所指元素的值大，放入右组元素，不记录。</p>
<h3 id="求小和题目的代码："><a href="#求小和题目的代码：" class="headerlink" title="求小和题目的代码："></a>求小和题目的代码：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//L...R既要排好序，也要求小和返回</span>
<span class="token comment">//要求所有merge时，产生的小和累加</span>
<span class="token comment">//左侧排序的时候会产生很多merge行为</span>
<span class="token comment">//右侧排序的时候也会产生许多merge行为</span>
<span class="token comment">//最后左右总merge时，还会产生merge行为</span>
<span class="token comment">//总的来说就是我只管我在merge的时候产生多少	</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span>
        	<span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        	<span class="token operator">+</span>
        	<span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    		<span class="token operator">+</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        	
    
<span class="token comment">//这个是merge方法，和归并的几乎一模一样，那个res三目运算符一句直接完成小和相加的任务，无敌。</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p2 <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res <span class="token operator">+=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span>r <span class="token operator">-</span> p2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> help<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="题目二：在一个数组中求所有的降序对"><a href="#题目二：在一个数组中求所有的降序对" class="headerlink" title="题目二：在一个数组中求所有的降序对"></a>题目二：在一个数组中求所有的降序对</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozartto%20/%20picturescn3-2.png" alt="cn3-2"></p>
<p>就是求每一个数，它右边有多少数比它小。比如3有3个降序对，1有1个，7有两个。如上图所示</p>
<p>归并排序的厉害之处在哪里呢？你给我一个数组里面的数，想统计它右边比它大的数有多少，它右边比它小的数有多少，他左边比它大的数有多少，它左边比它小的数有多少，都可以干。</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="Partition过程（分区过程）"><a href="#Partition过程（分区过程）" class="headerlink" title="Partition过程（分区过程）"></a>Partition过程（分区过程）</h4><p>给定一个数组arr，和一个整数num。请把小于等于num的数放在数组的左边，大于num的数放在数组的右边。（不要求左右两边有序，但是要分成左右两边）</p>
<p>要求额外空间复杂度O(1)，时间复杂度O(N)</p>
<p>给你一个数组，让你把这个数组中小于4的数放在左边，大于4的数放在右边，等于4的数放在中间</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn3-3.png" alt="image-20201130150720270"></p>
<h4 id="荷兰国旗问题"><a href="#荷兰国旗问题" class="headerlink" title="荷兰国旗问题"></a>荷兰国旗问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在arr[L...R]上玩荷兰国旗问题，一律以arr[R]做划分值	</span>
<span class="token comment">//划分成左边是小于arr[R]的，等于的在中间，大于的在右边</span>
<span class="token comment">//返回等于区域的左边和右边位置即可</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">netherlandsFlag</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">></span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>   <span class="token comment">//L > R，没区域可分，直接返回(-1,-1)</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>	<span class="token comment">//等于区域只有一个数，L==R</span>
    <span class="token comment">//上面的是basecase，下面的就是荷兰国旗问题的代码，就这么短</span>
    <span class="token keyword">int</span> less <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//小于区域的右边界</span>
    <span class="token keyword">int</span> more <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">;</span>      <span class="token comment">//大于区域左边界</span>
    index <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>         <span class="token comment">//index是遍历的指针，从L开始遍历，一直到index撞上大于区域边界之后，遍历结束</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            index<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//如果等于，什么也不干，index++</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果当前位置的数小于指定的数，做三个操作：</span>
            <span class="token comment">//1.把当前的数和小于区域的右一个数交换  2.当前位置++  3.小于区域++</span>
            <span class="token comment">//先把less代表小于区域，先把index和小于区域的右一个数（++less）交换，然后当前位置++（index++）</span>
            <span class="token comment">//然后因为之前做了++less，所以小于区域已经++了</span>
            <span class="token comment">//三个说法一行代码，左神tql</span>
    	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//最后一个分支一定是中了大于的</span>
            	 <span class="token comment">//把i位置的数和大于区域的左一个做交换，然后大于区域左移一个位置，i停在原地</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>  
    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> more<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后要把比较的标杆数放中间，也就是相等区域的最后一个，大于区域的第一个，这样刚好</span>
    				 <span class="token comment">//所以此时交换标杆数和大于区域的第一个数</span>
    				 <span class="token comment">//换完之后它就整体都符合要求了</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>less <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">//返回等于区域的左右边界，因为最后等于区域多了一个数在more位置，所以more不用-1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>讲这个干啥？引出我们的快速排序</p>
<h4 id="快速排序1-0版本"><a href="#快速排序1-0版本" class="headerlink" title="快速排序1.0版本"></a>快速排序1.0版本</h4><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn3-4.png" alt="image-20201130165200227"></p>
<p>标杆数X最终放在中间就不用再参与排序了，左右分别递归。每一次排序搞定一个数，总有搞定完的时候。这就是快排1.0版本，是最常见的版本，也是我们经常在考研数据结构复习指导书和严书上看到的版本。（当然也是最挫的版本）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">>=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//在L...R上玩partition，用arr[R]做划分 [&lt;arr[r]  ==arr[r]  >arr[r] ]</span>
    <span class="token comment">//partition方法返回值的意思是arr[R]的最终在的位置</span>
    <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//每次会搞定一个数，M位置的数，以后就不会再碰了，分别左右递归。</span>
    <span class="token comment">//总有排序完的时候</span>
    <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="快速排序2-0版本"><a href="#快速排序2-0版本" class="headerlink" title="快速排序2.0版本"></a>快速排序2.0版本</h4><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn3-5.png" alt="image-20201130170335550"></p>
<p>快排2.0版本采用上面提到的荷兰国旗划分法，与1.0版本的区别就在于1.0版本每次只能搞定一个数，而2.0版本每次能搞定与x相等的一批数（在大于和小于区域递归，等于区域不用再参与排序）。直接上代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> equalArea <span class="token operator">=</span> <span class="token function">netherlandFlag</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> equalArea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> equalArea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//荷兰国旗函数返回的是等于区域的左右边界的数组，数组里有两个值，第一个是左边界，第二个是右边界</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn3-6.png" alt="image-20201130175318052"></p>
<p>如果数组本来就是升序有序的（最坏情况），快排1.0和快排2.0版本每次都只能解决一个数，最后的时间复杂度是O(N^2)，都挺挫的。</p>
<p>接下来，3.0版本，特简单</p>
<h4 id="快速排序3-0版本"><a href="#快速排序3-0版本" class="headerlink" title="快速排序3.0版本"></a>快速排序3.0版本</h4><p>在数组中随机选一个数i，与最后一个位置的数arr[R]交换，然后用i做划分，其它所有过程与快排2.0一样。这就是最经典的快排。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">process3</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//第一步，随机选一个位置，在L...R上随机选一个位置，然后人为的让它与R位置做交换</span>
    <span class="token comment">//然后剩下的步骤与2.0版本一模一样</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> equalArea <span class="token operator">=</span> <span class="token function">netherlandFlag</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process3</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> equalArea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">process3</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> equalArea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//荷兰国旗函数返回的是等于区域的左右边界的数组，数组里有两个值，第一个是左边界，第二个是右边界</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为什么这么一干，它就变成O(N^logN)了？前面已经说过了坏情况（整体有序且不重复且标杆数在最后），那什么是好情况呢？你选的标杆num左右两侧规模差不多的时候（都为N/2）</p>
<p>T(N) = 2 * T(N/2) + O(N)→partition的操作（或netherlandsFlag操作），刚刚看完归并排序，这个式子的时间复杂度就是NlogN</p>
<p>差情况就是num打的很偏，让左右两侧规模悬殊比较大的情况，好情况就是num打的很正，左右两边规模差不多大，复杂度就好。所以，想想我们随机选一个数，当N很大时，不可能每次都命中最差情况，只能说命中最差情况是个概率事件</p>
<p>当num来到最左侧时候（右侧全部都要排，T(N)为N^2)，num也可能来到距离开头1/3的位置，此时T(N) = T(1/3 * N) + T(2/3 * N) + O(N)</p>
<p>num也可能来到距离开头的3/7处，T(N) = T(3/7 * N) + T(4/7 * N) + O(N)</p>
<p>也有可能来到1/5处，4/5处，1/6处……等等，每种情况都有可能考虑到，但是每种情况的权重只占1/n。那么数学家把所有情况做了一个概率累加，得到的期望是O(nlogn)</p>
<p>解决一个小疑惑：之前不是说估计时间复杂度要按最差情况来估计吗？为什么这里又取平均情况？注意：比如，在升序插入排序中，最差情况是654321，此时的差情况是必命中的！也就是说这种情况下你只能排出T(N) = O(N^2)的算法，但是，快排呢？在快排中，即使此时的数组情况是654321，但差情况也只是一个概率，也就是是说数组为654321的时候，num可能会打在中间，造成T = nlogn，快排并不是差情况必命中。</p>
<p>上面的这个式子：T(N) = T(1/3 * N) + T(2/3 * N) + O(N)，这是master公式没法解的，master公式必须要子问题的规模一样才行，这个式子算复杂度还挺麻烦的，它是利用假设一个复杂度，然后看结果是否收敛于这个复杂度的方式，在算法导论上有，这里就不展开了。</p>
<p>注意，快排的额外空间复杂度是O(logn)（好情况下）</p>
<p>快排也可以实现成迭代的，但是你每次返回的中间数组的边界 [L,R] 自己也要记下来，你让递归来帮你记要方便些</p>
<p>递归空间就是每一次你用来记划分值位置的空间，这个东西是你省不掉的。是logn，和二叉树的高度一样，好情况下，左侧记完之后可以把空间拿给右侧，所以此时高度是多少，空间复杂度就是多少。</p>
<p>那么差情况呢？那就是O(N)了</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn3-7.png" alt="image-20201130185528524"></p>
<p>每个位置的情况都要记录。所以最终的时间复杂度又收敛到logn去了，和时间复杂度一样，每种情况的概率都是1/n</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>太刀</title>
    <url>/2020/04/02/%E5%A4%AA%E5%88%80%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E6%80%AA%E7%89%A9%E7%8C%8E%E4%BA%BA%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<h3 id="怪物猎人太刀"><a href="#怪物猎人太刀" class="headerlink" title="怪物猎人太刀"></a>怪物猎人太刀</h3><p>左键一直按：直斩+直斩+突刺+上挑</p>
<p>再接着按就从第二个直斩开始循环</p>
<p>右键就是一个突刺，没有后续招式</p>
<p>Ctrl是气刃斩，气刃斩总共有四下，会消耗你的气刃值，其中第三下气刃斩是砍三下，并且不能打断</p>
<p>组合招式：鼠标左右键一起按就会形成一个带位移的后跳斩</p>
<p>也可以往左往右跳，但是你需要一个前置攻击动作此时。</p>
<p>看破斩：CTRL+右键，释放看破斩的前提是你必须要有一次前置攻击动作，不然释放不出来的</p>
<p>释放看破斩会消耗你气刃槽内的所有气刃值，然后还会消耗你大概三分之一左右的体力，当你防御成功时身体会发一下蓝光，当你防御成功并且成功击中怪物时，气刃槽内的气刃值会瞬间加满</p>
<p>看破斩击中敌人之后再按一下CTRL会直接触发一次气刃大回旋</p>
<p>登龙剑：CTRL+左键。向前突刺之后飞身跃起向下砍劈，帅得一批。</p>
<p>后跳斩之后再按CTRL（气刃斩）可以按三次CTRL，最后一次会触发气刃大回旋，普通的气刃斩是在第四下触发气刃大回旋</p>
<p>耐力值下方的气刃槽共有有三个等级：白色，黄色和红色。每加一层会为你提升攻击力。气刃大回旋击中目标时会为你提升一层气刃等级。</p>
<p>气刃值消耗的方式：</p>
<p>1.看破斩直接清空气刃槽</p>
<p>2.使用气刃斩消耗</p>
<p>3.脱离战斗后慢慢掉</p>
<p>4.气刃等级就算你在战斗状态也会自己慢慢掉，但是只会掉一层</p>
<p>开刃：（提升气刃值等级）</p>
<p>1.使用气刃斩四次触发气刃大回旋</p>
<p>2.使用一次看破斩之后再按CTRL触发气刃大回旋</p>
<p>3.在斜坡上按shift会滑下来冲刺，冲刺的过程中按CTRL会触发空中气刃斩，然后再按一次CTRL可直接触发气刃大回旋</p>
<p>4.后跳斩之后按三次CTRL</p>
<p>5.在空中跳下来的时候会直接触发第三次气刃斩，跳到地面上还会再来一次第三次气刃斩，之后就是气刃大回旋</p>
<p>6.看破斩的过程中有两次位移选择的机会，闪避的时候和回击的时候</p>
<p>登龙之后可以触发看破斩，不过要等一秒左右才能用</p>
<p>穿插型连招（开刃方法）：</p>
<p>1.直斩+直斩+后跳斩+气刃斩+气刃斩III+大回旋</p>
<p>2.直斩+突刺+后跳斩+气刃斩+气刃斩III+大回旋</p>
<p>3.气刃斩+突刺（右键）+后跳斩+气刃斩+右键（上捞斩）+气刃斩III+气刃大回旋斩</p>
<p>4.直斩+后跳斩+气刃斩+气刃斩III+上捞斩+气刃斩III+大回旋</p>
<p>拔刀不要按左键，要按气刃斩</p>
<p>气刃斩接剑切（看破斩）会比左键+看破斩要快</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>怪物猎人：滑步弓的使用</title>
    <url>/2020/05/02/%E6%80%AA%E7%89%A9%E7%8C%8E%E4%BA%BA%EF%BC%9A%E6%BB%91%E6%AD%A5%E5%BC%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>先清楚弓箭的三种招式</p>
<p>1.龙之箭（R+CTRL鼠标滚轮）龙之箭之后无法接任何技能，前摇巨大</p>
<p>2.钢射：任意攻击动作+鼠标快捷键（鼠标滚轮），射出一排箭</p>
<p>3.蓄力步伐（滑步）：一般的闪避动作是按对应的方向键+空格</p>
<p>蓄力步伐就是在瞄准状态下（按住）+方向键+空格键</p>
<p>弓箭的攻击方式：连续按左键（射箭）的话就是一阶蓄力、二阶蓄力和三阶蓄力，然后循环。</p>
<p>三阶蓄力伤害最高，三阶蓄力之后变成一阶蓄力，很亏。所以弓箭玩法的核心就是蓄力，作战核心就是持续高阶蓄力。</p>
<p>最好的状态是每一次都维持在三阶蓄力。通过什么办法呢？蓄力步伐。每一次蓄力步伐都会给你的蓄力等级+1，到3阶之后维持在3阶</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习简介</title>
    <url>/2020/10/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h3 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h3><p>——Note1：基本概念</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>前几天看了一下爱奇艺的推荐系统那个项目，发现还是得补一下ML，虽然说以后不搞这个(太累了，而且以后大概率炼丹)。不过做开发的了解一下ML知识也不错。目前在自学ML。公众号/博客上的文章是我的ML学习笔记，这个系列大概会写60篇左右的笔记。</p>
<p>本篇文章是对于机器学习所作的一篇非常简短的介绍。</p>
<p>机器学习的本质，就是我们想好一个函式，输入一段内容，通过这个函式的运算转换为我们想要的内容进行输出。</p>
<ol>
<li>Regression：回归</li>
<li>Binary-Classification：二元分类</li>
<li>Multi-Class Classification：多元分类</li>
</ol>
<blockquote>
<p>regression是让机器输出一个数值</p>
<p>classification是让机器做选择</p>
</blockquote>
<ol start="4">
<li>Generation：生成。让机器自己去学习怎么做，去创造内容。</li>
</ol>
<p>怎么告诉机器我们想好的函式呢？——supervised learning 监督式学习。在supervised learning里面，我们需要提供给机器大量的数据，即labeled data 被标记过的图片</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122074559312.png" alt="image-20210122074559312" style="zoom:50%;" />

<p>提供给机器labeled data之后，机器就会评估一个函式的好坏，即函式的loss。一个function的loss越小越好</p>
<p>reinforcement learning：强化学习 （Alfago）</p>
<p>supervised learning VS reinforcement learning</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122075410508.png" alt="image-20210122075410508" style="zoom:50%;" />

<p>强化学习通过reward引导机器学习。</p>
<p>unsupervised learning：无监督式学习。给机器的是无标注的数据</p>
<p>让机器寻找函式的方法：gradient Descent 梯度下降法</p>
<h3 id="前沿研究"><a href="#前沿研究" class="headerlink" title="前沿研究"></a>前沿研究</h3><ol>
<li><p>explainable AI    这个是什么意思呢？比如我现在给机器一张猫的图片，它输出cat。那它认为图片里的东西是猫的理由是什么呢？它可以解释，这个就是explainable AI</p>
</li>
<li><p>adversarial attack：刻意攻击。人为的给机器制造杂讯和噪音，比如在猫的图片里刻意加上一些东西让机器辨认失误。</p>
</li>
<li><p>network compression：网络压缩。现在机器学习系统的数据量很大，一般没有办法放在个人手机或电脑上，network compression的工作就是想办法让数据能够放在edge device(边缘设备)上。</p>
</li>
<li><p>anomaly detection：异常检测</p>
</li>
<li><p>domain adversarial learning</p>
</li>
<li><p>meta learning：learn how to learn</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122082107263.png" alt="image-20210122082107263" style="zoom:50%;" /></li>
</ol>
<p>机器学习想要达到和人类一样的水平，比如玩一个小游戏，机器学习4000个小时可以达到4000分，而人类只需要学习两个小时就可以达到4000分。所以机器靠的是后天努力，而不是先天优势。meta learning就是去想办法提升机器的先天优势。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122082432921.png" alt="image-20210122082432921" style="zoom:50%;" />

<p>life-long learning（终身学习）</p>
<blockquote>
<p>作业的角越多难度越大，比如圈圈最简单，五角星最难。</p>
<p>作业学习路线箭头路径仅供参考</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122082740740.png" alt="image-20210122082740740" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122082900740.png" alt="image-20210122082900740" style="zoom:50%;" />

<p>完全可以在家自学！网页中每个作业都有助教的Colab范例，照做就能完成一半！每个作业都有录影说明。</p>
<blockquote>
<p>注意：强烈建议使用Linux或macOS系统来完成作业！Windows系统常常独立运行，很容易出问题.</p>
<p>没装过系统的建议先使用能够快速上手的Ubuntu</p>
<p>所有的作业都必须以python3.6.8来完成</p>
<p>管理python库的pyenv，这个后面再用</p>
</blockquote>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>regression——case study</title>
    <url>/2020/10/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>——Note2   </p>
<h3 id="regression的应用"><a href="#regression的应用" class="headerlink" title="regression的应用"></a>regression的应用</h3><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122105315517.png" alt="image-20210122105315517" style="zoom:50%;" />

<h3 id="example-application：精灵宝可梦"><a href="#example-application：精灵宝可梦" class="headerlink" title="example application：精灵宝可梦"></a>example application：精灵宝可梦</h3><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122091338656.png" alt="image-20210122091338656" style="zoom:50%;" />

<p>列出了我们预测的function之后，还要定义loss function来判断function的好坏</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122103838176.png" alt="image-20210122103838176" style="zoom:50%;" />

<p>在字母右上角加一个星号的loss function代表最好的function</p>
<ol>
<li>step one、收集数据</li>
<li>step two、写出function并带入数据</li>
<li>找出best function</li>
</ol>
<h3 id="寻找best-function"><a href="#寻找best-function" class="headerlink" title="寻找best function"></a>寻找best function</h3><p>下面再介绍一下使用gradient descent来寻找best function。</p>
<p>有关gradient descent 的 theory 我们下次再讲，今天先讲一讲它的操作是什么样子的</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122105209929.png" alt="image-20210122105209929" style="zoom:50%;" />

<p>图中的η是提前准备好的参数，每一次求完微分就乘以一个η，η又被叫做learning rate，即学习速率，η越大梯度下降的就越快，机器学习的就越快</p>
<p>上面这种情况是单个参数的情况，有多个参数的情况该怎么办呢？对各个参数求偏微分即可</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122105538429.png" alt="image-20210122105538429" style="zoom:50%;" />

<p>gradient其实就是上面的那个▼L，就是对所有偏微分求一个vector.</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>解决一个担心的问题：在linear regression中，你们看到的loss function就是平面的等高线（虽然convex是凸面的意思，给我整蒙了）</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122110249551.png" alt="image-20210122110249551" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122112007465.png" alt="image-20210122112007465" style="zoom:50%;" />

<p>e代表的是error，也就是误差值。那我们发现这个式子其实在cp值接近0和比较大的时候预测的不太准确，这个时候可能就需要引入其它项，比如平方项。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122112459512.png" alt="image-20210122112459512" style="zoom:50%;" />

<p>同理，还可以引入三次方、四次方、更高次方…</p>
<p>当然，并不是次方越高越好，比如下面这张图：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122112759557.png" alt="image-20210122112759557" style="zoom:50%;" />

<p>当把x的次方提升到4次居然比二次时时，发现误差值居然比二次时要更大，这种现象叫做<strong>过拟合</strong></p>
<h3 id="Training-data和Testing-data"><a href="#Training-data和Testing-data" class="headerlink" title="Training data和Testing data"></a>Training data和Testing data</h3><p>training data训练数据模型和testing data还是有区别的，理论上来说高次函数应该是包含了低次函数的（你令高次项系数为0即可），所以在training data中是次数越高error rate越小。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122113416887.png" alt="image-20210122113416887" style="zoom:50%;" />

<p>但是在testing data上就不一定了：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122113825770.png" alt="image-20210122113825770" style="zoom:50%;" />

<p>但是精灵宝可梦还有一个奇怪的地方，当我们收集了60只精灵时：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122114411364.png" alt="image-20210122114411364" style="zoom:50%;" />

<p>可以发现cp值在较低和较高的位置变化趋势有较大不同，那究竟是什么在影响结果呢？很显然——精灵的种类</p>
<p>可以在前面加一个δ，不同精灵使用此函数计算时，对应的δ的值不同</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122115517679.png" alt="image-20210122115517679" style="zoom:50%;" />

<p>那还会不会有其它因素影响我们算出来的函式呢？</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122122011266.png" alt="image-20210122122011266" style="zoom:50%;" />

<p>当然可能有！所以我们把什么hp值其它的精灵属性也加上试一试？training error果然很小，但是testing error？？过拟合得有点严重啊小伙子，有没有什么方法能够增加曲线的平滑程度，让曲线不要变化得太激烈呢？如果你是大木博士你可能知道可以去掉一些不必要的参数，但是我不是大木博士，所以我要用什么方法呢？在loss function上做文章！</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/MozarttoMozarttoimage-20210122122234726.png" style="zoom:50%;" />

<p>（作业至少几百个参数…要在降维上做文章）</p>
<p>这招呢，叫做regularization。它要做的事情就是我们re-design了我们的loss function，加上了一个额外项，见下图</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122124442615.png" alt="image-20210122124442615" style="zoom:50%;" />

<p>我们喜欢比较平滑的function</p>
<p>让model对权重w不敏感</p>
<p>wi越小表示的是输入对输出的影响越小(权重小),也就是test data和training data对output的影响越小,所以模型预测越准确</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122125001162.png" alt="image-20210122125001162" style="zoom:50%;" />

<p>所以我们增大λ，然后权重w的影响就会变小，当数据变化时函式对噪声的敏感度就会降低。曲线会逐渐变得平滑，但是我们又不喜欢太平滑的曲线，因为那就是一条水平线了。比如上面这张图，我们需要不断调整λ的值来使testing error达到最小，即λ=100时。</p>
<p>有作业！记得做！</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>比较器与堆</title>
    <url>/2019/11/23/%E6%AF%94%E8%BE%83%E5%99%A8%E4%B8%8E%E5%A0%86/</url>
    <content><![CDATA[<h3 id="比较器与堆"><a href="#比较器与堆" class="headerlink" title="比较器与堆"></a>比较器与堆</h3><p>首先回顾一点，希望大家不要忘了：为什么推荐对数器？如果你代码量大，自己捋一遍看那得看多久啊，对数器检查一下更方便。实在看不下去了赶紧写对数器验，自己捋一遍人捋没了倒时候。</p>
<p><strong>下面请欣赏杂乱无章的只有我自己才看得懂的一副笔记图：（啊这，不好吧）（其实这是左老师画的）</strong><span id="more"></span></p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttocn4-1.png" alt="cn4-1" style="zoom: 33%;" />

<p>为社么有些时候完全二叉树的根结点从1开始而不从0开始？因为从1开始算数运算方便换成位运算，速度快。</p>
<p>完全二叉树可以转换成堆，堆又分大根堆和小根堆。大根堆就是树本身和每一颗子树的根节点的值都大于左右孩子的值，小根堆就是根结点的值小于左右孩子的值</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttocn4-2.png" alt="cn4-2" style="zoom:33%;" />

<p>比如上图中的这个数组就不是堆。完全二叉树想要成为堆，就必须是大根堆或者小根堆，提堆必提是大根还是小根。</p>
<p>用户给你一串数字，要你定义一个功能把这些数字实现成大根堆，如何实现？（堆：heap）</p>
<p>你一开始令一个heapSize = 0；然后往里面加元素，数组中元素的父结点下标是 ( i-1) / 2（头节点从0开始），你每添加一个元素就往父结点上看，如果添加进来的元素比父结点大，它两就交换位置，然后继续往上看父结点。反正就是你每添加一个元素就一直往上看，到顶部就停。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>heapSize <span class="token operator">==</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">throw</span> <span class="token class-name">RuntimeEception</span><span class="token punctuation">(</span><span class="token string">"heap is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
    heap<span class="token punctuation">[</span>heapSize<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">;</span>
    <span class="token function">heapInsert</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> heapSize<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//index来到整个树的根结点时（index = 0,(index - 1) / 2 = 0  -0.5向上取整为0，while会退出</span>
    <span class="token comment">//index的值不大于其父结点的值时while也会退出</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//插入节点的值大于其父结点的值</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">//你来到你父亲结点的位置继续往上看</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>假如你收了n个数，你的完全二叉树的高度是logn级别的，所以加入大根堆时的结点调整代价每一步都是logn</p>
<p><strong>假如用户给你了一串数字并让你构造好了大根堆，现在用户要求你删除掉大根堆里最大的那个数字，将最大值返回给用户，并保持剩下的数仍然是一个大根堆，请实现这个功能</strong></p>
<p>这个又涉及到另一个重要的概念，叫heapify. 过程是这样的，你先用一个遍量t记录下根结点的值（最大值），然后让最后一个变量代替根结点到最上面去（数组中第一个数），然后让这个变量往下依次与其左孩子(2i+1)和右孩子(2i+2)比较，和较大的那个孩子互换位置，然后再往下重复比较过程直至索引越界（此时已经到达最下层的叶结点），把t返回给用户，流程结束。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//先记录下最大值</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//应该是先交换再减？左神写的先减再交换</span>
    <span class="token function">heapify</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token comment">//把最大值返回给用户</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//从index开始往下沉，往下看，不断地下沉</span>
<span class="token comment">//停止的条件：我的孩子都不比我大，或者我已经没孩子了，停</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//左孩子下标超过数组大小，说明没有左孩子，为叶子节点</span>
        <span class="token comment">//左右两个孩子中，谁大，谁把下标给largest</span>
        <span class="token comment">//右孩子胜出的条件:</span>
        <span class="token comment">//1)有右孩子   2)右孩子的值比左孩子大才行</span>
        <span class="token comment">//两个条件有一个不满足则为左孩子胜出</span>
        <span class="token keyword">int</span> largest <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> left<span class="token punctuation">;</span>
        
        <span class="token comment">//选出的较大孩子的值与当前父结点的值作比较，大的成为父结点</span>
        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>largest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">//两个孩子都没有父结点大，可以不用下沉了，break把</span>
        <span class="token punctuation">&#125;</span>
        
        
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果较大孩子的值比父结点大，二者交换</span>
        index <span class="token operator">=</span> largest<span class="token punctuation">;</span>          <span class="token comment">//然后index的位置往下沉</span>
        left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//继续找下一步的左孩子，周而复始</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>那么堆排序是啥？——堆结构是一个远远比堆排序重要得多的东西，虽然堆排序本身也很精彩，很常用，但是堆结构太常用了，是一个被火车撞了都不能忘掉的结构</strong></p>
<ol>
<li>用户一股脑地给了你一批数，你就假设每一步给你一个新的</li>
<li>先把整个数组调成一个大根堆</li>
<li>然后对整个数组进行heapify，0位置的数被你放到了数组中的最后一个，此时数组中最后一个数是最大的，然后整个数组的大小-1，代表你再也别碰最后一个数了</li>
<li>然后你在对剩下的数进行heapify，你就做到了0~n-2范围上依然是堆，然后你再拿n-2范围上的数跟0位置的数再交换，堆大小再减一</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//堆排序的额外空间复杂度为O(1)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//O(N*logN)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//O(logN)</span>
        <span class="token comment">//这一步是把数组调成大根堆</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> heapSize <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把0位置的最大值调到n-1位置，并将heapSize--，以后它不用动了</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>heapSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每一次从0开始玩heapify</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//每一次玩完heapify都把0位置的数与最后一个位置的数交换，然后heapSize--</span>
        <span class="token comment">//直到heapSize减到0，整个数组变有序</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一步调成大根堆的操作可以做一个优化，可以调成O(N)</p>
<p>在这个过程中，不是从底下开始每一个结点往上看看到顶，而是从底下开始“往上遍历但是往下看”</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//代替上面的那个for循环</span>
<span class="token comment">//从i位置往下开始heapify</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样求时间复杂度是用了数列的错位相减法（高中数学知识，不再展开）</p>
<p>堆排序的优势就在于其额外空间复杂度为O(1)</p>
<h3 id="语言提供的堆结构VS你手写的堆结构"><a href="#语言提供的堆结构VS你手写的堆结构" class="headerlink" title="语言提供的堆结构VS你手写的堆结构"></a>语言提供的堆结构VS你手写的堆结构</h3><ol>
<li>取决于，你有没有动态改动信息的需求！</li>
<li>语言提供的堆结构，如果你动态改数据，不保证依然有序</li>
<li>手写堆结构，因为增加了对象的位置表，所以能够满足动态改动信息的需求</li>
</ol>
<p><strong>堆排序</strong></p>
<ol>
<li><p>先让整个数组变成大根堆结构，建立堆的过程</p>
<p>1）从上到下的方法：时间复杂度为O(N*logN)</p>
<p>2）从下到上的方法：时间复杂度为O(N)（就是刚刚讲的数列错位相减）</p>
</li>
<li><p>把堆的最大值和堆末尾的值交换，然后减少堆的大小后，再去调整堆，一直周而复始，时间复杂度为O(N*logN)</p>
</li>
<li><p>堆的大小减小成0后，排序完成</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//下面来看一下系统实现的堆（JavaAPI提供的堆）</span>
<span class="token comment">//它默认是小根堆	</span>
<span class="token comment">//java.util.PriorityQueue;</span>
<span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//优先级队列，底层实现就是堆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>来看一道与堆有关的题</strong>：</p>
<p><strong>已知一个几乎有序的数组。几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离一定不超过k，并且对k相对于数组的长度来说是比较小的。请选择一个合适的排序策略，对这个数组进行排序</strong></p>
<p>只需要使用小根堆，先向数组中的0-5位置加入6个数，然后把最小的数放在0位置，然后把0位置的数暂时从堆中移除。在6位置继续加入一个数，在2-6位置上把最小值放在2位置，移去2位置，继续加入一个数到7位置，在3-7位置把最小值放在3位置…重复上述过程即可</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sortedArrayDistanceLessK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//默认小根堆</span>
    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>index <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//先把前k+1个数放小根堆</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//中间的过程加一个弹一个</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这行代码的意思是数组中已经没有元素要加了，只需要把剩下还没排序的元素依次放入堆中即可(javaApi提供的小根堆直接poll进去默认就是从小到大排好序的)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关于时间复杂度：你的小根堆大小永远不会超过k，所以时间复杂度始终是logk级别的，你一共要放n个位置，复杂度是nlogk，如果k相对于n很小，它是一个非常好的排序。</p>
<h3 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h3><ol>
<li>比较器的实质就是比较重载运算符(C++)(Java中就是比较器)</li>
<li>比较器可以很好的运用在特殊标准的排序上</li>
<li>比较器可以很好的应用在根据特殊标准排序的结构上</li>
<li>写代码变得异常容易，还用于范型编程</li>
</ol>
<p>所有比较器都遵循一个潜台词，比如comp(T o1, T o2) (T代表泛型)</p>
<ul>
<li>返回负数代表o1排在前面的情况</li>
<li>返回正数代表o2排在前面的情况</li>
<li>返回0代表o1等于o2</li>
<li><strong>简化来说就是如果你写return o1 - o2，谁小谁就排在前面</strong></li>
</ul>
<p>剩下的是Java的基础知识。继承Comparator接口，重写里面的compare方法即可（这个是整型变量比较用的），如果是字符串比较的话，用的是compareTo方法，相信大家也不陌生（按照字典序），这个在贪心算法的文章中会详细提到，这里不再展开。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttocn4-3.png" alt="cn4-3" style="zoom:50%;" />

<p>直接把上面的系统默认小根堆改成大根堆了</p>
<p>但是，要注意，如果你已经在这个自定义了compare方法的大根堆，你加入完元素以后，它是会按大根堆给你排好的，但如果你中途对定义排序标准的数据（比如学生年龄）进行了改动，那么接下来它不能保证这一定是一个大根堆了。后面会提到Dijkstra算法，就存在自己手动改写堆的优化。写到图的相关知识时我会写一段完整的优化代码。</p>
<p>（堆结构真的超级重要，大家一定要把它练熟）</p>
<p>本篇结束。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>Basic Concept</title>
    <url>/2020/10/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><h3 id="error的两个来源"><a href="#error的两个来源" class="headerlink" title="error的两个来源"></a>error的两个来源</h3><p>——Note3：Basic Concept</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122151636090.png" alt="image-20210122151636090" style="zoom:50%;" />

<p>erro有两个来源，一个是bias(偏移量，就是函数中的b)；一个是方差variance</p>
<p>(下面这个图两个糖葫芦反了)</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122153928315.png" alt="image-20210122153928315" style="zoom:50%;" />

<p>平均值就是你的n个样本值相加再乘以1/n，这个好理解，方差的算法和我们平时所学的也一样。</p>
<h3 id="bias和variance对数据结果的影响"><a href="#bias和variance对数据结果的影响" class="headerlink" title="bias和variance对数据结果的影响"></a>bias和variance对数据结果的影响</h3><p>下面是一个很形象的图，很好的解释了bias和variance对数据结果的影响</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122153950542.png" alt="image-20210122153950542" style="zoom: 50%;" />

<p>越简单的模型越不容易受数据量的影响，比如下面这个图：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122155112746.png" alt="image-20210122155112746" style="zoom:50%;" />

<p>因为后者的函数中含有x的五次方，所以受数据量变化的影响比较大。</p>
<p>下面这个图，分别代表一次的、三次的、五次的函数进行regression的过程，分别进行了5000次拟合，取的平均值。图中黑线是真正的函数(宝可梦游戏公司研发出来的函数)，蓝色的是5000次拟合出来的函数的平均函数。可以惊人的发现，五次式虽然方差大，但是取了平均值以后结果居然与true function惊人的一致！</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122160119827.png" alt="image-20210122160119827" style="zoom:50%;" />

<p>下面这个图直观的解释了为什么会这样：model的范围问题，第二个图的model范围虽然比第一个更大，但是平均下来却能很好地定位在true function的附近</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122160707476.png" alt="image-20210122160707476" style="zoom:50%;" />

<p>下面的一个图更是出神入化地解释了这个问题的本质：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122161203412.png" alt="image-20210122161203412" style="zoom:50%;" />

<p>当你的拟合函数比较简单时，数据偏差bias会比较大，但是方差variance会比较小</p>
<p>当你的拟合函数比较复杂时，数据偏差bias会变小，但是方差variance会变大。</p>
<p>上面的三条曲线解释了bias误差和variance误差所结合带来的效果。当variance误差过大，我们称作overfitting(过拟合)，当bias误差过大，我们称作underfitting(欠拟合)</p>
<h3 id="如何判断error的类型"><a href="#如何判断error的类型" class="headerlink" title="如何判断error的类型"></a>如何判断error的类型</h3><p>怎么判断你的误差是哪一种呢？下面两张图：</p>
<p>for underfitting(error from bias)，your model can’t even fit the training examples，you should redesign your model，maybe create a more complex model</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122161930653.png" alt="image-20210122161930653" style="zoom:50%;" />

<h3 id="for-overfitting：关于过拟合"><a href="#for-overfitting：关于过拟合" class="headerlink" title="for overfitting：关于过拟合"></a>for overfitting：关于过拟合</h3><p>过拟合时有两个办法，一个是增大你的数据集，但是通常不现实，因为很多时候其实你没有办法获得更多的数据。</p>
<p>还有一个方法可以帮助你获得更多的数据，就是在条件允许的情况下自己创造数据。比如手写输入识别，用户手写一个数据，你可以将用户输入的每个数据进行五十度旋转后得到更多的数据。再比如影响辨识，你只有一个从左边开过来的火车，，没有从右边开过来的火车，你可以把你的影像颠倒，这样你就得到了更多的data。有很多很多方法可以帮你得到更多的data，不是仅限于采集数据。</p>
<p>如果你没有办法connect更多data的话，还有另外一招，叫做regularization。（上一讲中提到的，在后面加一项使你的曲线变得更加的平滑）</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122163958205.png" alt="image-20210122163958205" style="zoom:50%;" />

<p>但是这样做有一个问题，就是你把曲线变得平滑的同时确实是减小了variance，但是有可能会导致bias变大(就像之前模型过于简单时那样，所以在regularization的时候要注意这个问题)</p>
<p>其实在regularization中还有很多参数可以调，通常我们是在bias和variance之间寻找平衡(trade-off)</p>
<h3 id="训练集、结果集与测试集"><a href="#训练集、结果集与测试集" class="headerlink" title="训练集、结果集与测试集"></a>训练集、结果集与测试集</h3><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122164535524.png" alt="image-20210122164535524" style="zoom:50%;" />

<p>训练集、验证集、测试集。我们手上的testing set测试完training set之后你可能会直接选择误差最小的那个测试集，但实际的real testing set是你手上没有的。</p>
<p>“测试集应尽可能符合部署真实场景的分布，否则交叉验证再高也是徒劳，最好的数据集应该设为测试集”——来自弹幕</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122164954008.png" alt="image-20210122164954008" style="zoom:50%;" />

<p>所以public set的验证其实是不太可靠的，那要怎么做呢？你要把你的training set分为两组：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122165626113.png" alt="image-20210122165626113" style="zoom:50%;" />

<p>training set中自己先验证一次，然后再用验证集验证一次，这种方法又被称为交叉验证。</p>
<p>training set分为training set和validation(验证) set。而此时你的测试集public testing set就成为了真正的测试集</p>
<p>如果你担心你的training set分不准，可以使用n折交叉验证</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122170028934.png" alt="image-20210122170028934" style="zoom:50%;" />

<p>但是有一个原则是，如果你不太关注你在public testing set上出现的差距的话，你在private testing set上得出的误差往往是比较小的。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>gradient descent</title>
    <url>/2020/10/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>——Note4：gradient descent</p>
<p>先复习一下gradient descent的内容，如下图：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122180205343.png" alt="image-20210122180205343" style="zoom:50%;" />

<p>其中η是learning rate</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122181049006.png" alt="image-20210122181049006" style="zoom:50%;" />

<h3 id="how-to-tuning-调整-learning-rate"><a href="#how-to-tuning-调整-learning-rate" class="headerlink" title="how to tuning(调整)learning rate"></a>how to tuning(调整)learning rate</h3><p>learning rate调的太小，gradient descent进行得太慢；调得太大，梯度下降可能会卡住甚至上升，参考下图的情况，不同情况不一样：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122181535183.png" alt="image-20210122181535183" style="zoom:50%;" />

<p>在这里再提示一下哈，调节gradient descent的目的是为了是loss function降到最低，也就是线性回归后的损失最小。</p>
<p>tensorflow迭代可以选择显示loss和精确度甚至是你自定义的函数。c的话就要靠自己编程了。——来自弹幕</p>
<h3 id="调节learning-rate的几个小技巧："><a href="#调节learning-rate的几个小技巧：" class="headerlink" title="调节learning rate的几个小技巧："></a>调节learning rate的几个小技巧：</h3><p>让η随着梯度下降的过程而减小，因为一开始距离最低点很远，后面慢慢地接近</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123101837557.png" alt="image-20210123101837557" style="zoom:50%;" />

<p>learning rate这种东西不是one-size-fits-all的，不同的参数需要给它不同的learning rate，那这件事情其实是有几个小技巧的，最容易实现也是最简单的叫做adagrad(自适应梯度算法)</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123105648734.png" alt="image-20210123105648734" style="zoom:50%;" />

<p>vanilla原意思是香草，在西方香草很常见，所以vanilla代表普通、普遍、基本的意思</p>
<p>vanilla 普通的，合起来就是  普通梯度下降</p>
<p>g是偏微分，对于第一个公式没有看懂的同学可以去看一下我写的笔记二里面的梯度下降公式，回顾一下就想起来了。</p>
<p>σt的意思是之前所有偏微分g的均方根，t不是次方，而是角标，第t个σ</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123105546103.png" alt="image-20210123105546103" style="zoom:50%;" />

<p>这个公式最终可以化成最下面那个那样，根号下t+1被约掉了</p>
<p>adaptive learning rate 其实有很多种方法，adagrad只是其中的一种方法之一，但这些方法都以ada开头</p>
<h3 id="adagard"><a href="#adagard" class="headerlink" title="adagard"></a>adagard</h3><p>下面继续解释adagrad：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123111701467.png" alt="image-20210123111701467" style="zoom:50%;" />

<p>使用这种方法可以防止梯度爆炸，就是跨度越来越大</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123110406138.png" alt="image-20210123110406138" style="zoom:50%;" />

<p>我想在这里对这一节的内容做一个总结：这一节到底在讲什么呢？首先，根据梯度下降公式，我们可以得出随着gradient的进行，梯度下降的程度是越来越陡，这样可能会造成一个问题，就是错过loss function的最低点。为了防止这种梯度爆炸，我们需要调节偏微分g前面的参数learning rate，如何调节呢？learning rate不可能 one-fits-all，所以我们在前面加上和自变量t有关的式子，同时再乘上一个σ，发现约掉以后η就变成了根号下g的平方的和。因为在loss function接近最低点时，我们需要让gradient过程进行得越来越慢，才能保证loss function降到最低点。那么分母上乘以一个根号下g平方项的和，就可以帮助我们实现这种效果。那为什么要这样乘呢？</p>
<p>下面这几张图直接绝了好吧，醍醐灌顶：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123113030484.png" alt="image-20210123113030484" style="zoom:50%;" />

<p>比较不同参数时，发现距离越远微分值越大不成立，所以我们其实要把二次微分考虑进来：</p>
<p>这个其实叫二阶最优化算法，在花书的第58页上有，也叫牛顿迭代法——来自弹幕</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123113511656.png" alt="image-20210123113511656" style="zoom:50%;" />

<p>那这个方法和adagrad的关系是什么呢？</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123113952410.png" alt="image-20210123113952410" style="zoom:50%;" />

<p>当我们在一次微分的图上随便取一个sample时，它并不能反映二次微分的大小，但当我们取到了足够多的sample时，它其实可以反应二次微分的大小(一次微分的变化率)，那么adagrad分母上所做的事情其实就是在去、取足够多的，这样分母就可以反映出二次微分的大小。</p>
<h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><h4 id="tip-2：stochastic-gradient-descent-随机梯度下降-SGD"><a href="#tip-2：stochastic-gradient-descent-随机梯度下降-SGD" class="headerlink" title="tip 2：stochastic gradient descent 随机梯度下降(SGD)"></a>tip 2：stochastic gradient descent 随机梯度下降(SGD)</h4><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123114653351.png" alt="image-20210123114653351" style="zoom:50%;" />

<p>随机的很快，每次只算一个，上面的梯度下降每次要算所有的函数的loss</p>
<p>随机梯度下降不一定按gradient建议我们的方向去走，但是它的速度很快</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123120248542.png" alt="image-20210123120248542" style="zoom:50%;" />



<h4 id="tip3-Feature-Scaling-特征缩放"><a href="#tip3-Feature-Scaling-特征缩放" class="headerlink" title="tip3 Feature Scaling(特征缩放)"></a>tip3 Feature Scaling(特征缩放)</h4><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123120357726.png" alt="image-20210123120357726" style="zoom:50%;" />

<p> 假设x1和x2是宝可梦的两个不同特征值，一个是cp值，一个是hp值，从图1中可以发现x1和x2的变化范围相差较大，这个时候就要对他们进行特征缩放，使它们的变化范围大致相同。为什么要这么做呢？</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123120229975.png" alt="image-20210123120229975" style="zoom:50%;" />

<p>第一个图，你拐了一个弯，你不会指向最低点去走，但是第二图中，如果它真的是一个正圆的话，你不管在哪个位置，你都会直接向着圆心走，可以提高效率。</p>
<p>在之前讲gradient descent时讲到了这样一个图：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210122110249551.png" alt="image-20210122110249551" style="zoom:50%;" />

<p>把前面的二维图放在三维进行gradient descent大概就是这样。</p>
<p>那feature scaling的方法有很多种，常见的做法是下面这种：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123121450486.png" alt="image-20210123121450486" style="zoom:50%;" />

<p>mean是平均值，standard deviation是标准差</p>
<p><strong>接下来讲一点理论的东西，为什么gradient descent会work，它背后的理论基础是什么？</strong></p>
<p>在进入正题之前，给大家一个<strong>warning of math</strong>，这个部分没有听懂也没关系，明天的太阳依旧会升起</p>
<p>optimization problem：最优化问题    </p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123161213604.png" alt="image-20210123161213604" style="zoom:50%;" />

<p>使用Taylor series 证明了gradient descent 过程的来源</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123161330200.png" alt="image-20210123161330200" style="zoom:50%;" />

<p>you can consider the second order term, e.g Newton’s method.</p>
<p>梯度下降的局限性：梯度消失</p>
<p>当梯度消失的时候，你不一定就接近了local minima，有可能 loss function 还在高原地区，比如下面这张图：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123162225658.png" alt="image-20210123162225658" style="zoom:50%;" />

<p>而且你也不知道你的 local minima 是不是 global minima。</p>
<p>这是一个有意思的问题，下一节学习最优化。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2020/04/18/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>先把上节没做完的二叉树的题给做了…</p>
<h4 id="例题：给定一个二叉树的头结点head，返回这棵树是不是完全二叉树"><a href="#例题：给定一个二叉树的头结点head，返回这棵树是不是完全二叉树" class="headerlink" title="例题：给定一个二叉树的头结点head，返回这棵树是不是完全二叉树"></a>例题：给定一个二叉树的头结点head，返回这棵树是不是完全二叉树</h4><p>方法一：用队列对二叉树进行宽度优先遍历(层次遍历)</p>
 <span id="more"></span>

<pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public boolean isCBT1(Node head) &#123;
    if (head &#x3D;&#x3D; null) &#123;
        return ture;
    &#125;
    LinkedList&lt;Node&gt; queue &#x3D; new LinkedList&lt;&gt;();
    &#x2F;&#x2F;是否遇到过左右两个孩子不双全的结点
    boolean leaf &#x3D; false;
    Node l &#x3D; null;
    Node r &#x3D; null;
    queue.add(head);
    while(!queue.isEmpty()) &#123;
        head &#x3D; queue.poll();
        l &#x3D; head.left;
        r &#x3D; head.right;
        if (
            &#x2F;&#x2F;如果已经遇到了不双全的结点(叶子结点)之后，又发现当前结点不是叶子结点
            (leaf &amp;&amp; (l !&#x3D; null || r !&#x3D; null)) 
            || 
            &#x2F;&#x2F;左孩子为空但是右孩子不为空
            (l &#x3D;&#x3D; null &amp;&amp; r !&#x3D; null)
        ) &#123;
            return false;
    &#125;
        if(l !&#x3D; null) &#123;
            queue.add(l);
        &#125;
        if(r !&#x3D; null) &#123;
            queue.add(r);
        &#125;
        if(l &#x3D;&#x3D; null || r &#x3D;&#x3D; null) &#123;
            leaf &#x3D; true;
        &#125;
&#125;
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>方法二：用二叉树的递归套路（树型DP，在树上做动态规划）</strong></p>
<p>判断以x结点为头结点的树是不是完全二叉树，怎么分类呢？这个分类标准很有意思，根据最后一层的结点到哪了来分类。</p>
<ol>
<li>所有层都是满的，没有缺口</li>
<li>最后一层有缺口<ul>
<li>缺口停在左树上</li>
<li>缺口停在右树上</li>
</ul>
</li>
</ol>
<p>我们需要向左右子树索要的信息：1. 是否是满的   2. 树的高度</p>
<ol>
<li>什么情况下整体是满的？左树满，右树满，且左右子树高度一样。</li>
<li>第二种的情况1，左树是完全二叉树，右树是满二叉树，并且左树的高度比右树大一个</li>
<li>第二种的情况2，左树是满二叉树，右树是完全二叉树，并且左树的高度和右树相同</li>
</ol>
<p>所以，对于任何一棵子树，都需要返回三个信息：</p>
<ol>
<li>是否是满二叉树</li>
<li>是否是完全二叉树</li>
<li>高度</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isFull<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isCBT<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> full<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cbt<span class="token punctuation">,</span> <span class="token keyword">boolean</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        isFull <span class="token operator">=</span> full<span class="token punctuation">;</span>
        isCBT <span class="token operator">=</span> cbt<span class="token punctuation">;</span>
        height <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token class-name">X</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//向左右两边要完信息我要想办法整合出自己的信息来，整个递归才能连起来</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">boolean</span> isFull <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>isFull <span class="token operator">&amp;&amp;</span> rightInfo<span class="token punctuation">.</span>isFull <span class="token operator">&amp;&amp;</span> leftInfo<span class="token punctuation">.</span>height <span class="token operator">==</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    
    <span class="token keyword">boolean</span> isCBT <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>isFull<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        isCBT <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//满二叉树一定是完全二叉树	</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//以x为头整棵树，不满  </span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>isCBT <span class="token operator">&amp;&amp;</span> rightInfo<span class="token punctuation">.</span>isCBT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//注意第二种情况的两种小情况左右子树都是完全二叉树</span>
           
            <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>isCBT <span class="token operator">&amp;&amp;</span> rightInfo<span class="token punctuation">.</span>isFull <span class="token operator">&amp;&amp;</span> leftInfo<span class="token punctuation">.</span>height <span class="token operator">=</span> rightInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                isCBT <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>isFull <span class="token operator">&amp;&amp;</span> rightInfo<span class="token punctuation">.</span>isCBT <span class="token operator">&amp;&amp;</span> leftInfo<span class="token punctuation">.</span>height <span class="token operator">=</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                isCBT <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>isFull<span class="token punctuation">,</span> isCBT<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>左神写了一个生成随机二叉树的对数器，既用方法一又用方法二，测了一百万组，是对的</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210124142624276.png" alt="image-20210124142624276" style="zoom: 67%;" />

<p> 下面来一道稍微难一点的题：</p>
<h4 id="给定一棵二叉树的结点head，和另外两个结点a和b。返回a和b的公共祖先"><a href="#给定一棵二叉树的结点head，和另外两个结点a和b。返回a和b的公共祖先" class="headerlink" title="给定一棵二叉树的结点head，和另外两个结点a和b。返回a和b的公共祖先"></a>给定一棵二叉树的结点head，和另外两个结点a和b。返回a和b的公共祖先</h4><p>这个题和上题一样也可以分两种做法：用套路和不用套路做。不用套路做就遍历整棵树，把欲求结点从下往上遍历包括其所有的父结点都加入到HashSet中，然后再用另一个结点从下往上依次遍历看其父结点是否在HashSet中，即可找到他们的公共祖先</p>
<p>用二叉树的递归套路（假设它们的公共祖先结点是x）：</p>
<ol>
<li>结点o1和o2都不在以x为头的树上（直接不成立）</li>
<li>只有一个在x上（不成立）</li>
<li>o1，o2都在以x为头的树上<ol>
<li>左右各一个</li>
<li>左o1，o2</li>
<li>右o1，o2</li>
</ol>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> findO1<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> findO2<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token class-name">Node</span> a<span class="token punctuation">,</span> <span class="token keyword">boolean</span> f1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> f2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ans <span class="token operator">=</span> a<span class="token punctuation">;</span>
        findO1 <span class="token operator">=</span> f1<span class="token punctuation">;</span>
        findO2 <span class="token operator">=</span> f2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token class-name">X</span><span class="token punctuation">,</span> <span class="token class-name">Node</span> o1<span class="token punctuation">,</span> <span class="token class-name">Node</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>right<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">boolean</span> findO1 <span class="token operator">=</span> <span class="token class-name">X</span> <span class="token operator">==</span> o1 <span class="token operator">||</span> leftInfo<span class="token punctuation">.</span>findO1 <span class="token operator">||</span> right<span class="token punctuation">.</span>findO1<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> findO2 <span class="token operator">=</span> <span class="token class-name">X</span> <span class="token operator">==</span> o2 <span class="token operator">||</span> leftInfo<span class="token punctuation">.</span>findO2 <span class="token operator">||</span> right<span class="token punctuation">.</span>findO2<span class="token punctuation">;</span>
    
    <span class="token comment">//o1和o2最初的交汇点在哪</span>
    <span class="token class-name">Node</span> ans <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>ans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ans <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>ans<span class="token punctuation">;</span> <span class="token comment">//如果左树已经发现交汇点了，肯定比x发现的早，以左树上的答案为准</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rightInfo<span class="token punctuation">.</span>ans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ans <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>ans<span class="token punctuation">;</span> <span class="token comment">//如果右树已经发现交汇点了，肯定比x发现的早，以右树上的答案为准</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>findO1 <span class="token operator">&amp;&amp;</span> findO2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ans <span class="token operator">=</span> <span class="token class-name">X</span><span class="token punctuation">;</span> <span class="token comment">//如果左树也找到了o1，右树也找到了o2，但是交汇点不在两子树上，x为交汇点</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> findO1<span class="token punctuation">,</span> findO2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这道题的代码确实有点绕…不过二叉树的递归套路确实好用。这个套路是很强的，树型DP的所有问题都可以用这个套路解。</p>
<h3 id="贪心算法-1"><a href="#贪心算法-1" class="headerlink" title="贪心算法"></a>贪心算法</h3><h5 id="下面正式进入正题：贪心算法"><a href="#下面正式进入正题：贪心算法" class="headerlink" title="下面正式进入正题：贪心算法"></a>下面正式进入正题：贪心算法</h5><ol>
<li>最自然智慧的算法</li>
<li>用一种局部最功利的标准，总是做出在当前看来是最好的选择</li>
<li>难点在于证明局部最功利的标准可以得到全局最优解(一步一步把我的阶段性目标达到，最后能达到总的最优).如果你的贪心算法最后不会错过全局最优解，那么它就是有效的，反之就是无效的</li>
<li>对贪心算法的学习主要以增加阅历和经验为主</li>
</ol>
<p>贪心算法有些时候是无效的(比如下面这个题，我要拿到最多的1)：(这道题是用动态规划解的，在这里不用纠结，后面会讲)</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210124174935692.png" alt="image-20210124174935692" style="zoom: 33%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/MozarttoMozarttoimage-20210124174935692.png" style="zoom:33%;" />

<p>那你怎么证明一个看不出门道的贪心算法是好的贪心算法呢？下面这道题从头到尾连证明方法也讲一遍，当然，你在面试的时候不要去证明贪心算法：</p>
<p><strong>从头到尾讲一道利用贪心算法求解的题目：</strong></p>
<p><strong>给定一个由字符串组成的数组strs，必须把所有字符串拼接起来，返回所有可能的拼接结果中，字典序最小的结果</strong></p>
<p>有暴力方法，但是时间复杂度太高，贪心用compareTo方法即可。这题不用了解，只听证明过程即可。证明贪心算法的比较过程并不是让你以后每次使用贪心算法的时候都去进行证明，太麻烦了。</p>
<h5 id="贪心算法求解的标准过程"><a href="#贪心算法求解的标准过程" class="headerlink" title="贪心算法求解的标准过程"></a>贪心算法求解的标准过程</h5><ol>
<li>分析业务</li>
<li>根据业务逻辑找到不同的贪心策略(在每一步都找到对于当前步来说最合适的决策)</li>
<li>对于能举出反例的策略直接跳过，不能举出反例的策略要证明有效性</li>
</ol>
<p>这往往是特别困难的，要求数学能力很高且不具有统一的技巧性。每一道专属的贪心算法都要去证明的话，这个其实是我们无法接受的。</p>
<h5 id="大佬的贪心算法”偷巧”解题策略"><a href="#大佬的贪心算法”偷巧”解题策略" class="headerlink" title="大佬的贪心算法”偷巧”解题策略"></a>大佬的贪心算法”偷巧”解题策略</h5><p>还记得以前讲过的对数器吗小朋友？怎么样，是不是恍然大悟！我直呼大妙。</p>
<ol>
<li>实现一个不依靠贪心策略的解法X，可以用最暴力的尝试</li>
<li>脑补出贪心策略A、贪心策略B、贪心策略C…</li>
<li>用解法X和对数器，用实验的方式得知哪个贪心策略正确</li>
<li>不要去纠结贪心策略的证明</li>
</ol>
<p>听起来很不炫酷，但实际上它彻底地给你省掉了证明的过程。芜湖~起飞。</p>
<p>贪心在笔试中占比很高，六到七成，而且每一道贪心算法的证明是专属于那个题的，你只有研究清楚那个题的业务你才清楚该怎么证。可能你刷了再多题遇到一个新的贪心你还是得重新想。</p>
<p>贪心在面试中出现的比重低于20%</p>
<p>小根堆，大根堆，排序，是贪心策略最常用的三个东西</p>
<p>贪心的题目和代码比较多，笔记里就不写了。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>二叉树的递归套路——理解递归序的本质</title>
    <url>/2019/08/23/%E9%80%92%E5%BD%92%E5%BA%8F%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<h2 id="二叉树的递归套路"><a href="#二叉树的递归套路" class="headerlink" title="二叉树的递归套路"></a>二叉树的递归套路</h2><p>woc…现在在图书馆二楼，脚冻僵了…法克…</p>
<blockquote>
<p>作者：肖棋耀</p>
</blockquote>
<p>好，下面我来讲一下如何打印一个二叉树（不是你们想像的那种写个递归遍历代码两三行）</p>
<p>首先来看一下打印出来的二叉树是什么样子，横着的，每个孩子结点左右有箭头，箭头朝下代表右结点，箭头朝上代表左结点。H代表头结点</p>
<p>打印顺序是右头左。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201217194332339.png" alt="image-20201217194332339" style="zoom:55%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printTree</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Binary Tree:"</span><span class="token punctuation">)</span>
    <span class="token function">printInOrder</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//String to参数的意思是当前结点的那个箭头</span>
<span class="token comment">//height的意思是横着打印的时候结点前面预留的空格长度，空格长度与结点在树中的高度呈正相关</span>
<span class="token comment">//len的意思是，不管长度是多少，我都搞出一个len长度的字符串打印出来，即统一认为值是17个空间</span>
<span class="token comment">//我自己占多少位我预留好，前面空多少个空格出来跟我的高度相关</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printInOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printInorder</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token keyword">to</span> <span class="token operator">+</span> head<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token keyword">to</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lenM <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//中间部分数字占的长度</span>
    <span class="token keyword">int</span> lenL <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> lenM<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//左侧部分占的长度</span>
    <span class="token keyword">int</span> lenR <span class="token operator">=</span> len <span class="token operator">-</span> lenM <span class="token operator">-</span> lenL<span class="token punctuation">;</span>    <span class="token comment">//右侧部分占的长度</span>
    val <span class="token operator">=</span> <span class="token function">getSpace</span><span class="token punctuation">(</span>lenL<span class="token punctuation">)</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token function">getSpace</span><span class="token punctuation">(</span>lenR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//我这个值要占的总长度，左+值+右</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getSpace</span><span class="token punctuation">(</span>height <span class="token operator">*</span> len<span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据高度先在前面输出空格，再在后面补上我这个值（左+值+右）</span>
    <span class="token comment">//好累。。。不想写注释    //2021.1.21注释：啊这，你也太懒了吧，我现在写注释</span>
    <span class="token comment">//getSpace函数自己实现</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="题目：二叉树结构如下定义："><a href="#题目：二叉树结构如下定义：" class="headerlink" title="题目：二叉树结构如下定义："></a>题目：二叉树结构如下定义：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> parent<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>给你二叉树的某个结点，返回该结点的的后继结点（红黑树就是在普通二叉树上多加了一个指向父结点的指针）</p>
<p>后继结点：中序遍历结果中后面的那个结点，最后一个结点的后继结点是null</p>
<p>普遍的做法：先根据parent指针找到整棵树的头结点，然后根据头结点对整棵树进行中序遍历来寻找结点X的后继结点</p>
<p>不管是先序中序还是后序，本质上都是递归序（上一讲讲过），都是每一个结点到达三次，时间复杂度都是O(N)</p>
<p>假如我们有一种方法，能够直接找到一个结点的后继结点，如果此结点到其后继结点的距离为k，如果能把时间复杂度控制在O(k)那岂不是妙哉！</p>
<h4 id="x的后继结点是其右树上的最左结点"><a href="#x的后继结点是其右树上的最左结点" class="headerlink" title="x的后继结点是其右树上的最左结点"></a>x的后继结点是其右树上的最左结点</h4><p>找某个结点的中序遍历中的后继：</p>
<p>一直往上找，如果此结点是上一个结点的右孩子，就继续往上找，直到变成上一个结点的左孩子，上一个结点此时就是我们要找的后继</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201217202549336.png" alt="image-20201217202549336" style="zoom:40%;" />

<p>好困啊…不想更这个代码了。找中序遍历中的前驱结点也是这个思路，自己写。</p>
<p>下面来讲一个有意思的题：在国外流行了一年多，从微软开始流行，到Facebook等FLAG大厂也喜欢问。</p>
<p>请把一段纸条竖着放在桌子上，然后从纸条的下面向上方对折一次，压出折痕后展开。此时折痕是凹下去的，即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折两次，压出折痕后展开，此时有三条折痕，从上到下依次是下折痕、下折痕和上折痕。</p>
<p>给定一个输入参数N，代表纸条从下边向上方连续对折N次，请从上到下打印所有折痕的方向。</p>
<p>有一个规律，你每次对折之后，在你前一次对折的折痕上方是凹折痕，下方是凸折痕</p>
<p>所以你想从上到下打印所有折痕，就是下图中那棵树的中序遍历</p>
<p>例如：N = 1时，打印down。N = 2时，打印down down up</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201217205400523.png" alt="image-20201217205400523" style="zoom:40%;" />

<p>就是一个二叉树的中序遍历，代码很简单，如下：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201217205500038.png" alt="image-20201217205500038" style="zoom:50%;" />

<h3 id="二叉树的递归套路-1"><a href="#二叉树的递归套路-1" class="headerlink" title="二叉树的递归套路"></a>二叉树的递归套路</h3><p>可以解决面试中绝大多数的二叉树问题尤其是树型dp问题，绝大多数大到什么程度，95%以上</p>
<p>本质是利用二叉树的便利性。本质就是在树上做动态规划。</p>
<p>给定一个二叉树的头结点head，返回这颗二叉树是不是平衡二叉树</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> isBalanced<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>bollean b<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        isBalanced <span class="token operator">=</span> b<span class="token punctuation">;</span>
        height <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//以X为头结点的树</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token class-name">X</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空树直接返回（空树是平衡二叉树）</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//左树高度是多少，左树是否平衡；右树高度是多少，右树是否平衡；两个信息都拽在手里</span>
    <span class="token comment">//接下来只需要再生成出我的两个信息再返回整个函数就结束了</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">boolean</span> isBalanced <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>leftInfo<span class="token punctuation">.</span>isBalanced <span class="token operator">||</span> <span class="token operator">!</span>rightInfo<span class="token punctuation">.</span>isBalanced <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height <span class="token operator">-</span> right<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        isBalanced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//左树或右树不平衡，或左右两子树高度差超过1，将当前树改为不平衡</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在树上重复已有过程并直接取得记录过的结果，在树上做动态规划有点感觉了。</p>
<h3 id="二叉树的递归套路-2"><a href="#二叉树的递归套路-2" class="headerlink" title="二叉树的递归套路"></a>二叉树的递归套路</h3><ol>
<li>假设以X结点为头，假设可以向X左树和X右树要任何信息</li>
<li>在上一步的假设情况下，讨论以X为头结点的树，得到答案的可能性（很重要）</li>
<li>列出所有可能性后，确定到底需要向左树和右树要什么样的信息</li>
<li>把左树信息和右树信息求全集，就是任何一颗子树都需要返回的信息S</li>
<li>递归函数都返回S，每一棵子树都这么要求</li>
<li>写代码，在代码中考虑如何把左树的信息和右树的信息整合出整棵树的信息</li>
</ol>
<h3 id="例题：给定一棵二叉树的头结点head，任何两个结点之间都存在距离，返回整棵二叉树的最大距离"><a href="#例题：给定一棵二叉树的头结点head，任何两个结点之间都存在距离，返回整棵二叉树的最大距离" class="headerlink" title="例题：给定一棵二叉树的头结点head，任何两个结点之间都存在距离，返回整棵二叉树的最大距离"></a>例题：给定一棵二叉树的头结点head，任何两个结点之间都存在距离，返回整棵二叉树的最大距离</h3><p>两个节点之间的距离就是两个结点之间的结点数</p>
<ol>
<li>得到答案的可能性：<ol>
<li>最大距离与头结点X无关<ul>
<li>左树上的最大距离与右树上的最大距离两个取其中之一的max</li>
</ul>
</li>
<li>最大距离与头结点X有关<ul>
<li>X左树上离自己最远的点（左树的高度）经过X到X右树上离自己最远的点，即左高+X自己+右高</li>
</ul>
</li>
</ol>
</li>
<li>需要左右树分别提供其高度以及其最大距离</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxDistance2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>maxDistance<span class="token punctuation">;</span> <span class="token comment">//主函数只要你整棵树的最大距离</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> maxDistance<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">int</span> dis<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        maxDistance <span class="token operator">=</span> dis<span class="token punctuation">;</span>
        height <span class="token operator">=</span> h<span class="token punctuation">;</span>  <span class="token comment">//需要提供的1就这两个信息</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//返回的是左右子树提供的信息</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token class-name">X</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//返回完了左右子树的信息，开始加工我自己的信息</span>
    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxDistance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
        <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>maxDistance<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>maxDistance<span class="token punctuation">)</span><span class="token punctuation">,</span>
        leftInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> rightInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>maxDistance<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//加工完我自己的信息，就可以把左右子树的信息丢掉了。下一次之间给我的父结点返回我自己的信息。这就是动态规划的本质。跟跑个递归是一样的</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="例题：给定一棵二叉树的头结点head，返回这棵二叉树中最大的二叉搜索子树的头结点"><a href="#例题：给定一棵二叉树的头结点head，返回这棵二叉树中最大的二叉搜索子树的头结点" class="headerlink" title="例题：给定一棵二叉树的头结点head，返回这棵二叉树中最大的二叉搜索子树的头结点"></a>例题：给定一棵二叉树的头结点head，返回这棵二叉树中最大的二叉搜索子树的头结点</h3><p>搜索二叉树(BST)：整棵树上没有重复值，左子树结点永远比当前结点值小，右子树结点永远比当前结点值大</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210121145019716.png" alt="image-20210121145019716" style="zoom:67%;" />

<p>大分类：</p>
<ol>
<li><p>与X无关</p>
<ul>
<li>就是你最终找的这棵搜索二叉树不以X为头</li>
<li>就是在左右子树上单独找满足条件的最大二叉搜索树</li>
</ul>
</li>
<li><p>与X有关</p>
<ul>
<li>左树和右树都是搜索二叉树</li>
<li>左max &lt; x，右min &gt; x，这些条件都必须全部满足，有一点破坏，就只存在情况1</li>
</ul>
</li>
<li><p>需要左右子树提供的信息</p>
<ol>
<li>左子树：最大搜索子树的size、boolean isAllBst、左子树上的最大值max</li>
<li>右子树：最大搜索子树的size、boolean isAllBst、有子树上的最小值min</li>
</ol>
</li>
<li><p>这种属于左树上的要求和右树上的要求不一样的，但是我想一劳永逸，就是不用区分左右子树，所以你需要给我返回四个信息：</p>
<ol>
<li>最大搜索子树的size</li>
<li>整体是否为搜索二叉树</li>
<li>整棵子树的最大值</li>
<li>整棵子树的最小值</li>
</ol>
</li>
</ol>
<p>所以求全集：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isAllBst<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> maxSubBstSize<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> min<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> max<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAllBst<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isAllBst <span class="token operator">=</span> isAllBst<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSubBstSize <span class="token operator">=</span> size<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> min<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//接下来加工完我自己的四个信息就可以返回了</span>
    
    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">X</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">X</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        min <span class="token operator">=</span>  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> leftInfo<span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> leftInfo<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
     <span class="token keyword">if</span><span class="token punctuation">(</span>rightInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        min <span class="token operator">=</span>  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//上面两个if是在左右子树中分别找出最大值和最小值，令其成为当前树的最大/最小值</span>
    <span class="token comment">//有关min和max的加工就加工完了</span>
   
    <span class="token comment">//先说满足条件1，与x无关的情况（不满足条件2则必满足条件1</span>
    <span class="token keyword">int</span> maxSubBstSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//先默认整棵树的最大二叉搜索树的大小是0</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        maxSubBstSize <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>maxSubSize<span class="token punctuation">;</span><span class="token comment">//先把左树的最大搜索子树值赋给当前树</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rightInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        maxSubBstSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSubBstSize<span class="token punctuation">,</span> right<span class="token punctuation">.</span>maxSubBstSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//比较右树的最大值和刚才取得的最大值</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">boolean</span> isAllBst <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//满足这个条件证明其满足条件2，否则满足条件1</span>
    <span class="token comment">//什么样的情况会成立条件2</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>
    
    <span class="token comment">//左树整体是搜索二叉树</span>
    <span class="token punctuation">(</span>leftInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> leftInfo<span class="token punctuation">.</span>isAllBst<span class="token punctuation">)</span>  <span class="token comment">//这个地方容易误解，注意这个括号里只有判断条件，没有赋值语句</span>
        <span class="token operator">&amp;&amp;</span>
    <span class="token comment">//右树整体是搜索二叉树</span>
    <span class="token punctuation">(</span>rightInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> rightInfo<span class="token punctuation">.</span>isAllBst<span class="token punctuation">)</span> 
    	<span class="token operator">&amp;&amp;</span>
    <span class="token comment">//左树最大值小于X的值</span>
    <span class="token punctuation">(</span>leftInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> leftInfo<span class="token punctuation">.</span>max <span class="token operator">&lt;</span> <span class="token class-name">X</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token operator">&amp;&amp;</span>
    <span class="token comment">//右树最大值大于X的值</span>
    <span class="token punctuation">(</span>rightInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> rightInfo<span class="token punctuation">.</span>max <span class="token operator">></span> <span class="token class-name">X</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token comment">//以上四个条件头成立的情况下</span>
        
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        maxSubBstSize <span class="token operator">=</span> 
            <span class="token punctuation">(</span>leftInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> leftInfo<span class="token punctuation">.</span>maxSubBstSize<span class="token punctuation">)</span>
            <span class="token operator">+</span>
            <span class="token punctuation">(</span> rightInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> rightInfo<span class="token punctuation">.</span>maxSubBstSize<span class="token punctuation">)</span>
            <span class="token operator">+</span>
            <span class="token number">1</span><span class="token punctuation">;</span>
            isAllBst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>isAllBst<span class="token punctuation">,</span> maxSubBstSize<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">)</span>ñ
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="例题：派对的最大快乐值问题"><a href="#例题：派对的最大快乐值问题" class="headerlink" title="例题：派对的最大快乐值问题"></a>例题：派对的最大快乐值问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//员工的信息定义如下（这是一棵多叉树）</span>
<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> happy<span class="token punctuation">;</span> <span class="token comment">//这名员工可以带来的快乐值</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> nexts<span class="token punctuation">;</span> <span class="token comment">//这名员工有哪些直接下级   </span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//规定好不存在一个上级是另一个下级的下级的情况</span>
<span class="token comment">//每一个人都只有唯一的一个直接上级</span>
<span class="token comment">//所以整棵树可以写成一个多叉树结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，公司要办party，你可以决定哪些员工来，哪些员工不来，规则：</p>
<ol>
<li>如果某个员工来了，那么这个员工的所有直接下级都不能来</li>
<li>派对整体的快乐值是所有到场员工快乐值的累加</li>
<li>你的目标是让派对的整体快乐值尽量大</li>
</ol>
<p>给定一棵多叉树的头结点boss，请返回派对的最大快乐值</p>
<p>假设以X为头结点，可以跟我的子树要信息，得到答案的可能性是什么？——X来和X不来。即不管你底下的树是什么样子，你发请柬的答案都可以分为两类，发了和没发。所有的答案都只能分为这两类</p>
<ol>
<li>X来<ul>
<li>需要获得的信息：x的happy值，以x的子结点为根的树的所有快乐值的总和</li>
<li><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210121175153289.png" alt="image-20210121175153289"></li>
</ul>
</li>
<li>X不来</li>
</ol>
<ul>
<li><p>0 + </p>
<p>max(x子树a来的最大快乐值，a不来情况下的最大快乐值）</p>
<p>+</p>
<p>max(x子树b来的最大快乐值，b不来情况下的最大快乐值）</p>
<p>+</p>
<p>max(x子树c来的最大快乐值，c不来情况下的最大快乐值）</p>
</li>
</ul>
<p>所以所有的子树需要返回两个信息</p>
<ol>
<li>这棵子树头结点来的情况下它能带来的最大快乐值</li>
<li>这棵子树头结点不来的情况下它能带来的最大快乐值</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> info <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> yes<span class="token punctuation">;</span> <span class="token comment">//来时的最大快乐值</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>  <span class="token comment">//不来时的最大快乐值</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">int</span> yes<span class="token punctuation">,</span> <span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>yes <span class="token operator">=</span> yes<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//需要返回的信息：这个结点来和不来时能带来的快乐值</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>nexts<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//最基层的员工</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>happy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> yes <span class="token operator">=</span> x<span class="token punctuation">.</span>happy<span class="token punctuation">;</span>
    <span class="token keyword">int</span> no <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> next <span class="token operator">:</span> x<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Info</span> nextInfo <span class="token operator">=</span> <span class="token function">process2</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对每一个下级员工，我都调用递归函数要来它的信息</span>
        yes <span class="token operator">+=</span> nextInfo<span class="token punctuation">.</span>no<span class="token punctuation">;</span> <span class="token comment">//如果我的头结点来了，对每棵子树，我只能获得它不来状况下的最大快乐值</span>
        no <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nextInfo<span class="token punctuation">.</span>yes<span class="token punctuation">,</span> nextInfo<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果我不来，就把每棵子树来和不来都做max，累加到我的no上</span>
        <span class="token comment">//no的时候我的子树可来，可不来</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>yes<span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
  <span class="token comment">//复杂度是O(n)，递归套路一个结点最多经过3次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>高度结构化的coding，让你即便是个新手，也能把这个套路写出来。左神tql。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>认识二分法，对数器与异或运算</title>
    <url>/2019/06/22/%E8%AE%A4%E8%AF%86%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%81%E5%AF%B9%E6%95%B0%E5%99%A8/</url>
    <content><![CDATA[<h3 id="认识二分法，对数器与异或运算"><a href="#认识二分法，对数器与异或运算" class="headerlink" title="认识二分法，对数器与异或运算"></a>认识二分法，对数器与异或运算</h3><p>本节来讲一个很神奇的东西，对数器。（你们可能90%的人都没听过这个东西，包括上班族）</p>
<p>评估算法优劣的核心指标是什么？</p>
<p>时间复杂度（流程决定）</p>
<p>额外空间复杂度（流程决定）</p>
<p>常数项时间（实现细节决定）</p>
<p>常见的常数时间的操作：</p>
<ul>
<li>常见的算数运算（+、-、*、/、%等）</li>
<li>常见的位运算（&gt;&gt;、&gt;&gt;&gt;、&lt;&lt;、|、&amp;、^等）</li>
<li>赋值、比较、自增、自减操作等</li>
<li>数组寻址操作</li>
</ul>
<p>总之，执行时间固定的操作都是常数时间的操作；反之则不是。</p>
<p>解释：&gt;&gt;为带符号右移、&gt;&gt;&gt;为不带符号右移。带符号右移代表一个数在其二进制表示得情况下，所有数字向右移动一位，最高位会空出来，正数最高位为0所以填充0，负数则填充1。不带符号位右移最高位统一填充0</p>
<p>时间复杂度就是计算一个流程中发生了多少常数时间的操作。所以你在拆分算法的时候一定要拆分到只剩下常数时间</p>
<p>下面我们来分析一个简单的算法：升序型选择排序</p>
<p>选择排序的流程（升序）：在数组中，将第一个变量初始化为最小的变量（用一个min变量记录）通过与剩下的n-1个数进行比较来不断更新min，比较完成后将min置于第一位。紧接着，在剩下的n-1个数中将min赋值给第一个数，并重复上述流程，直至数组中只剩最后一个数与它自身比较时，排序结束。时间复杂度为n^2（等差数列求和）</p>
<p>只要保证最终划分出来的操作都是常数时间的操作即可。不用纠结它具体精确地执行了多少次，因为最后我们关心的是量级。</p>
<h3 id="如何确定算法流程的总操作数量与样本数量之间的表达式关系？"><a href="#如何确定算法流程的总操作数量与样本数量之间的表达式关系？" class="headerlink" title="如何确定算法流程的总操作数量与样本数量之间的表达式关系？"></a>如何确定算法流程的总操作数量与样本数量之间的表达式关系？</h3><p>划分到常数时间的操作后计算执行常数时间操作的执行次数</p>
<p>下面再讲三个时间复杂度都是O(n^2)的排序（带代码，均以升序为例）</p>
<ol>
<li><p>选择排序</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        
        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            minIndex <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minIndex <span class="token operator">?</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> minIndex<span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>冒泡排序</p>
</li>
</ol>
<p>从第一个数开始，与第二个数比较，谁大谁在后面，2跟3比较，谁大谁在后面，3跟4比较，谁大谁在后面。。。就这样一直延续下去，最后一个数肯定是最大的数。接下来，我们在0~n-1范围内重复这个操作，直到最后只剩在0上进行这个操作时，排序完毕</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>  i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span> 
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>冒泡排序和选择排序的特点：数据的初始状况对排序时间复杂度没有影响</p>
<ol start="3">
<li>插入排序</li>
</ol>
<p>先做到0-0上有序（本来就成立），然后做到0-1上有序，需要比较0和1的值，把小的放前面，然后做到0-2上有序，需要比较2和前两者的值，小的话就往前移，直到做到0~n-1上有序即可。（最好情况下时间为O(n)，最差情况下为O(n^2)，时间复杂度一般估计最差情况，所以时间复杂度为O( n^2 ) 。*：O代表最坏情况，Θ代表最好情况，Ω代表平均情况。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//0~0有序已经做到了，从0~1有序开始</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      
                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 关于额外空间复杂度：比如拷贝数组函数，你要新开辟一个数组空间来进行拷贝并返回给用户，这个时候的额外空间复杂度是多少？O(1)，因为这是用户要求的功能，他不算额外空间，你就要它。额外空间：与功能无关，是为了支持你这个流程，你自己开辟的额外空间。</p>
<p>*：作为输入参数的空间不算额外空间，作为输入结果的空间也不算额外空间，这些都是必要的。 </p>
<p>第三个核心的指标才叫常数项时间。两个算法流程是一样的时间复杂度时，才关心常数时间。加减运算速度快于乘除运算，位运算速度快于加减运算（或、异或、左移、右移） 。常数项时间是实现细节决定的，一般用对数器直接去测试进行比较。</p>
<p>一般认为，在满足时间复杂度的基础上使用尽可能少量的空间，是一个算法的最优解。</p>
<h3 id="算法分为两种"><a href="#算法分为两种" class="headerlink" title="算法分为两种"></a>算法分为两种</h3><ol>
<li>知道怎么算的算法</li>
<li>知道怎么试的算法（大部分人都不具备试算法的能力）</li>
</ol>
<br/>

<ol>
<li>你在网上找到了某公司的面试题，你想了好久，感觉自己会做，但是你找不到在线测试，你好心烦…</li>
<li>你和朋友交流面试题，你想了好久，感觉自己会做，但是你找不到在线测试，你好心烦…</li>
<li>你在网上做笔试，但是前几个测试用例都过了，突然一个巨大无比的数据量来了，结果你的代码报错了，如此大的数据量根本看不出哪错了，你好心烦…</li>
<li>咋办？？？ 对数器！有了对数器，你根本不用依赖一道题目在线测试的页面，你自己就足以改出万无一失的代码。</li>
</ol>
<h3 id="认识对数器"><a href="#认识对数器" class="headerlink" title="认识对数器"></a>认识对数器</h3><ol>
<li>你想要测的方法a</li>
<li>实现复杂度不好但容易实现的方法b（一般暴力递归都很好写，后面会专门写文章来讲这个问题）</li>
<li>实现一个随机样本生成器</li>
<li>把方法a和方法b跑相同的随机样本，看看得到的结果是否一样</li>
<li>如果有一个随机样本使得对比结果不一致，打印样本进行人工干预，改对方法a和方法b</li>
<li>当样本数量很多时对比测试依然正确，可以确定方法a已经正确。</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对数器</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//在Java中随机数产生器时Math.random() 它会返回[0,1)所有小数中等概率返回一个</span>
    <span class="token comment">//Math.random() * N  [0,N)</span>
    <span class="token comment">//(int)(Math.random() * N)  [0,N-1]左闭右闭区间上随机返回一个整数</span>
    <span class="token comment">//生成一个数组长度是随机的</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//每个位置的值是一个随机值减去另外一个随机值</span>
    <span class="token comment">//加工出来一个长度也随机，值也随机的数组</span>
    <span class="token comment">//不减也行，不减的话产生的是零到正数的一个随机，减了之后产生的是零到负数的一个随机</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一步：生成一个随机数组，写一个copy函数把这个数组给copy下来</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>main方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> textTime <span class="token operator">=</span> <span class="token number">500000</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> succeed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> textTime<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token function">generateRandomArray</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">comparator</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//系统提供的排序方法</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        succeed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>succeed <span class="token operator">?</span> <span class="token string">"Nice!"</span> <span class="token operator">:</span> <span class="token string">"Fucking fucked!"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//isEqual方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>arr1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> arr2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">!=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看上去它是最慢的，实际上它就是最稳的最快的。</p>
<h3 id="简单的二分法其实不简单"><a href="#简单的二分法其实不简单" class="headerlink" title="简单的二分法其实不简单"></a>简单的二分法其实不简单</h3><p> 你听过二分法，但是，你可能没听过我讲的二分法。</p>
<p>在计算机中logn默认为以二为底的对数</p>
<p>一个例子：寻找一个升序数组中大于等于二的最左侧的数</p>
<p>数组：112222223333333444444444444</p>
<p>是用二分法先定位到数字中间的那一个数，然后看其是否在你给的范围内，当前的位置如果达标（比如此时定位到3，3在给定的大于等于二的范围内），那么就往左侧继续二分，当前位置如果不达标，那么就往右侧继续二分（往哪侧根据具体情况而定）。一直二分到没有数可分，此时最左侧达标的对号，你绝对找到了，二分结束。</p>
<p>下面展示代码：</p>
<ol>
<li>这个是基础的二分法，在一个升序数组中，找某个数是否存在</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sortedArr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sortedArr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> sortedArr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> sortedArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//mid = (L + R) / 2,这个是不安全的写法，容易溢出</span>
    						 <span class="token comment">//安全写法：mid = L +(R - L) / 2,位运算更快，所以用位运算</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>sortedArr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sortedArr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> sortedArr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在一个升序数组中，找&gt;=某个数最左侧的位置</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在arr上，找满足大于等于value的最左位置</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nearestIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            index <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> index<span class="token punctuation">;</span>        
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>在一个升序序数组中，找&lt;=某个数最右的位置，和上面同理</li>
</ol>
<p>现在请读者思考：如果一个数想乘以二，是不是应该向左移一位(&lt;&lt;)呢？如果一个数想乘以二再加一，是不是可以左移一位然后与1或一下呢？是的。左移后最低位用0来补，和1或一下相当于加1</p>
<h3 id="局部最小值问题"><a href="#局部最小值问题" class="headerlink" title="局部最小值问题"></a>局部最小值问题</h3><ul>
<li>局部最小的定义：0位置的数如果比1位置的数小，就是局部最小；中间的数比两边的数小，就是局部最小；n位置的数如果比n-1位置的数小，就是局部最小。</li>
<li><strong>有一个数组，这个数组中任意两个相邻位置的数都不相等，我只需要你给我返回一个局部最小值即可，哪一个都行。</strong></li>
</ul>
<p>有多少同学觉得上面这个问题可以用<strong>二分法</strong>来解决？这里说明一下，不是只有有序的情况才能使用二分法，无序也可以使用（当时我听到这个概念的时候也非常震惊，左老师功力果然深厚，不愧是前IBM程序员）</p>
<p>如何二分呢？</p>
<p>首先先看头尾是否存在局部最小，若都不存在则局部最小肯定在中间（函数先减后增，肯定存在拐点），这个时候取mid为数组中间的数进行二分，若mid为局部最小则直接返回，若mid不为局部最小，则它往两侧下降，那么在左边或右边的区间内肯定都存在局部最小，随便取一边继续二分即可，直到找到局部最小值为止。</p>
<ol start="5">
<li><strong>你在二分的过程中能够找到一种“排他性”的原则出现，你就可以二分。只要你构建出一种可以排掉另外一边的逻辑，而且这个逻辑是正确的，你就可以二分。</strong></li>
</ol>
<p>局部最小值问题的代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">guessLessIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//no exixt</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在面试题中使用异或运算"><a href="#在面试题中使用异或运算" class="headerlink" title="在面试题中使用异或运算"></a>在面试题中使用异或运算</h3><p>异或运算：不同为1，相同为0。这么记，说实话有点low了。</p>
<p><strong>异或运算：无进位相加</strong></p>
<p>记一下有用的异或运算的性质：</p>
<ol>
<li>0^N == N    N^N == 0</li>
<li>异或运算满足交换律和结合律</li>
<li>上面两个性质用无进位相加理解起来就非常容易（因为反正都是相加，加的顺序不重要）</li>
</ol>
<p>下面我们来看一些骚操作：</p>
<p><strong>题目一：如何不用额外变量就交换两个数的值？</strong></p>
<p>三行代码：</p>
<p>a = a ^ b</p>
<p>b = a ^ b</p>
<p>a = a ^ b</p>
<p>是不是tql…hhh</p>
<p><strong>使用前提：你交换的两个变量内存是独立的</strong></p>
<p>所以：老老实实地写临时变量，花里胡哨的秀一下即可，实际开发中慎用。面试过程中可能会考你，实际上巨无聊。</p>
<p><strong>题目二：一个数组中只有一种数出现了奇数次，其它数都出现了偶数次，怎么找到并打印这种数。</strong></p>
<p>int 一个临时变量eor = 0，让eor与数组中的所有数异或一次，最后剩下的那个数就是出现奇数次的那个数。</p>
<p><strong>题目三：怎么把一个整型的数，提取出最右侧的1来</strong></p>
<p>一个数二进制数n经过怎样的一个过程可以让它变成只剩下最右侧的那个1，其余位置全为0</p>
<p>N&amp;(~N+1)    N与上(N取反加一)    N最右侧的1之前的0取反都变成了1，最右侧的1变成了0，再加1，最右侧的1从0变回了1，它之前的0从1进位全部变回了0</p>
<p><strong>题目四：一个数组中，有两种数出现了奇数次，剩下的数都出现了偶数次，你怎么找到并打印这两种数</strong></p>
<p>int eor = 0；让eor与数组中的所有数异或一遍，会得到eor = a ^ b(a,b分别为出现了奇数次的两个数) a和b不相等，说明eor一定不为0，说明eor一定在某个位上有1，假设它在第八位上是1，说明a的第八位和b的第八位一定是不一样的，所以，你整个数组就可以分为两大类：第一大类，第八位上是1的数；第二类，第八位上是0的数。两类中都可能有某些出现了偶数次的数，但a和b一定是分开的。此时再准备一个变量eor2，只异或第八位上是0的数，可以得出啊a，b的其中一个。另外一个就是eor^eor2。（因为eor = a ^ b)</p>
<p>第八位是1？实际代码中找哪个1？——提取出最右侧的那个1，游戏结束。</p>
<p>——精彩。</p>
<p><strong>题目五：随意给你一个数字，请你输出其二进制数中1的个数</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token function">bitOneCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> rightOne <span class="token operator">=</span> <span class="token class-name">N</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//提取出最右侧的那个1，然后count++</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">N</span><span class="token operator">^=</span>rightOne<span class="token punctuation">;</span> <span class="token comment">//抹掉最右侧的那个1（异或相当于无进制相加）</span>
        <span class="token comment">//注意：为什么不能用N-rightOne，如果N是正数可以，如果N是负数则会出错。</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>——本篇结束。我直呼：精彩。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>给自己的一份配置单</title>
    <url>/2021/05/30/%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%80%E4%BB%BD%E9%85%8D%E7%BD%AE%E5%8D%95/</url>
    <content><![CDATA[<h2 id="给自己的一份配置单"><a href="#给自己的一份配置单" class="headerlink" title="给自己的一份配置单"></a>给自己的一份配置单</h2><p>来系统地写一下电脑配置的问题。这个问题确实研究了比较久，自己也了解到了很多关于硬件的知识。</p>
<h3 id="显示器：AOC-Q27G2S"><a href="#显示器：AOC-Q27G2S" class="headerlink" title="显示器：AOC Q27G2S"></a>显示器：AOC Q27G2S</h3><p>说下目前市场上显示器的特点，一般来说，普通人配显示器主要考虑的是两个参数：屏幕刷新率和像素。目前市面上主流的1000-2000左右的显示器能同时满足以上两点的显示器非常多，说一下我为什么选这一款。</p>
<h4 id="1-刷新率与像素问题"><a href="#1-刷新率与像素问题" class="headerlink" title="1. 刷新率与像素问题"></a>1. 刷新率与像素问题</h4><p>首先，我是个臭打游戏的。除了游戏之外可能还会进行一些轻度办公和电影。那么显示器的刷新率肯定是考虑到的首要因素。对于玩家来说，30HZ和60HZ的区别是非常巨大的，60HZ差不多是大部分3A流畅运行的最低标准，我现在用来写博客的matebook14就是60HZ的。以怪物猎人世界来举例，30HZ和60HZ的差别如下：</p>
<p><a href="https://www.bilibili.com/video/BV1W5411P7CH?from=search&amp;seid=5348619926904099395">https://www.bilibili.com/video/BV1W5411P7CH?from=search&amp;seid=5348619926904099395</a></p>
<p>那144HZ的体验呢？（注意，首先你的显示器要支持144HZ，不支持的话看着和上面的视频是一样的）：</p>
<p>（这个视频是YouTobe上的，需要翻墙看）</p>
<p><a href="https://www.youtube.com/watch?v=DKWKmv5eDS4&amp;t=143s">https://www.youtube.com/watch?v=DKWKmv5eDS4&amp;t=143s</a></p>
<p>其次，像素问题。1080×1920（1080P）和2560×1440（2K）差别还是巨大的，直观感受如下：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210530211101989.png" alt="image-20210530211101989" style="zoom: 33%;" />

<p>所以，能够满足高144HZ刷新率 + 2K的显示器，大部分价位都在1500￥往上。那为什么选择了这一款？</p>
<h4 id="2-面板材质问题"><a href="#2-面板材质问题" class="headerlink" title="2.面板材质问题"></a>2.面板材质问题</h4><p>下面我们来看第二个参数：面板材质。一般来说，主流的面板材质分为三种，IPS屏、VA屏、TN屏。</p>
<ul>
<li>TN屏：色域极差，基本已经被市场淘汰，但是由于其刷新率极高，部分TN屏目前重返市场，被用于职业FPS电竞比赛中。</li>
<li>IPS屏：综合素质最好的一款，不论是刷新率还是色彩方面表现都较为优秀。</li>
<li>VA屏：色域不如IPS屏，色差较大。</li>
</ul>
<p>以上说的常见的高刷新率 + 2K的显示器基本上都是VA材质，而AOC Q27G2S为IPS面板屏（这个价位很能打的一款，基本上是价位霸主）</p>
<h4 id="3-色域问题"><a href="#3-色域问题" class="headerlink" title="3. 色域问题"></a>3. 色域问题</h4><p>一般的合格屏幕色域范围大概在80%-100%sRGB（72%NTSC）之间，而Q27G2S的色域为131%sRGB，10.7亿色 + 8bit色深（可以8抖10），同时能够保证色准ΔE&lt;2，非常能打。正常人都知道有些8bit色深的显示器实际上是6抖8的。关于6bit与8bit的差别，可以看下图：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210530210810776.png" alt="image-20210530210810776" style="zoom: 50%;" />

<h4 id="HDR问题"><a href="#HDR问题" class="headerlink" title="HDR问题"></a>HDR问题</h4><p>1500-2000￥价位想买到真正的HDR屏幕几乎是天方夜谭，就算有HDR，大部分也是HDR400，只要你稍微查看过一点资料，就会发现HDR400效果几乎跟没有一样，而且价钱还贵了。HDR入门等级（至少肉眼可见）应该为HDR600。</p>
<p>Q27G2S不可能有HDR的，但是它有一个很蛇皮的东西，模拟HDR：（这里摘一个B站UP主的图）</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210531115553212.png" alt="image-20210531115553212" style="zoom: 33%;" />

<p>比没有强了很多，肉眼可见的提升。自带的G-MENU，那个买回来再说。</p>
<h3 id="主板-CPU"><a href="#主板-CPU" class="headerlink" title="主板+CPU"></a>主板+CPU</h3><p>本来选用的是AMD R5 3600，6核心12线程，主频3.6Ghz，睿频4.2Ghz，全核心4.0Ghz。但是考虑到Intel家的cpu对游戏的优化还是要好些，所以最后还是选择了Intel i5 10400F + 微星B560M PRO E ，4.3Ghz睿频，带3A大作足够。很多人可能觉得奇怪，为什么不用i7或i9，对于不需要使用进行大型渲染和建模的小伙伴来说10代i5已经能够带动RTX 3090（可以算是卡皇了），外加最近矿潮，显卡涨得很离谱，所以更多的预算应该放在显卡上。</p>
<p>再回答一个疑问：主板为什么不用B460M？460其实也足够，但是考虑到后面得内存频率与pcie4.0固态兼容，以及只高出的一丢丢价格（现在买了以后很长时间都不用考虑主板升级的问题），所以综合性价比还是选择了B560</p>
<h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><p>固态硬盘：看三个参数：频率（建议3200）、传输协议NVME（又快又好）SATA（有点拉跨）——当然，使用NVME代表你的主板也要有相应的M.2接口。（用一个UP主IT情报局的图：）</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210528144337395.png" alt="image-20210528144337395" style="zoom:50%;" />

<p>作为主系统盘，建议购买TLC颗粒的固态硬盘：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210528144319944.png" alt="image-20210528144319944" style="zoom:50%;" />

<p>推荐TLC颗粒的固态硬盘，如果QLC颗粒的固态硬盘降价降到和机械硬盘差不多的价格时，可以考虑作为大号仓库盘使用。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210528144538019.png" alt="image-20210528144538019" style="zoom: 67%;" />

<p>像一些主板比如X570以及B550主板，都是支持PCIE4.0的SSD。</p>
<h3 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h3><p>机械硬盘：分为PMR硬盘与SMR硬盘，个人不推荐购买SMR硬盘，相比于PMR硬盘，SMR硬盘因为读写次数都相对较多，所以寿命较短，而且随机读写能力很弱。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210528145039578.png" alt="image-20210528145039578" style="zoom: 50%;" />

<p>你要注意，一般如果你购买的硬盘是1TB以上的机械硬盘，一般都不是SMR硬盘。但是你要小心，不要购买到SMR硬盘。一般缓存是64MB的一般都是PMR硬盘，缓存超过64MB的硬盘基本上都是SMR硬盘。2.5英寸的机械硬盘，基本上都是SMR硬盘（优势是体积小），但功能不太行。如果有大容量硬盘的需求而且还追求静音的话，可以选择购买大容量的SATA固态。</p>
<h3 id="散热器"><a href="#散热器" class="headerlink" title="散热器"></a>散热器</h3><p>CPU散热器：一般分为风冷和水冷。如果是追求静音以及超频的话，可以考虑一体式的水冷散热器。自带的CPU散热器一般都是压不住性能野兽的（压不住散热）。AMD R5 3600 系列的CPU推荐购买利民的AS120风冷散热，利民的AS120在AMD平台的表现优于其它平台。 </p>
<p>刚刚又看了一篇关于风冷和水冷的文章，发现风冷是真滴牛。。。利民的AS120RGB性价比可以说是比较逆天了。</p>
<p>但是最后的最后，考虑到主机的RGB装饰（装X）属性，换成了爱国者的240冷排。</p>
<h3 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h3><p>这个没什么好说的，尽量买大功率的品牌电源，这里上海韵的650W金牌全模组（转化效率90%+）</p>
<h3 id="机箱"><a href="#机箱" class="headerlink" title="机箱"></a>机箱</h3><p>机箱：机箱大小是根据主板大小来进行划分的，一般有E-ATX机箱、ATX机箱、MATX机箱、ITX机箱（我们用的是MATX主板，所以买的是MATX机箱。当然，在购买机箱的时候也要考虑到散热器高度以及水冷冷排的位置，安装这些也是需要机箱兼容的（可以看机箱参数）。还有，如果你要储存比较多的文件的话，购买的机箱也是要考虑硬盘位有多少的。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures//Mozartto/image-20210528155902669.png" alt="image-20210528155902669" style="zoom: 50%;" />

<p>当然也要考虑机箱的颜值以及是否静音，这些参数一般都可以在购买的详情页查询到。比如购买的显卡的长度是否兼容你的机箱。</p>
<p>由于自己想搞一下光污染，之前也了解过鑫谷LUX，但好像亚克力材质的侧板容易刮花，而且透光会有色差以及模糊现象，所以最后换成了爱国者YOGO M2 PRO（钢化玻璃侧透）</p>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>RGB灯条是肯定要安排上的了，博主选用的是Asgard的16GB(8G×2)灯条，DDR4，3200频率。足够。</p>
<h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>本来是想上一张RTX2060的，但是矿潮太严重，挖矿的人越来越多，显卡溢价太严重，所以拿发小甩给我的1050TI先当过渡卡用了。</p>
<p>综上，配置单如下：</p>
<p>显示器：AOC Q27G2S</p>
<p>板U套：intel i5 10400F + 微星B560M PRO E</p>
<p>固态：西数SN550，500G</p>
<p>机械：西数蓝盘1TB，7200转 64MB SATA2</p>
<p>散热：爱国者240水冷</p>
<p>电源：海韵650W全模组</p>
<p>机箱：爱国者YOGO M2 PRO</p>
<p>内存：Asgard 8G×2 RGB</p>
<p>显卡：1050TI（七彩虹） 4G显存</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2020/04/20/JDBC/</url>
    <content><![CDATA[<p>简单地聊一下JDBC（目前不太用得上，被MyBatis替代了），之后有时间写一写Sharding-JDBC。</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>JDBC(Java DataBase Connectivity，Java数据库连接)，是一种用于执行SQL语句的JavaAPI，为多种关系数据库提供统一访问，它由一组Java语言编写的类和接口组成</p>
<p>所以JDBC的本质就是Java的一些API，定义了一些可以统一访问的类和接口</p>
<p>JDBC制定了一系列的连接数据库的操作规范的接口，要先做什么，后做什么等等一系列操作规范。</p>
<p>每个数据库分别对JDBC所规定的接口提供不同的实现类。</p>
<p>那么JDBC技术的API存放在哪里呢？</p>
<p>存放在JDK的sql包中和javax.sql包中。</p>
<p>那如何获取这些实现类呢？在后面我们学了Maven技术之后，我们可以通过Maven的坐标直接获取这些实现类，但目前还没有学，所以目前我们只能手动复制我们所需要的jar包到IDEA中使用</p>
<p>SUN公司是规范制定者，制定了规范JDBC（连接数据规范），有如下共四个类或接口：</p>
<p>DriverManager类，管理各种不同的JDBC驱动</p>
<p>Connection接口，代表JavaApp和数据库之间的连接，相当于是两地之间的道路</p>
<p>光有道路还不行，要运送信息，需要一辆小车，车上可以装载SQL语句从JavaApp中运送到数据库中。</p>
<p>同时数据库可以通过小车返回信息到JavaApp中，返回的信息叫做结果集ResultSet</p>
<p>光有车还不行，还需要一个司机来开车，司机即Driver，又叫做驱动。</p>
<p>有了这么多类和接口，还要有一个部门来专门管理这些对象，这个部门就是</p>
<p>DriverManager类</p>
<p>对了，车辆还有一个专门的名称，车辆就是Statement对象</p>
<h3 id="导入和移除jar文件依赖"><a href="#导入和移除jar文件依赖" class="headerlink" title="导入和移除jar文件依赖"></a>导入和移除jar文件依赖</h3><p>导入jar包很简单，下载JDBC的jar包之后复制到IDEA项目的lib文件夹下，再右击导入的jar文件点add as a library即可。但移除jar文件不能直接点击delete，因为当前项目已经依赖了这个jar包。</p>
<p>如何移除？点击ProjectStructure，里面有一个Modules，点击Dependencies，选中之后点一下右边的减号即可。再实际过程中很少这样移除jar包，后期都用maven。</p>
<p>导入依赖的jar文件一般都说导入依赖，导入jar包是import</p>
<h3 id="JDBC初次使用"><a href="#JDBC初次使用" class="headerlink" title="JDBC初次使用"></a>JDBC初次使用</h3><p>使用JDBC一共分为五个步骤，代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>test1</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Driver</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDBC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 向Dept表增加一条数据
         *
         * JDBC编码基本流程：
         */</span>
        <span class="token comment">//1.加载驱动 Driver</span>
        <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 前面的这个Driver就相当于是JDBC定义的统一的接口，</span>
        <span class="token comment">// 后面的那一大串就相当于是MySQL对于这个标准接口所提供的实现类</span>

        <span class="token comment">//2.注册驱动 DriverManager</span>
        <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//注意：以后可以通过反射加载驱动 Driver，注册驱动DriverManager（一行代码完成1,2两个步骤）</span>
        <span class="token comment">//Class.forName("com.mysql.cj.jdbc.Driver");</span>

        <span class="token comment">//3.获得链接 Connection</span>
        <span class="token comment">/*
        需要传3个参数：
        一.url:统一资源定位符 用来定位我们要连接的数据库
        url组成格式：
        1.协议：       jdbc:mysql
        2.IP：         127.0.0.1 / localhost
        3.端口号：      3306 MySQL专属端口号， Oracle是1521
        4.数据库名字：   mytestdb
        5.参数：        参数名=参数值&amp;参数名=参数值&amp;...&amp;参数名=参数值

        url格式： 协议://IP:端口/资源路径?参数
        jdbc:mysql://127.0.0.1:3306/mytestdb

        二.user：用户名
        三.password：密码
         */</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/mytestdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"wsadwsad"</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.获得语句对象statement</span>
        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//5.执行SQL语句，返回结果</span>
        <span class="token comment">/*
        insert delete update 增、删、改操作都是调用statement.executeUpdate
         */</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into dept values(50,'教学部','北京');"</span><span class="token punctuation">;</span>
        <span class="token comment">//有了SQL语句之后就要执行SQL语句，就要由我们的statement像我们的数据库发送SQL语句</span>
        statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//executeUpdate()a方法不会给我们返回表格，而是会给我们返回一个int值</span>
        <span class="token keyword">int</span> rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回的int值是表格中被影响的行数</span>

        <span class="token comment">//6.释放资源</span>
        <span class="token comment">//注意关闭顺序：后获得的先关闭，先获得的后关闭</span>
        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外，上面那段Class.forName(driver)不写也可以，因为JDBC有一个SPI机制，SPI机制的意思就是再使用JDBC之前它会先扫描所有的注入的jar包，如果有的话自动帮你导入内存，不用手动导入。但是并不是所有的MySQL都支持，所以为了稳妥我们还是手动加载一下驱动。</p>
<h3 id="添加异常的捕获处理"><a href="#添加异常的捕获处理" class="headerlink" title="添加异常的捕获处理"></a>添加异常的捕获处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>test1</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Driver</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDBC</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/mytestdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"wsadwsad"</span><span class="token punctuation">;</span>
    <span class="token comment">//注意，这几个变量必须加static，因为main方法是静态方法，静态方法只能访问静态的变量</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into dept values(50,'教学部','北京');"</span><span class="token punctuation">;</span>
        statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token comment">//释放资源的部分也要try catch，try catch之前先进行判空处理(和GUI那部分的类似)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="删除和修改功能"><a href="#删除和修改功能" class="headerlink" title="删除和修改功能"></a>删除和修改功能</h3><p>直接修改statement对象中的SQL语句即可。注意，外键约束会导致删除失败，删除策略可以选择置空删除和级联删除。</p>
<h5 id="注意：查询和修改返回的内容不同的原因"><a href="#注意：查询和修改返回的内容不同的原因" class="headerlink" title="注意：查询和修改返回的内容不同的原因"></a>注意：查询和修改返回的内容不同的原因</h5><p><strong>注意一个点：删除和修改功能的目的只是为了对表格进行删除和修改，所以支付要返回影响的行数即可。而查询功能是程序员需要查询表格中的内容，所以返回的是结果集</strong></p>
<h3 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h3><p>查询功能和其他SQL语句不同的地方就在于其返回的结果不是影响的行数，而是结果集resultSet</p>
<p>resultSet结果集中有一个游标next</p>
<p>next();  功能：</p>
<ol>
<li>判断游标有没有下一行，如果有下一行，则返回true</li>
<li>向下移动游标一行</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
       statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp;"</span><span class="token punctuation">;</span>
       <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">boolean</span> next <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出true</span>

           <span class="token comment">//也可以输出指定列</span>
           <span class="token keyword">int</span> anInt <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token keyword">int</span> empno <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"empno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>empno<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意：resultSet最后也要和其它两个变量一样close掉</strong></p>
<h3 id="实体类和封装结果集"><a href="#实体类和封装结果集" class="headerlink" title="实体类和封装结果集"></a>实体类和封装结果集</h3><p>当resultSet被close掉之后，其它人想要调用resultSet中返回的信息就会报错。Java中有一句话叫“万物皆对象”，也就是说，对于resultSet中返回的结果集信息，我们可以使用一个对象来存储。比如现在我们返回了100条信息，那我们就需要100个对象来进行封装。那这100个对象的信息该如何发送给别人呢？我们需要一个list集合，把这100个对象放入list集合中再发送给他人即可。</p>
<p>什么样的对象能够存储这100个数据呢？那这个类我们就需要自己写一下。</p>
<p>类名和表名相同，好辩认。</p>
<p>一般我们创建的这种类叫做实体类，放在entity包下，entity包也叫做实体类包。entity也可以写作bean或pojo.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token namespace">jdk<span class="token punctuation">.</span>jshell<span class="token punctuation">.</span>execution<span class="token punctuation">.</span></span><span class="token class-name">Util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span>

<span class="token comment">/*
实体类：
和数据库表格名称和字段一一对应的类
该类主要用处是存储从数据库中查询出来的数据
(查询出来的结果集要用对象存储起来，不然释放资源之后别人想调用结果集里面的内容就会报错)
对象从哪里来？需要创建类
除此之外该类没有任何的其它功能
要求：
    1.类名和表名保持一致（见名知意）
    2.属性个数和数据库表的列数保持一致，用属性来存储对应的列
    3.属性的数据类型和列的数据类型保持一致
    4.属性名和数据库表格列名保持一致
    5.所有属性必须为私有（出于安全考虑）
    6.实体类的属性推荐写成包装类, 比如int类型写成Integer, 因为表格中的属性可能有null值
    7.所有的属性都要有get和set方法(和后续的反射操作有关)
    8.必须具备空参构造方法
    9.实体类应当实现序列化接口(implement Serializable) (和MyBatis缓存，分布式都有关)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> empno<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> emname<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> job<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> mgr<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Util</span> date<span class="token punctuation">;</span>  <span class="token comment">//日期类型推荐写成Util类型，因为Date包在Util包下，这样写方便实现多态</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> sal<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> comm<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> deptno<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> empno<span class="token punctuation">,</span> <span class="token class-name">String</span> emname<span class="token punctuation">,</span> <span class="token class-name">String</span> job<span class="token punctuation">,</span> <span class="token class-name">Integer</span> mgr<span class="token punctuation">,</span> <span class="token class-name">Util</span> date<span class="token punctuation">,</span> <span class="token class-name">Double</span> sal<span class="token punctuation">,</span> <span class="token class-name">Double</span> comm<span class="token punctuation">,</span> <span class="token class-name">Integer</span> deptno<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empno <span class="token operator">=</span> empno<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>emname <span class="token operator">=</span> emname<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> mgr<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sal <span class="token operator">=</span> sal<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>comm <span class="token operator">=</span> comm<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getEmpno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> empno<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmpno</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> empno<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>empno <span class="token operator">=</span> empno<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> emname<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmname</span><span class="token punctuation">(</span><span class="token class-name">String</span> emname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>emname <span class="token operator">=</span> emname<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> job<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJob</span><span class="token punctuation">(</span><span class="token class-name">String</span> job<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getMgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> mgr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMgr</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> mgr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> mgr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Util</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token class-name">Util</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> sal<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSal</span><span class="token punctuation">(</span><span class="token class-name">Double</span> sal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sal <span class="token operator">=</span> sal<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getComm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> comm<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setComm</span><span class="token punctuation">(</span><span class="token class-name">Double</span> comm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>comm <span class="token operator">=</span> comm<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getDeptno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> deptno<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptno</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> deptno<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> deptno<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>所以我们要做的是什么呢？</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>test1</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Emp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDBC</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/mytestdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"wsadwsad"</span><span class="token punctuation">;</span>
    <span class="token comment">//注意，这几个变量必须加static，因为main方法是静态方法，静态方法只能访问静态的变量</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token operator">:</span> emps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//返回的第一行表格信息封装成Emp类后，返回的第二行也要封装成Emp类，所以一起放在一个list集合中</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp;"</span><span class="token punctuation">;</span>


            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

            list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在这里把list初始化一下</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> empno <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"empno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> emname <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"emname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> job <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"job"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> mgr <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"mgr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Date</span> hiredate <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"hiredate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">double</span> sal <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"sal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">double</span> comm <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"comm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> deptno <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"deptno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//所有需要的表格信息都返回完之后，用一个带全部成员变量的Emp类的构造方法把这些信息放到Emp类的实体对象中</span>
                <span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>


        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token comment">//释放资源的部分也要try catch，try catch之前先进行判空处理(和GUI那部分的类似)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="注入攻击展示"><a href="#注入攻击展示" class="headerlink" title="注入攻击展示"></a>注入攻击展示</h3><p><strong>SQL注入</strong></p>
<p>SQL注入攻击是指通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p>
<p>下面的代码是通过JDBC实现Web端用户登录的一段代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>test2</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Account</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Emp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>desktop<span class="token punctuation">.</span></span><span class="token class-name">SystemEventListener</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInjection</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//首先我们写一个根据用户名和密码返回account对象的方法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/mytestdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"wsadwsad"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token function">getAccount</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> account <span class="token operator">?</span> <span class="token string">"登陆成功"</span> <span class="token operator">:</span> <span class="token string">"登陆失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Account</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//返回的第一行表格信息封装成Emp类后，返回的第二行也要封装成Emp类，所以一起放在一个list集合中</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from account where username = '"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"' and password = '"</span><span class="token operator">+</span>pwd<span class="token operator">+</span><span class="token string">"';"</span><span class="token punctuation">;</span>


            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> aid <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"aid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> username1 <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> pwd1 <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Double</span> money <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span>aid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> pwd1<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>


        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token comment">//释放资源的部分也要try catch，try catch之前先进行判空处理(和GUI那部分的类似)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> account<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210301135518856.png" alt="image-20210301135518856" style="zoom:67%;" />

<p>如果登录密码这样写，则会改变SQL语句的逻辑，or ‘a’ = ‘a’ 永远成立，会登录成功</p>
<h3 id="使用预编译对象防止注入攻击"><a href="#使用预编译对象防止注入攻击" class="headerlink" title="使用预编译对象防止注入攻击"></a>使用预编译对象防止注入攻击</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>test2</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Account</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Emp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>desktop<span class="token punctuation">.</span></span><span class="token class-name">SystemEventListener</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInjection</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//首先我们写一个根据用户名和密码返回account对象的方法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/mytestdb?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"wsadwsad"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token function">getAccount</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> account <span class="token operator">?</span> <span class="token string">"登陆成功"</span> <span class="token operator">:</span> <span class="token string">"登陆失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Account</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//返回的第一行表格信息封装成Emp类后，返回的第二行也要封装成Emp类，所以一起放在一个list集合中</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment">/*
                1.使用PreparedStatement语句对象防止注入攻击
                2.PreparedStatement 可以使用 ? 作为参数的占位符
                3.使用 ? 作为占位符，即使是字符串和日期类型，也不用再单独添加单引号
                4.connection.createStatement();获得的是普通语句对象Statement
                5.如果想要获得预编译语句对象，调用connection.preparedStatement();
                6.如果sql语句中有 ? 作为参数占位符，要在执行CRUD之前先设置参数
                7.通过set***(问号的编号，数据)方法设置参数
             */</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from account where username = ? and password = ?;"</span><span class="token punctuation">;</span>

            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//设置参数,问号默认按123..排序</span>
            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//执行CRUD</span>
            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里不需要再传入sql语句了，上面传过了</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> aid <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"aid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> username1 <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> pwd1 <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Double</span> money <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span>aid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> pwd1<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>


        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token comment">//释放资源的部分也要try catch，try catch之前先进行判空处理(和GUI那部分的类似)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> account<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用预编译对象之后控制台输出的sql语句如下，所以可以防止注入攻击</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210301142604018.png" alt="image-20210301142604018"></p>
<p>占位参数 ? 的作用就是把所有的单引号都转义了，所以单引号不会被当作开始和结束的单引号，而是一个普通的值</p>
<h3 id="关于预编译"><a href="#关于预编译" class="headerlink" title="关于预编译"></a>关于预编译</h3><p>预编译在实际研发中数据MySQL优化部分的内容，在这里先简单说一下</p>
<p>只需要知道PreparedStatement语句对象支持预编译即可</p>
<h3 id="使用PreparedStatement对象实现CRUD"><a href="#使用PreparedStatement对象实现CRUD" class="headerlink" title="使用PreparedStatement对象实现CRUD"></a>使用PreparedStatement对象实现CRUD</h3><p>每次Java app向数据库发送语句时都是发送一条，执行一次，再发送一条，再执行一次。这样很麻烦</p>
<p>批处理一次性发送多条语句并执行，优点是减少了编译次数，语句只编译一次，提高了安全性（组织了SQL注入）</p>
<p>注意：需要设置批处理开启&amp;rewriteBatchedStatements = true</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210301204309668.png" alt="image-20210301204309668" style="zoom:67%;" />

<p>注意：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210301212449798.png" alt="image-20210301212449798"></p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>JavaWeb技术</title>
    <url>/2021/04/13/JavaWeb/</url>
    <content><![CDATA[<p>虽然现在已经很少有人用了，但它是框架的基础。</p>
<h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h3 id="认识JavaEE的项目结构"><a href="#认识JavaEE的项目结构" class="headerlink" title="认识JavaEE的项目结构"></a>认识JavaEE的项目结构</h3><p>一般我们部署的JavaEE项目会放在tomcat容器的webapps里面，里面默认已有的项目有：</p>
<ol>
<li>docs</li>
<li>examples</li>
<li>host-manager</li>
<li>manager</li>
<li>ROOT</li>
</ol>
<p>上面的每个文件夹里面都会有一些静态资源，比如css、js、index.html，除此之外，还有一个WEB-INF文件夹，这个是受保护的资源目录</p>
<p>在浏览器中<a href="http://localhost:8080代表的就是tomcat中的webapps文件夹。WEB-INF文件夹中的文件不能被直接访问到，必须要通过请求转发访问。为什么里面的文件不能被访问到呢？这跟里面装的文件内容有关。">http://localhost:8080代表的就是tomcat中的webapps文件夹。WEB-INF文件夹中的文件不能被直接访问到，必须要通过请求转发访问。为什么里面的文件不能被访问到呢？这跟里面装的文件内容有关。</a></p>
<p>一般的WEB-INF文件夹中会有这些文件：</p>
<ol>
<li>classes目录，IDEA编译后的文件</li>
<li>lib目录，存放jar包的</li>
<li>web.xml，项目的配置信息</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210322095952567.png" alt="image-20210322095952567" style="zoom:70%;" />

<p>一个web项目目录的结构如上图。</p>
<p>认识完JavaEE的项目结构之后，我们还需要了解一些学习JavaWeb所需的前置基础知识</p>
<h3 id="前置基础知识："><a href="#前置基础知识：" class="headerlink" title="前置基础知识："></a>前置基础知识：</h3><ol>
<li>HTTP，HTTP是超文本传输协议的英文简称，也就是说平时我们看到的网页其实是一个包含了许多超链接的文本，超文本意思就是一个页面里不止有文本，还有图片、音乐、视频等等。</li>
<li>我们客户端（PC）在浏览器中输入一串网址时，客户端PC通过网络向服务器发送了一个请求，服务器接收到请求之后会响应客户端。也就是说每一次我们访问网络上的一些资源（存储在服务器中），我们都要向服务器发送一个请求，然后服务器将资源返回给我们（响应）。</li>
</ol>
<p>那请求和响应对应的报文格式是什么呢？</p>
<p>请求的主要组成部分：</p>
<ol>
<li>请求行 request line  </li>
<li>请求头 request headers</li>
<li>请求体 request body</li>
</ol>
<p>请求行： 请求方式（默认为GET）+ 你访问的网址（URL） +  使用的协议</p>
<p>请求头：一些键值对信息，一些配置信息</p>
<p>请求体：里面存放请求的内容。get方式请求，请求的数据直接放在url地址后；post方式请求，请求体中才会有请求数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210327123107915.png" alt="image-20210327123107915"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210327123324072.png" alt="image-20210327123324072"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210327123428087.png" alt="image-20210327123428087"></p>
<p>GET请求方式和POST请求方式的区别：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210327123627577.png" alt="image-20210327123627577"></p>
<p>响应行格式为协议+响应状态码。响应头与请求头一样，其中存放一些键值对配置信息，响应体中存放服务器返回的资源</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210327124322859.png" alt="image-20210327124322859"></p>
<p>响应头中的键值对具体内容：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210327125338719.png" alt="image-20210327125338719"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210327125416838.png" alt="image-20210327125416838"></p>
<p>MIME类型，就是告诉浏览器我给你响应的文件是什么类型，是图片、视频、音频还是HTML文档这些。</p>
<p>前置基础知识大概就这些，下面我们来看Servlet</p>
<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210327153857359.png" alt="image-20210327153857359"></p>
<h3 id="第一个servlet小程序"><a href="#第一个servlet小程序" class="headerlink" title="第一个servlet小程序"></a>第一个servlet小程序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Myservlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/*
    要继承这个类，我们所写的项目才是一个servlet项目，否则只是一个简单的JavaSE项目
    继承了这个类之后我们的代码就可以接收浏览器发来的请求并作出运算与响应
    要想对浏览器做出相应必须重写HttpServlet类中的service方法
     */</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//接收请求和做出响应的方法必须定义在service方法中</span>
        <span class="token comment">//本方法的参数是两个对象，一个对象代表请求，另一个对象代表响应</span>
        <span class="token comment">//如果我们想获得请求中的信息，就要通过HttpServletRequest获得</span>
        <span class="token comment">//如果我们想给浏览器响应一些信息，就要通过HttpServletResponse对象响应</span>

        <span class="token comment">//希望实现的功能：</span>
        <span class="token comment">//在后台随机生成一个整数，当浏览器请求一个servlet时</span>
        <span class="token comment">//如果生成的是奇数，返回“happy new year”</span>
        <span class="token comment">//如果生成的是偶数，返回“happy birthday”</span>

        <span class="token comment">//动态生成数据</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> massage <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"happy birthday"</span> <span class="token operator">:</span> <span class="token string">"happy new year"</span><span class="token punctuation">;</span>

        <span class="token comment">//对浏览器做出响应</span>
        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过响应对象可以获得一个打印流，该打印流指向浏览器</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>massage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>写完了这段代码之后，如何让浏览器获取并显示我们的结果呢？</p>
<p>首先，在IDEA中启动配置好的tomcat服务器：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210327182442776.png" alt="image-20210327182442776"></p>
<p>启动tomcat服务器之后，我们会发现我们左侧的项目模块上面多出了一个out文件夹，IDEA编译后的代码都放在这里面，Tomcat使用的也是这里面的资源。</p>
<p>我们写的Java代码放在src文件夹下，启动tomcat服务器时IDEA会自动进行编译，想要让浏览器显示服务器计算完之后的的响应内容，需要配置WEB-INF包下的web.xml文件。xml文件相当于是一个可以自定义标签的html，但是只负责传输内容，不作为。</p>
<p>web.xml文件配置如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210327182929575.png" alt="image-20210327182929575"></p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!-- 向tomcat生明一个servlet --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--别名，外号--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.mozartto.servlet.Myservlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 对应的servlet类 --></span>
        <span class="token comment">&lt;!--
        现在我们想让浏览器执行src文件下我们写好的Java代码，就需要通过xml。上面这是配置xml的步骤
        --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 给servlet匹配一个请求的映射路径,代表要给上面的别名起一个请求的映射路径 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/MyServlet.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Servlet简单案例开发"><a href="#Servlet简单案例开发" class="headerlink" title="Servlet简单案例开发"></a>Servlet简单案例开发</h3><p>喵的，我寻思servlet都这么古老的技术了，但是还是得了解一下，但好像没必要做那么详细的笔记…每篇笔记还得把xml文档和html文档粘进来，本来Java代码就够看的了…还要我去读xml和html，这笔记记完怕是以后自己都不想看…所以servlet了解即可，那就愉快听课！</p>
<h3 id="Request获取请求行和请求头"><a href="#Request获取请求行和请求头" class="headerlink" title="Request获取请求行和请求头"></a>Request获取请求行和请求头</h3><p>get方法提交的表单信息直接放在地址栏里面进行传输（账号密码什么的都直接在后面变成一大串URL…很不安全啊！！而且由于其传输的信息都放在地址栏里面，所以没有请求体。</p>
<p>POST方法传输的信息都放在请求体里面，很安全，大妙</p>
<p>request对象有很多方法可以获取请求中的数据，获取请求行的数据，等等等等，一堆方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210329193647975.png" alt="image-20210329193647975"></p>
<h3 id="Request获取请求参数"><a href="#Request获取请求参数" class="headerlink" title="Request获取请求参数"></a>Request获取请求参数</h3><p>GET方式提交数据有一个缺点，就是数据只能通过地址栏提交，数据格式只能是文本，而POST方式提交的数据可以是多种不同的数据类型</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210329200347959.png" alt="image-20210329200347959"></p>
<p>在web.xml中配置（添加）自己写的servlet类语法如下（都是这个步骤）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210329200717860.png" alt="image-20210329200717860"></p>
<h3 id="Response设置响应"><a href="#Response设置响应" class="headerlink" title="Response设置响应"></a>Response设置响应</h3><p>通过reps对象，其中有许多方法可以设置响应头的键值对信息</p>
<h3 id="Servlet继承结构"><a href="#Servlet继承结构" class="headerlink" title="Servlet继承结构"></a>Servlet继承结构</h3><p>servlet继承结构关系图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330164503587.png" alt="image-20210330164503587"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210330164418007.png" alt="image-20210330164418007"></p>
<p>注意事项：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330135217728.png" alt="image-20210330135217728"></p>
<h3 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h3><ol>
<li>相对路径转绝对路径</li>
<li>获取容器的附加信息</li>
<li>读取配置信息</li>
<li>全局容器</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330165011164.png" alt="image-20210330165011164"></p>
<h3 id="URLPattern匹配规则"><a href="#URLPattern匹配规则" class="headerlink" title="URLPattern匹配规则"></a>URLPattern匹配规则</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330185457832.png" alt="image-20210330185457832"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210330185654261.png" alt="image-20210330185654261"></p>
<h3 id="注解模式开发servlet"><a href="#注解模式开发servlet" class="headerlink" title="注解模式开发servlet"></a>注解模式开发servlet</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210330192207459.png" alt="image-20210330192207459"></p>
<p>每一次新建一个servlet都要重新配置web.xml里面的信息，可能太麻烦了，其实我们可以直接通过注解来配置servlet里面的信息。</p>
<p>当我们新建一个servlet（类）时，我们可以在类前面加上一个注解@WebServlet，如上图所示。可以配置urlPatterns，还可以初始化一些ServletContext中的键值对参数</p>
<h3 id="forward请求转发"><a href="#forward请求转发" class="headerlink" title="forward请求转发"></a>forward请求转发</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330193659091.png" alt="image-20210330193659091"></p>
<p>servlet1响应不了的内容，转发给servlet2响应</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330200455826.png" alt="image-20210330200455826"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330200940437.png" alt="image-20210330200940437"></p>
<p>servlet1也可以增加响应，就在servlet1中使用resp.getwriter().println(“响应”)就可以了</p>
<p>但是在forward转发模式下，请求应该完全交给目标资源去处理，我们在资源组件中，不要做出任何的响应处理。</p>
<p>在forward方法调用之后，也不要再使用req和resp对象做其它操作了</p>
<h3 id="include请求转发（了解）"><a href="#include请求转发（了解）" class="headerlink" title="include请求转发（了解）"></a>include请求转发（了解）</h3><p>include请求转发和forward请求转发的区别就是换了一个调用的函数。</p>
<p>include转发的处理流程就是servlet2处理完servlet1的请求转发之后，响应给servlet1，然后servlet1再响应给客户端    </p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330201727468.png" alt="image-20210330201727468" style="zoom:67%;" />

<p>servlet1中要增加的内容，增加的响应内容是servlet1在响应之前向客户端发送的内容，之后会再向客户端发送响应的内容</p>
<p>forward是完全托管给目标资源，include是让目标资源完成部分工作</p>
<p>在include转发模式下，设置响应可以在转发之前，也可以在转发之后</p>
<p>实际开发中，forward用得比较多，因为include请求转发返还给servlet1之后还要进行一些编码，比较麻烦，让servlet2全部托管即可</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210330205939751.png" alt="image-20210330205939751" style="zoom:80%;" />



<h3 id="响应重定向处理"><a href="#响应重定向处理" class="headerlink" title="响应重定向处理"></a>响应重定向处理</h3><p>由响应对象告诉浏览器你去找别人给你进行响应。如下图，servlet3处理不了的时候就告诉servlet4，让servlet4去处理。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210331091239939.png" alt="image-20210331091239939"></p>
<ol>
<li>响应重定向是服务器给浏览器重新指定请求方向，这个请求是浏览器再次发送新的请求，所以是一种浏览器行为  地址栏会发生变化</li>
<li>重定向时，请求对象和响应对象都会再次产生，请求中的参数是不会携带的（req和resp）</li>
<li>重定向也可以帮助我们完成页面跳转</li>
<li>重定向不能帮助我们访问WEB-INF中的资源</li>
<li>重定向可以定向到外部资源</li>
</ol>
<h3 id="前端路径问题"><a href="#前端路径问题" class="headerlink" title="前端路径问题"></a>前端路径问题</h3><p>讲一下相对路径和绝对路径的问题。以及基于相对路径的base标签</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210331204733082.png" alt="image-20210331204733082"></p>
<h3 id="请求转发路径问题"><a href="#请求转发路径问题" class="headerlink" title="请求转发路径问题"></a>请求转发路径问题</h3><p>请求转发路径问题就和前端路径问题相似，也有相对路径和绝对路径。通过urlpatterns来设置的功能和base标签的功能类似</p>
<h3 id="响应重定向路径问题"><a href="#响应重定向路径问题" class="headerlink" title="响应重定向路径问题"></a>响应重定向路径问题</h3><p>相对路径：相对于urlpatterns定义的路径</p>
<p>绝对路径：以项目的部署路径为基准路径 webapps</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210331212048031.png" alt="image-20210331212048031"></p>
<p>可以通过contextpath获取项目部署名，这样以后改了也没事</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210331212421337.png" alt="image-20210331212421337"></p>
<h3 id="会话概念引入"><a href="#会话概念引入" class="headerlink" title="会话概念引入"></a>会话概念引入</h3><p>枯燥的前面部分终于告一段落了，cookie和seesion即将闪亮登场！（我滴妈，终于肝到这儿了….）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210331214347688.png" alt="image-20210331214347688"></p>
<h3 id="Cookie和Session的引入"><a href="#Cookie和Session的引入" class="headerlink" title="Cookie和Session的引入"></a>Cookie和Session的引入</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210401103850680.png" alt="image-20210401103850680"></p>
<p>每一次浏览器（客户端）向服务端发送一个请求之后，服务端都会创建一个对应的HTTPSession对象（账户），并生成一个JSESSIONID数据（卡号），响应回一个Cookie，里面包含了JSESSIONID。下一次浏览器向服务端发送请求时就会默认携带上一次返回的Cooike。</p>
<p>注意：用户端在向服务A发送请求时，携带的是服务A返回的Cookie，服务B的Cookie并不会被携带，对应不同的服务端携带不同的Cookie</p>
<h3 id="响应Cookie"><a href="#响应Cookie" class="headerlink" title="响应Cookie"></a>响应Cookie</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/servlet1.do"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//通过响应对象，向浏览器响应一些Cookie</span>
        <span class="token comment">//Cookie的构造方法中传入两个参数，一个是键，一个是值，组成一个键值对</span>

        <span class="token class-name">Cookie</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cookie</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//我们现在想要通过服务器给浏览器响应数据，只需要把cookie放入resp响应对象中即可</span>
        c2<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置Cookie在浏览器中保存的时间，以秒为单位</span>
        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="读取Cookie"><a href="#读取Cookie" class="headerlink" title="读取Cookie"></a>读取Cookie</h3><p>就是在另外一个servlet中获取cookie，代码不放了。</p>
<h3 id="关于Cookie的跨域（了解）"><a href="#关于Cookie的跨域（了解）" class="headerlink" title="关于Cookie的跨域（了解）"></a>关于Cookie的跨域（了解）</h3><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210401182130769.png" alt="image-20210401182130769" style="zoom:200%;" />





<h3 id="小案例开发——Cookie记录访问次数"><a href="#小案例开发——Cookie记录访问次数" class="headerlink" title="小案例开发——Cookie记录访问次数"></a>小案例开发——Cookie记录访问次数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>mozartto<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Cookie</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/servlet2.do"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//如果是第一次访问当前Servlet，向浏览器响应一个Cookie（"servlet2", "1")</span>
        <span class="token comment">//如果是多次访问，就在次数上+1</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">String</span> cookieName <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>cookieName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"servlet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token comment">//创建cookie，次数+1</span>
                    <span class="token class-name">Integer</span> value <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"servlet2"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//创建完cookie之后，再把cookie放入到响应对象中即可</span>
                    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎您第"</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"次访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//说明访问过</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果flag为false</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎您第一次访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"servlet2"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//将第一次访问生成的cookie放入resp响应对象中</span>
            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h3 id="HttpSeesion的使用"><a href="#HttpSeesion的使用" class="headerlink" title="HttpSeesion的使用"></a>HttpSeesion的使用</h3><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210401212357795.png" alt="image-20210401212357795" style="zoom:80%;" />



<p>可以设置session的存活时间</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210401212432464.png" alt="image-20210401212432464"></p>
<p>servlet1：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210401212059880.png" alt="image-20210401212059880"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210401212213670.png" alt="image-20210401212213670"></p>
<p>servlet2：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210401212303263.png" alt="image-20210401212303263"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210401213114973.png" alt="image-20210401213114973"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210401213143474.png" alt="image-20210401213143474"></p>
<p>结束会话后session会被销毁。比如关闭浏览器后再访问浏览器不会发送JSESSIONID，是发送一个请求，然后服务端创建新的JSESSIONID响应给浏览器。</p>
<p>还可以设置session的销毁时间，比如一分钟浏览器没有被操作那么则session销毁</p>
<h3 id="单次绘画登录页面案例"><a href="#单次绘画登录页面案例" class="headerlink" title="单次绘画登录页面案例"></a>单次绘画登录页面案例</h3><p>代码之后复习servlet时再放</p>
<h3 id="域对象概念的引入"><a href="#域对象概念的引入" class="headerlink" title="域对象概念的引入"></a>域对象概念的引入</h3><p>什么是域对象？</p>
<p>能够存储数据，获取数据，传递数据数据的对象</p>
<p>Servlet三大域对象：</p>
<p>Request域——HTTPServletRequest对象     范围：一次请求、请求转发</p>
<p>Session域——HTTPSession对象                    范围：一次会话（跨请求）</p>
<p>Application域——ServletContext对象          范围：任意一次请求和会话（跨会话）</p>
<p>setAttribute(name, value); 设置修改数据</p>
<p>getAttribute(name); 获得数据的方法</p>
<p>removeAttribute(name); 移除数据的方法</p>
<p>JSP四大域对象：Page域、Request域、Session域、Application域</p>
<h3 id="Request域"><a href="#Request域" class="headerlink" title="Request域"></a>Request域</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210402195801313.png" alt="image-20210402195801313"></p>
<p>servlet1中的数据请求转发到servlet2，servlet的request中原有的数据不是request域的数据，servlet1的request对象中原有的数据会跟随请求转发直接发送到servlet2的request对象中。而request域中的数据是我们添加或者修改的数据，就是我们可以直接对servlet1中request域中的数据进行修改，具体操作如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210402195717104.png" alt="image-20210402195717104"></p>
<p>获得request域中的数据用getAttribute，获得request对象中原有的数据（客户端传来的）用getParameter方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210402195717104.png" alt="image-20210402195649548"></p>
<p>域对象中修改或添加的数据也会随请求转发一起被发送</p>
<p>使用响应重定向传递数据</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"readFromRequest.do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>会发现servlet2中所有输出的request域中的数据都变成了null</p>
<p>因为响应重定向是servlet1告诉浏览器你自己去找servlet2吧，这样的话浏览器自己去访问servlet2，会产生一个新的request对象，而新的request对象不是servlet1中的request对象。</p>
<h3 id="Session域传递数据"><a href="#Session域传递数据" class="headerlink" title="Session域传递数据"></a>Session域传递数据</h3><p>session域传递数据使用响应重定向可以传递数据，因为session域传递数据是可以跨请求的，所以不论是请求转发还是响应重定向都可以传递数据。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210402202809576.png" alt="image-20210402202809576"></p>
<p>从servlet1传递数据到servlet2中，范围是session域</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210402202956474.png" alt="image-20210402202956474"></p>
<p>注意此时在sevlet2中就不能再用request对象操作数据了，而要先获取servlet2的session对象，然后用session对象来操作数据。此时请求中的数据就不能再处理了，比如最后两行的对req的操作。</p>
<p>此时你启动tomcat，在浏览器中访问read From Session.do,可以看到servlet1通过session域传递到servlet2中的数据，但是如果此时你关闭浏览器再重启或者清空浏览器的cookie就会发现原来的数据session域中的数据访问不了了，因为session域中的数据访问范围在是一次会话之内。</p>
<p>session对象存活的时间比request对象长，request对象在一次请求完成之后就被回收了，但是HttpSession存活的就比较久，第一次请求过来的时候它被创建了，第二次请求的时候可能还是这个session，第三次可能还是它（只要你不关闭浏览器或手动清除cookie（结束会话）），session就会存在</p>
<h3 id="Application域传递数据"><a href="#Application域传递数据" class="headerlink" title="Application域传递数据"></a>Application域传递数据</h3><p>跨会话传递数据，即可以跨session传递数据，把getsession换成getServletContext即可</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210402204347797.png" alt="image-20210402204347797"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210402204520491.png" alt="image-20210402204520491"></p>
<p>application域中的数据在服务器重启后会被回收，一般不要往application中放具体某个用户的数据，只放整个项目的配置数据。application域是我们在实际开发中要尽量少操作的域，因为它生命周期太长了，容易造成冗余或用户之间产生干扰。</p>
<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>老技术，但是是MVC架构的基础，所以还是得学学。</p>
<h3 id="Servlet作为页面动态资源的弊端"><a href="#Servlet作为页面动态资源的弊端" class="headerlink" title="Servlet作为页面动态资源的弊端"></a>Servlet作为页面动态资源的弊端</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210402211155898.png" alt="image-20210402211155898"></p>
<p>总结：servlet作为动态资源会使得页面资源的操作非常繁琐，非常不利于页面的更新和维护，所以servlet不可以做为页面资源。servlet一般专门用于接收用户端数据，向用户端响应数据，控制前后端页面跳转，交互逻辑等，在MVC模式下作为控制层使用。</p>
<h3 id="JSP中插入Java代码的语法"><a href="#JSP中插入Java代码的语法" class="headerlink" title="JSP中插入Java代码的语法"></a>JSP中插入Java代码的语法</h3><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%
JAVA代码
%&gt;

&lt;%--
注释
--%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将变量或值打印到页面上：&lt;%=变量值%&gt;</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210405212524661.png" alt="image-20210405212524661"></p>
<h3 id="JSP的原理"><a href="#JSP的原理" class="headerlink" title="JSP的原理"></a>JSP的原理</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210405213246415.png" alt="image-20210405213246415"></p>
<p>大致了解即可。毕竟JSP，运行原理大致了解即可。</p>
<h3 id="JSP的执行过程"><a href="#JSP的执行过程" class="headerlink" title="JSP的执行过程"></a>JSP的执行过程</h3><p>略</p>
<h3 id="JSP继承结构"><a href="#JSP继承结构" class="headerlink" title="JSP继承结构"></a>JSP继承结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210405215043022.png" alt="image-20210405215043022"></p>
<p>我们需要重写的就是service方法，JSP和servlet及其类似</p>
<h3 id="JSP剩余重要知识点合集"><a href="#JSP剩余重要知识点合集" class="headerlink" title="JSP剩余重要知识点合集"></a>JSP剩余重要知识点合集</h3><p>由于多方面考虑，现对JSP进行简化了解即可。</p>
<ol>
<li><p>EL表达式：使用 ＄{参数名} ——即可输出参数，使用EL表达式可以很方便地引用一些JavaBean以及其属性，不会抛出NullPointerException之类的错误。</p>
</li>
<li><p>JSTL表达式</p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/picturesimage-20210406110246531.png" alt="image-20210406110246531"></p>
</li>
</ol>
<p>c是cycle的意思，意思就是循环。</p>
<p><strong>记住：JSP我们只需要了解即可，不需要深入去学习每个知识点，因为在现实开发中很可能用不上。</strong></p>
<h3 id="MVC模式概念引入"><a href="#MVC模式概念引入" class="headerlink" title="MVC模式概念引入"></a>MVC模式概念引入</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413095521254.png" alt="image-20210413095521254"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413095723644.png" alt="image-20210413095723644"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413100157707.png" alt="image-20210413100157707"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413102334916.png" alt="image-20210413102334916"></p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>Trie前缀树、桶排序、排序总结</title>
    <url>/2019/12/23/trie%E3%80%81%E6%A1%B6%E6%8E%92%E5%BA%8F%E3%80%81%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Trie前缀树、桶排序、排序总结"><a href="#Trie前缀树、桶排序、排序总结" class="headerlink" title="Trie前缀树、桶排序、排序总结"></a>Trie前缀树、桶排序、排序总结</h2><h3 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h3><ol>
<li>单个字符串中，字符从前到后的加到一颗多叉树上</li>
<li>字符放在路上，节点上有专属的数据项</li>
<li>所有样本都这样添加，如果没有路就新建，如果有路就复用，</li>
<li>沿途节点的pass值增加1，每个字符串结束时来到的结点end值增加1</li>
</ol>
<p>可以完成前缀相关的查询</p>
<p>前缀树的建立过程：<span id="more"></span></p>
<ol>
<li>有一个pass值代表经过此结点的路径的数量</li>
<li>有一个end值代表以此结点为结尾的字符串数量</li>
</ol>
<h3 id="如何查询一个字符串在前缀树中加入了多少次？"><a href="#如何查询一个字符串在前缀树中加入了多少次？" class="headerlink" title="如何查询一个字符串在前缀树中加入了多少次？"></a>如何查询一个字符串在前缀树中加入了多少次？</h3><p>先沿着所给字符串把前缀树走一遍，如果可以走到end结点，直接查询此结点的的end值即为此字符串加入的次数</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/MozarttoMozarttoimage-20201204100118143.png" alt="image-20201204100118143" style="zoom:30%;" />

<h3 id="如何查询一字符被当作了多少次前缀？"><a href="#如何查询一字符被当作了多少次前缀？" class="headerlink" title="如何查询一字符被当作了多少次前缀？"></a>如何查询一字符被当作了多少次前缀？</h3><p>直接查看这个字符的p值即可</p>
<p>下面来看一下前缀树的代码：(第一种实现方式)</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node1</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> pass<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node1</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Node1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        nexts <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//最多只有26个字母，26条路</span>
        <span class="token comment">//数组中0下标对应的是到a的路，1下标对应的是到b的路，2下标对应的是到c的路...25下标对应的是到z的路</span>
        <span class="token comment">//if(next[i] == null) i方向上的路不存在，否则存在</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Trie1</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token class-name">Node1</span> root<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Trie1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>word <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一步：先把它转换成一个字符类型的数组</span>
            <span class="token comment">//然后，你只要添加一个字符串都是从头结点开始添加的</span>
            <span class="token comment">//所以我准备一个引用，这个引用是从头结点开始的</span>
            <span class="token class-name">Node1</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>pass<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//头结点下面准备加入字符串，所以头结点的pass值可以先++</span>
            <span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">//下面这个for循环可厉害了</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                path <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token comment">//用对应加入的字符的ASCII码减去a的ASCII码，这样a的path就是0，b的		path是1，c的path是2...以此类推，对应成走哪条路</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在这个方向上建出一个新结点来</span>
                    <span class="token comment">//nexts数组中的数据类型是Node1结点型的(有点像链表)</span>
                <span class="token punctuation">&#125;</span>
                node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span>pass<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">//建完这个结点之后，node跳到这个结点上来，并且来到它之后把它的path值++</span>
            <span class="token punctuation">&#125;</span>
            node<span class="token punctuation">.</span>end<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    
    <span class="token comment">//查询一个字符串之前加入了多少次</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>word <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接把字符串转换成字符类型的数组	</span>
        <span class="token class-name">Node1</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//这几步和创建数组的时候都一样，区别就是在查找的时候不要让它的p值和e值++</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            index <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//</span>
            <span class="token punctuation">&#125;</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>  <span class="token comment">//注意，这里并不会直接跳到数组中接下来的下一个字母，而是根据index的值跳到当前所在的单词的下一个字母</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>end<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//所有加入的字符串中，有几个是以pre这个字符串作为前缀的</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">prefixNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Node1</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            index <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>pass<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//删除字符串操作(整体思路：删除的时候，沿途p--，到最后一个字符的时候e--)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Node1</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>pass<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                path <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>node<span class="token punctuation">.</span>next<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">.</span>pass <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    node<span class="token punctuation">.</span>next<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            node<span class="token punctuation">.</span>end<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一种实现方式只有字符串是26个字母小写才行，如果字符种类变得特别多呢？</p>
<h3 id="前缀树第二种实现方式："><a href="#前缀树第二种实现方式：" class="headerlink" title="前缀树第二种实现方式："></a>前缀树第二种实现方式：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//当你的字符种类很多的时候，用哈希表的形式来表示</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node2</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> pass<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node2</span><span class="token punctuation">></span></span> nexts<span class="token punctuation">;</span>
    <span class="token comment">//第一个Integer值代表此结点的对应的path值(a=0,b=1...z=25)</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Node2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Trie2</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token class-name">Node2</span> root<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Trie2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>word <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Node2</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>pass<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//剩下的和上面的一模一样</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token comment">//本结的代码中有code1和code2，其中code1有一点问题。下来自己用对数器跑一下看一下code1哪里出了问题。是一个非常好的可以练习使用对数器的例子(对数器自己写)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="不基于比较的排序"><a href="#不基于比较的排序" class="headerlink" title="不基于比较的排序"></a>不基于比较的排序</h3><ol>
<li>桶排序</li>
</ol>
<p><strong>题目1：一个数组中存放着员工的年龄，员工的年龄在0-200之间不等，请设计一个排序将数组排序</strong></p>
<p>如何将排序快一点做完？——对每一个年龄做词频统计。整体思路是这样，建立一个help数组，里面存放201个数，下标分别对应0-200。每个下标位置代表员工的年龄，下标中存储的数代表员工年龄的词频数。</p>
<p>这是一个时间复杂度为O(N)的排序，叫做计数排序（从数组下标0开始往后遍历一遍）。这种排序与我们之前讲过的排序有区别，它是完全不基于比较的，这种不基于比较的排序就叫做桶排序。记数排序就是桶排序的一种体现。这题相当于你建了两百个桶，桶就是容器的意思，可以是一个队列、一个栈…这里的桶就是我们的词频。但是这个排序是有极大的弱点的，它必须和它的数据的状况强相关，比如这题范围是0-200，那就有201个桶。范围小的时候计数排序才有用。所有桶排序思想下的排序都对数据状况本身有要求。</p>
<h3 id="桶排序的第二种具体实现：基数排序"><a href="#桶排序的第二种具体实现：基数排序" class="headerlink" title="桶排序的第二种具体实现：基数排序"></a>桶排序的第二种具体实现：基数排序</h3><p>通常来讲经典的基数排序中的数都是非负的十进制数。</p>
<p>数组中有多少个数就建立多少个桶，桶的形式是队列。先把各个数的个位入队，然后从0队依次出队，一直到9队出完。然后十位数字入队，从0到9依次出队，最后百位数入队，从0到9依次出队。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201204204720839.png" alt="image-20201204204720839" style="zoom:50%;" />

<p><strong>注意：你在刷题或面试的过程中，除非特殊声明，否则使用的排序都必须是基于比较的排序</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201204205339741.png" alt="image-20201204205339741" style="zoom:67%;" />

<p>计数排序的代码（上图），太简单了，懒得敲。</p>
<p>基数排序代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">maxbits</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这是一个另一个方法，重载方法</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//maxbits是用来算digit的，最大的数有多少位。先把最大数找到，每一次除以10，然后位数++</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxbits</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token operator">++</span><span class="token punctuation">;</span>
        max <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//arr[L...R]排序，digit</span>
<span class="token comment">//digit代表的数是数组中最大的数有多少位</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//以10为基底</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;=</span>digit<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//有多少位就进出多少次</span>
        <span class="token comment">//10个空间</span>
        <span class="token comment">//count[0]当前位(d位)是0的数字有多少个</span>
        <span class="token comment">//count[1]当前位(d位)是0和1的数字有多少个</span>
        <span class="token comment">//count[2]当前位(d位)是0、1和2的数字有多少个</span>
        <span class="token comment">//count[i]当前位(d位)是0-i的数字有多少个</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//count[0..9]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//103  1  3</span>
            <span class="token comment">//209  2  0</span>
            j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获得arr[i]中的第d位数</span>
            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> count<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//然后count在自己上面做累加和，然后count变成count'</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token class-name">L</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//找到当前数组中数字的第d位数是多少，赋给j</span>
            help<span class="token punctuation">[</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//找到了那个数的某一位之后在count中取出来，对应地找到原来的整数，										并放入help中（count中下标是i，放入help数组中下标就是i-1） </span>
            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                 <span class="token comment">//不要忘了词频减减</span>
            <span class="token comment">//这个循环结束时候help里面装的就是我们从桶中倒出来的东西</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//然后把help里面的东西拷贝回arr里面</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//然后最上面d++，d=2继续，d=3继续...一直到最大位digit</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//这个实现可以说是非常6了，如果你实在懒得想，搞十个队列来写也不是不可以，但越简单越好</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>help数组的代码实现，下面是一个图解：(for循环中的内容)</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205094752811.png" alt="image-20201205094752811" style="zoom:50%;" />

<ol>
<li>桶排序思想下的排序：计数排序&amp;基数排序</li>
<li>时间复杂度为O(N)，额外空间负载度O(M)</li>
<li>应用范围有限，需要样本的数据状况满足桶的划分</li>
</ol>
<p>计数排序和基数排序</p>
<ol>
<li>一般来讲，计数排序要求，样本是整数，且范围比较窄</li>
<li>一般来讲，基数排序要求，样本是10进制的整数</li>
<li>一旦要求稍有升级，改写代价增加是显而易见的</li>
</ol>
<h3 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h3><ol>
<li>稳定性是指同样大小的样本再排序之后不会改变相对次序</li>
<li>对基础类型来讲说，稳定性毫无意义</li>
<li>对非基础类型来说，稳定性有重要意义</li>
<li>有些排序算法可以实现为稳定的，而有些排序算法无论如何都实现不成稳定的</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205103811591.png" alt="image-20201205103811591" style="zoom:50%;" />

<p>因为基础类型按值传递，所以稳定性没啥用，它的用处是按引用传递的那些内容</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205104432428.png" alt="image-20201205104432428" style="zoom:50%;" />

<p>比如现在你要对学生这个类型进行排序，先按照班级进行排序，班级排序完了之后按照年龄进行排序。如果你的排序是稳定型排序，那么你的年龄排序结构排序完的结果将会是一班年龄从小到大，二班年龄从小到大…这个是可以用比较器来写主条件和次条件，但如果有7个属性，每个属性都要保证稳定，你怎么写？</p>
<p>下面我们来分析一下之前学过的排序哪些是稳定的。分析稳定性一定是建立在你对流程巨熟悉的基础上。如果你觉得你有一点点困惑，一定要看一下前几个排序（八大排序目前所有文章加起来刚好写完）。</p>
<ol>
<li>选择排序有没有稳定性？没有。</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205105652996.png" alt="image-20201205105652996" style="zoom:33%;" />

<p>0~n-1之间要把最小的数放到0位置去，第一个5跑到1那个位置去了，相对位置变化，不稳定</p>
<ol start="2">
<li>冒泡排序有没有稳定性？有。你处理相等元素时的态度，就决定了排序的稳定性能不能实现。冒泡排序相等的时候元素不交换，保留了其稳定性</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205105855579.png" alt="image-20201205105855579" style="zoom:33%;" />

<p>冒泡排序：从第一个元素开始和后面的元素进行比较，谁大谁往后走，相等时不交换。这个特性决定了冒泡排序是稳定的排序</p>
<ol start="3">
<li>插入排序是否稳定？稳定。元素相等时不交换</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205110201337.png" alt="image-20201205110201337" style="zoom: 50%;" />

<p>三个经典的n^2排序我们就处理完了，接下来我们看归并排序。</p>
<ol start="4">
<li>归并排序处理相等元素时的态度，如果元素相等时先拷贝左组元素，则稳定。但如果你要具体修改merge中的功能，先拷贝右边的，排序的功能不会被破坏，但是稳定性会受到破坏。总而言之就是相等时先拷贝右边的，稳定性就会被破坏</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205110429324.png" alt="image-20201205110429324" style="zoom:33%;" />

<ol start="5">
<li>快速排序。稳定不了。三个版本都稳定不了，因为partition过程就是做不了稳定的</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205110749121.png" alt="image-20201205110749121" style="zoom:33%;" />

<p>上图中画圈的6原来是在3的位置，3和6交换后小于等于区域++，做不到稳定。</p>
<ol start="6">
<li>堆排序。不稳定。因为人家根本不管你稳定不稳定，它只管自己的堆结构有没有调好。</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205111124730.png" alt="image-20201205111124730" style="zoom:33%;" />

<p>上图中4本来是在数组最后，往上看和它的父结点3交换了（将此数组变成一个大根堆的过程）</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205111649349.png" alt="image-20201205111649349" style="zoom: 67%;" />

<p>选择排序最差，时间复杂度都O(N^2)了还做不到稳定，太拉给了。</p>
<p>归并要准备额外空间做merge。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205113904173.png" alt="image-20201205113904173" style="zoom:67%;" />

<h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p><strong>下面，私货，常见的坑。你们学习的时候如果遇到下面的坑，至少每一个都坑你一个星期</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205111938063.png" alt="image-20201205111938063" style="zoom: 50%;" />

<ol>
<li>归并排序搞成O(1)，舍弃稳定性，直接用堆排啊大哥，有必要搞这么复杂吗？你要真的去了解归并排序内部缓存法，至少一个星期</li>
<li>原地归并排序让空间复杂度变成O(1)，时间复杂度变成O(N^2)，求你去写插排，插排常数项又低，时间复杂度也是O (N^2)</li>
<li>快速排序更改稳定性，但是它要求你对数据范围做限制…你tm在逗我吧？快排就是基于比较的排序，如果你要求我对数据状况做出限制，我为什么不用桶排序呢？</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205112517342.png" alt="image-20201205112517342" style="zoom: 50%;" />

<p>它是一个01标准的partition，不是小于就是大于。奇偶也是01标准，那我们快排经典的partition过程是做不到稳定性的，如果你这个能做到稳定，那为什么快排不改成稳定的呢？如果你对面试官问这个问题，面试官马上疯给你看。因为他就是在故意难为你，他根本就不会。这种题就是故意出来给你压价压薪水的，这种见一次怼一次，有机会的话，干他。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205113046063.png" alt="image-20201205113046063" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205113634722.png" alt="image-20201205113634722" style="zoom: 50%;" />

<p>快排和堆排是调度优秀，但是常数时间不够好，但插入排序常数时间很优秀。于是，小样本量时，快排直接终止调度，对剩下那一小部分进行插入排序后直接返回。</p>
<p>这些都是经常遇到的优化。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2020/06/30/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><span id="more"></span>

<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20200528194509790.png" alt="image-20200528194509790"></p>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>计算机网络是指将<strong>地理位置不同</strong>的具有独立功能的<strong>多台计算机及其外部设备，通过通信线路连接起来</strong>，在网络操作系统，网络管理软件及<strong>网络通信协议</strong>的管理和协调下，实现<strong>资源共享</strong>和信息传递的计算机系统。  </p>
<h3 id="网络编程的目的"><a href="#网络编程的目的" class="headerlink" title="网络编程的目的"></a>网络编程的目的</h3><p>无线电台，传播交流信息。数据交换，通信  </p>
<h3 id="想要达到这个效果需要什么"><a href="#想要达到这个效果需要什么" class="headerlink" title="想要达到这个效果需要什么"></a>想要达到这个效果需要什么</h3><ol>
<li>如何准确地定位网络上的一台主机，唯一的IP地址，端口，定位到这个计算机上的某个资源</li>
<li>找到了这个主机，如何传输数据</li>
</ol>
<p>JavaWeb  网页编程  B/S架构</p>
<p>网络编程   TCP/IP    C/S架构</p>
<h3 id="网络通信的两个要素"><a href="#网络通信的两个要素" class="headerlink" title="网络通信的两个要素"></a>网络通信的两个要素</h3><p>使用ip+端口号就能定位到某一台电脑上的某一个应用</p>
<ul>
<li>ip </li>
<li>端口号</li>
<li>192.168.16.124 ：5900 （套接字）</li>
</ul>
<p>规则：网络通信的协议</p>
<p>http，ftp，smtp，tcp，udp</p>
<p>TCP/IP参考模型</p>
<p><img src="https://img-blog.csdnimg.cn/20190105164025264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTIzNjIy,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>这里的重点是针对TCP和UDP进行编程</p>
<p>小结：</p>
<ol>
<li>网络编程中有两个主要的问题<ul>
<li>如何准确地定位到网络上的一台或者多台主机</li>
<li>找到主机之后如何进行通信</li>
</ul>
</li>
<li>网络编程中的要素<ul>
<li>IP和端口号</li>
<li>网络通信协议</li>
</ul>
</li>
<li></li>
</ol>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>IP地址： InetAddress</p>
<ul>
<li><p>唯一定位一台计算机</p>
</li>
<li><p>127.0.0.1 : 代表本机</p>
</li>
<li><p>IP地址的分类</p>
<ol>
<li><p>IP地址分类 ipv4 / ipv6</p>
<p>ipv4：127.0.0.1，有四个字节组成，（1字节的范围是0-255（8位，2^8），大概有42亿个,255的四次方。对于地球来说不够用）在2011年就用尽了</p>
<p>ipv6：dos命令：ipconfig，查看本机ip.128位，八个无符号十六进制整数</p>
<h3 id="ipv6的写法："><a href="#ipv6的写法：" class="headerlink" title="ipv6的写法："></a>ipv6的写法：</h3><p>例如这样一个<a href="https://www.baidu.com/s?wd=ipv6&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">ipv6</a>地址<br>2001 : 0db8 : 85a3 : 0000 : 1319 : 8a2e : 0370 : 7344<br>一共八组，每组4个数字，一共32个数，每个数字都是<a href="https://www.baidu.com/s?wd=%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">十六进制数</a>，一个<a href="https://www.baidu.com/s?wd=%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">十六进制数</a>可以写成4个二进版制数（就是<a href="https://www.baidu.com/s?wd=%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">十六进制数</a>转成二进制数）<br>可以理解为有多少位就是多少个二进制数<br>所以，32×4=128位  </p>
</li>
</ol>
<ol start="2">
<li>公网（互联网）/ 私网（局域网）分类<ul>
<li>192.168.xx.xx开头一般都是局域网，专门给组织内部使用</li>
<li>ABCD IP地址分类</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>常用的一个类：InetAddress</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">UnknownHostException</span><span class="token punctuation">;</span>

<span class="token comment">//测试IP</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInetAddress</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//查询本机地址</span>
            <span class="token class-name">InetAddress</span> inetAddress1 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//InetAddress这个类没有构造器，可以通过类名的getByName或地址方法返回它的对象</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress1<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">InetAddress</span> inetAddress3 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress3<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">InetAddress</span> inetAddress4 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress4<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//查询百度的ip地址</span>
            <span class="token class-name">InetAddress</span> inetAddress2 <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//常用方法</span>
            <span class="token comment">//System.out.println(inetAddress2.getAddress());   不用记</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">.</span><span class="token function">getCanonicalHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获得规范的名字（ip）</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获得ip</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//获得机主名/域名（网址）</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//未知的主机异常</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-4端口"><a href="#1-4端口" class="headerlink" title="1.4端口"></a>1.4端口</h3><p>端口表示计算机上的一个程序的进程；</p>
<ul>
<li><p>不同的进程有不同的端口号，所以端口号是不能冲突的。端口用来区分软件。</p>
</li>
<li><p>端口号被规定为0-65535</p>
</li>
<li><p>端口分为TCP端口和UDP端口，每一种都有65535上限，单个协议下面，端口号不能冲突（同一台计算机上不能有两个相同的端口号）</p>
</li>
<li><p>端口分类</p>
<ul>
<li>公有端口 0-1023</li>
<li>HTTP：80</li>
<li>HTTPS：43（更安全的协议）</li>
<li>FTP:21</li>
<li>TELENT(远程监听窗口)：23</li>
</ul>
</li>
<li><p>程序注册端口：1024-49151（这些端口一般是分配给用户或者程序的）</p>
<ul>
<li>Tomcat：端口号8080</li>
<li>MySQL：3306</li>
<li>Oracle：1521</li>
</ul>
<p>端口号不用强行记忆，用多了就会了</p>
<ul>
<li>动态、私有端口：49152-65535</li>
<li>常用的DOS命令</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -ano ：<span class="token comment">#查看所有的端口</span>
<span class="token function">netstat</span> -ano findstr <span class="token string">"5900"</span> <span class="token comment">#查看所有5900端口的进程</span>
tasklist findstr <span class="token string">"8696"</span> <span class="token comment">#查看指定端口的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>一般端口和ip地址是连起来写的，格式为 ip地址：端口</p>
<p>比如：192.168.1.1 : 65536</p>
<p>CTRL + shift + ESC = 打开任务管理器</p>
<p> <img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20200529203707467.png" alt="image-20200529203707467"></p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span>

<span class="token comment">//Socket:套接字（管道）,这个可以new</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInetSocketAddress</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">InetSocketAddress</span> socketAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//第一个参数传ip，第二个参数传端口号</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InetSocketAddress</span> socketAddress2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socketAddress2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">InetAddress</span> address <span class="token operator">=</span> socketAddress<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回地址</span>
        <span class="token comment">//这个方法返回的是一个InetAddress对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socketAddress<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回机主名和地址</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socketAddress<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回端口</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5通信协议"><a href="#1-5通信协议" class="headerlink" title="1.5通信协议"></a>1.5通信协议</h3><p>协议：约定，就好比我们现在说的是普通话</p>
<p>网络通信协议：针对网络产生的协议，比如，速率，传输码率，代码结构，传输控制……</p>
<p>问题非常的复杂，是通信工程专业学的</p>
<p>大事化小：分层</p>
<p><strong>TCP / IP 协议簇</strong>：实际上是一组协议</p>
<ul>
<li>TCP：用户传输协议 （要接电话）</li>
<li>UDP：用户数据报协议 （给你发短信）</li>
</ul>
<p>出名的协议：</p>
<ul>
<li>TCP</li>
<li>IP：网络互连协议</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20200529204345790.png" alt="image-20200529204345790"></p>
<p><strong>TCP和UDP的对比</strong></p>
<p>TCP：打电话</p>
<ul>
<li><p>连接，稳定</p>
</li>
<li><p>三次握手，四次挥手</p>
<ul>
<li>```<br>连接：<br>A：你瞅啥？<br>B：瞅你咋地？<br>A：干一场！断开：<br>A:我要断开了<br>B：我知道了<br>B:你已经断开了吗<br>A：已经断开了<pre class="line-numbers language-none"><code class="language-none">

最少需要三次才能建立连接



* 客户端，服务端

* 传输完成，会释放连接，效率低

UDP:发短信

* 不连接，不稳定
* 客户端，服务端：没有明确的界限
* 不管有没有准备好，都可以发给你
* 导弹
* DDOS：洪水攻击，会造成端口堵塞。饱和攻击



### 1.6TCP

TCP需要一边发送一遍接受，所以需要一个客户端，一个服务器

客户端

1. 通过Socket连接服务器
2. 发送消息

服务器

1. 建立服务端口ServerSocket
2. 等待用户连接。通过accept监听
3. 接受用户的消息

客户端：

&#96;&#96;&#96;java
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

&#x2F;&#x2F;客户端
public class TCPClientDemo01 &#123;
    public static void main(String[] args) &#123;
        Socket socket &#x3D; null;
        OutputStream os &#x3D; null;
        &#x2F;&#x2F;1.客户端要连接服务器，要知道服务器的地址
        try &#123;
            &#x2F;&#x2F;这个是获取本机的地址
            InetAddress serverIP &#x3D; InetAddress.getByName(&quot;127.0.0.1&quot;);
            &#x2F;&#x2F;2.端口号
            int port &#x3D; 54532;
            &#x2F;&#x2F;创建一个Socket连接，客户端的创建连接类为Socket（一个插头）
            &#x2F;&#x2F;可以默认不传参，也有可以传IP和端口的方法，先IP后端口，方便建立链接
            socket &#x3D; new Socket(serverIP,port);
            &#x2F;&#x2F;3.连接建立完毕，发送消息 （IO流)
            &#x2F;&#x2F;socket要向外写东西，所以要用OutputStream
            os &#x3D; socket.getOutputStream();
            os.write(&quot;你好！&quot;.getBytes()); &#x2F;&#x2F;getBytes()让字符串变成字符数组

        &#125; catch (UnknownHostException e) &#123;
            e.printStackTrace();
        &#125; catch (IOException e) &#123;
            e.printStackTrace(); &#x2F;&#x2F;这里alt+Enter自动出来了这个，其实可以直接把上面那个catch里的异常
                                 &#x2F;&#x2F;提升一下作用域，换成IOException就可以捕获到了
                                 &#x2F;&#x2F;一个try可以有多个catch
        &#125; finally&#123;
            &#x2F;&#x2F;客户端也要关闭资源
            if(os !&#x3D; null) &#123;
                try &#123;
                    os.close();
                &#125; catch (IOException e) &#123;
                    e.printStackTrace();
                &#125; if (socket !&#x3D; null) &#123;
                    try &#123;
                        socket.close();
                    &#125; catch (IOException e) &#123;
                        e.printStackTrace();
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<p>服务端：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span>

<span class="token comment">//服务端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPServerDemo01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//1.服务器对应地来说要有一个地址，创建一个地址的对应方法为ServerSocket()</span>
        <span class="token comment">//Socket的意思是套接字（插头），整个Java的网络连接就像一个个的插头一样</span>
        <span class="token comment">//里面传的这个参数是端口号</span>
        <span class="token comment">//要捕获一个异常</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">54532</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//2.等待客户端连接过来，客户端有一个接收方法accept()返回一个Socket对象，此时这个Socket就是客户端的Socket</span>
            <span class="token comment">//在这上面加一个while(true,则可以不停地接收消息（一直accept监听）</span>
            socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//3.读取客户端的消息</span>
            is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这两个是同一个，那边传过来，这边读进来</span>
            <span class="token comment">//正常情况下请用管道流读取数据，不要用字符数组那个1024，那个low了，而且容易出错</span>
            <span class="token comment">//管道流</span>
            baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//缓冲区</span>
            <span class="token keyword">int</span> len<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//先开的后关</span>
                <span class="token comment">//先开后关的意思是有可能管道里面还有水，你得一节一节地关掉</span>
                <span class="token comment">//这四个东西都要放到finally里面，但是它们在try的代码块里面，放不进去，所以要把定义放在上面，提升作用域</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> <span class="token comment">//所有东西写完了需要关闭流，所以这些操作放到finally里面</span>
            <span class="token comment">//关闭资源</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>baos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>serverSocket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</br>

<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p> 服务器端：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPServerDemo02</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建服务</span>
        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10094</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//监听客户端的连接</span>
        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻塞式监听，会一直等待客户端连接，连接完监听结束</span>
        <span class="token comment">//3.获取输入流</span>
        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4.文件输出</span>
        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"receive.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//通知客户端我接收完毕了,通知的话需要进行输出</span>
        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我接收完毕了，你可以断开了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//关闭资源</span>
        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>客户端：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPClientDemo02</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1.创建一个Socket连接</span>
        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10094</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.创建一个输出流，写东西</span>
        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//文件首先要读取，先把文件变成一个流再把这个流输出去</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\xiaoqiyao\\OneDrive\\桌面\\算法.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//写出文件（写出文件用输出流来写）</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//通知服务器，我已经传输完了</span>
        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//我已经传输完了</span>


        <span class="token comment">//确定服务端接收完毕才能断开连接</span>

        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//String byte[]</span>
        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len02<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len02 <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer02<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer02<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len02<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//5.关闭资源</span>
        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>服务端  </p>
<ul>
<li>自定义S</li>
<li>通过Tomcat来定义服务器（别人写好的）S</li>
</ul>
<p>客户端</p>
<ul>
<li>自定义 C</li>
<li>浏览器 B  </li>
</ul>
<p>C/S模型（自定义），B/S模型（Tomcat模型）  </p>
<h3 id="1-7UDP"><a href="#1-7UDP" class="headerlink" title="1.7UDP"></a>1.7UDP</h3><p>发短信：不用连接，但是需要知道对方的地址</p>
<p>发送消息</p>
<hr>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token comment">//不需要连接服务器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPClientDemo01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1.建立一个Socket套接字</span>
        <span class="token class-name">DatagramSocket</span> datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.建个包</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"你好啊，服务器"</span><span class="token punctuation">;</span>

        <span class="token comment">//发送给谁（需要创建一个服务器地址）</span>
        <span class="token class-name">InetAddress</span> localhost <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span>

        <span class="token comment">//参数： 数据，数据的长度，要发送给谁</span>
        <span class="token class-name">DatagramPacket</span> datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>localhost<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.发送包</span>
        datagramSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.关闭资源</span>
        datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接收端</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPServerDemo01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//开放端口</span>
        <span class="token class-name">DatagramSocket</span> datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//接收数据包</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">DatagramPacket</span> datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buffer<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//接收数据包</span>
        datagramSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻塞接收 （一直保持接受状态，只要你活着就能收到包裹）</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//关闭连接</span>
        datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="循环发送消息"><a href="#循环发送消息" class="headerlink" title="循环发送消息"></a>循环发送消息</h3><p>发送方：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPSenderDemo01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">DatagramSocket</span> datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//准备数据：控制台读取System.in</span>

        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//循环发送</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> data <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dataBytes <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">DatagramPacket</span> datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>dataBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dataBytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            datagramSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>datagramPacket<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接收方：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPReceiverDemo01</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">DatagramSocket</span> datagramSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

            <span class="token comment">//这个接收到的datagramPacket需要一个地方去放它</span>
            <span class="token comment">//准备接收包裹</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//接收包裹的是一个容器</span>

            <span class="token class-name">DatagramPacket</span> datagramPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

            datagramSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>datagramPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//先receive在读取数据输出，接都没接收到怎么输出</span>

            <span class="token comment">//怎么读呢？跟前面一样直接输出就行</span>
            <span class="token comment">//但是我们要先做一个断开连接的判断,如果接收到bye则断开连接</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> datagramPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> receiveData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>receiveData<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>receiveData <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span>   <span class="token comment">//阻塞式接收包裹</span>

        datagramSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>在线咨询：两个人都可以是发送方，也可以是接收方</p>
<h3 id="咨询"><a href="#咨询" class="headerlink" title="咨询"></a>咨询</h3><p>(未完待续…先刷机器学习去了，刷完机器学习再更后端开发)</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>链表结构、栈、队列、递归行为、哈希表和有序表</title>
    <url>/2019/07/22/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E9%80%92%E5%BD%92%E8%A1%8C%E4%B8%BA%E3%80%81%E5%93%88%E5%B8%8C%E8%A1%A8%E5%92%8C%E6%9C%89%E5%BA%8F%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="链表结构、栈、队列、递归行为、哈希表和有序表"><a href="#链表结构、栈、队列、递归行为、哈希表和有序表" class="headerlink" title="链表结构、栈、队列、递归行为、哈希表和有序表"></a>链表结构、栈、队列、递归行为、哈希表和有序表</h2><p>因为大家都学过C，像反转链表这种水题其实不需要讲。但是由于考虑到部分读者可能没有学过Java的数据结构，所以先说一下Java中数据结构的定义，然后拿两道简单题来帮大家快速熟悉概念。</p>
<span id="more"></span>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Java中单链表的定义：</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//构造方法</span>
    	value <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//Java中双链表的定义：</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DoubleNode</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">DoubleNode</span> last<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">DoubleNode</span> next<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">DoubleNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        value <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>

<span class="token comment">//反转链表的函数：</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">reverseLinkedList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//反转链表的思路：</span>
<span class="token number">1.</span>先让next记一下head后面一个结点的环境<span class="token punctuation">;</span>
<span class="token number">2.</span>head后面的环境原来的指针指向前一个结点，前一个结点是谁，已经记好了，前一个结点就是pre<span class="token punctuation">,</span>也就是head原来所在的位置<span class="token punctuation">;</span>
<span class="token number">3.</span>反转完一个head和head<span class="token punctuation">.</span>next后，head往下跳，重复如此，直到head跳到最后一个结点执行完一遍流程，head为空<span class="token punctuation">;</span>
总结就是：先记录后面的环境，然后让他指向空，然后让空指向head，然后让head指向下一个（next<span class="token punctuation">,</span>记录了head<span class="token punctuation">.</span>next，此时head<span class="token punctuation">.</span>next已经指向head了，此时让head指向next即可）<span class="token punctuation">;</span>
分析后面的环节，pre就是head前面的那个节点。比如第二个环节，next记录第三个节点，第三个结点指向第一个结点（pre）<span class="token punctuation">,</span>pre又变成了<span class="token function">head</span><span class="token punctuation">(</span>第二个结点<span class="token punctuation">)</span><span class="token punctuation">,</span>此时第三个结点指向第二个结点，然后head <span class="token operator">=</span> next<span class="token punctuation">,</span>head变成第三个节点。head最后变成了最后一个结点指向的<span class="token keyword">null</span>，而此时返回的pre就是最后一个节点，也就是反转完的链表的头节点<span class="token punctuation">;</span>


<span class="token comment">//反转双向链表</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DoubleNode</span> <span class="token function">reverseDoubleList</span><span class="token punctuation">(</span><span class="token class-name">DoubleNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">DoubleNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">DoubleNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//跟单链表一样也有pre和next</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>last <span class="token operator">=</span> next<span class="token punctuation">;</span>   <span class="token comment">//和单链表相比只多了这一句 这么理解，跟刚才那个过程一样，刚才那个过程只有一个指针，所以只用调一条，而双向链表有两条指针，所以要调两条指针。</span>
        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3><p><strong>题目一：编写一个函数，用户传入一个链表和一个参数后，能够删除链表中所有数据域值为参数值的结点并返回</strong></p>
<ol>
<li>先循环判断用户传入的结点值是不是对应着头节点，如果是头则删除头节点</li>
<li>当传入参数的值不等于头节点值时break出来，此时head来到第一个不需要删除的位置，并保留下来，因为等会儿要返回的就是这和个head结点，此时再令一个current变量为head结点的副本，然后操作current结点（因为head结点要返回，所以不能再动了）。</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">removeValue</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">!=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>   <span class="token comment">//如果是头节点则都删除</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//此时head来到不需要被删除的位置，然后令cur = head，并对cur进行操作</span>
    <span class="token class-name">Node</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Java和C-在内存释放上的区别和可能存在的问题："><a href="#Java和C-在内存释放上的区别和可能存在的问题：" class="headerlink" title="Java和C++在内存释放上的区别和可能存在的问题："></a>Java和C++在内存释放上的区别和可能存在的问题：</h3><ol>
<li>Java的代码会产生内存泄漏</li>
<li>JVM虚拟机释放内存的根据是，这个变量是否能够通过生存着的引用去找到它。JVM会自动释放内存，但是C++就不行了，必须通过手动调用析构函数去释放</li>
</ol>
<h3 id="栈和队列的实际实现"><a href="#栈和队列的实际实现" class="headerlink" title="栈和队列的实际实现"></a>栈和队列的实际实现</h3><ol>
<li><p>双向链表实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先来看一个双向链表的结构：</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> last<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">T</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//如何用双向链表表示出一个队列出来呢？只需要收集两个引用，表示我收集到的所有数据的头指针和尾指针</span>
<span class="token comment">//我们现在要实现一个双向队列，可以从头部进，头部出；也可以从尾部进，尾部出。这样的话我们就需要提供四个方法给用户进行操作</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DoubleEndsQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> head<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> tail<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//头部加节点方法：</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFromHead</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先把传入的数据封装成一个结点</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       head <span class="token operator">=</span> cur<span class="token punctuation">;</span>
       tail <span class="token operator">=</span> cur<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
       cur<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>   <span class="token comment">//当前传入的结点的next指向原来的head</span>
       head<span class="token punctuation">.</span>last <span class="token operator">=</span> cur<span class="token punctuation">;</span>   <span class="token comment">//原来的head的last指针指向当前传入的结点</span>
       head <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token comment">//head变为当前传入的结点</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//尾部加节点的方法：</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFromBottom</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tail <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        head <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        cur<span class="token punctuation">.</span>last <span class="token operator">=</span> tail<span class="token punctuation">;</span>
        tail <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//从头部弹出结点（存在头部换头的操作，尾巴也一样）：</span>
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">popFromHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">//更换头结点为下一个结点</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">//把头节点断开</span>
        head<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//从尾部弹出结点同理</span>
<span class="token punctuation">&#125;</span>
	<span class="token comment">//用双向链表实现栈简直简简单单，我给用户从头部压入的时候让它从头部弹出。（只提供这两个方法即可）</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">DoubleEndsQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleEndsQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> push <span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        queue<span class="token punctuation">.</span><span class="token function">addFromHead</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">popFromHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//再来个判空方法就完整了</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><p>数组实现有动态数组实现，但是在面试中出现的时候往往是让你实现一个固定大小的。</p>
<p>很简单，只需要准备一个数组和一个整型变量index，数组中放入一个数，index+1，限制index值不能超过arr.length - 1即可，拿出来的时候先拿出arr[index-1]，然后index–</p>
</li>
</ol>
<p>那固定大小的队列呢？就没那么好实现了。但是用循环队列就可以，这种东西叫RingBuffer，就是环状使用内存的结构。</p>
<p>说起环状的队列，我就想起大一下看王道的那本数据结构考研复习指导书时看到的那种用法，我晕。添加两个变量它不香吗？注：实现环状队列曾经是Google的一面极高频率出现的第一题。下面直接上代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//成员变量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> pushi<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> pulli<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>
    
    <span class="token comment">//循环队列的构造方法</span>
    <span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>limit<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pushi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        pulli <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//加入元素操作</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throws</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列已满，不能再加了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        size <span class="token operator">++</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>pushi<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        pushi <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>pushi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//拿出元素操作</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throws</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列已空，无法取出"</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        size <span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ans <span class="token operator">=</span> arr<span class="token punctuation">[</span>pulli<span class="token punctuation">]</span><span class="token punctuation">;</span>
        pulli <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>pulli<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//来个判空（平时自己实现栈和队列的时候最好都加上一个判空方法</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//如果现在的下标是i，返回下一个位置</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> i <span class="token operator">&lt;</span> limit <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//多个变量让你的整个coding变得非常得轻，舒服</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>既然语言都有这些结构的api，为什么还要手撸代码练习？</strong></p>
<ol>
<li>算法问题无关语言</li>
<li>语言提供得api是有限的，当有新的功能api不提供的，就需要改写。你面对越具体的问题，系统提供的api可能就是不够用的</li>
<li>任何软件和工具底层都是最基本的算法和数据结构，这是绕不过去的。你在调用一个api的时候也要对它的底层非常熟悉，这样估算时间复杂度之类的才会熟练。</li>
</ol>
<p><strong>举个例子：什么时候需要你自己手动改写？——LRU算法(内存替换算法)</strong></p>
<p>（这个涉及到哈希表，这里暂时不展开讲，以后的文章中会提到）</p>
<h3 id="栈和队列的常见面试题"><a href="#栈和队列的常见面试题" class="headerlink" title="栈和队列的常见面试题"></a>栈和队列的常见面试题</h3><p><strong>1. 怎么用数组实现不超过固定大小的队列和栈？</strong></p>
<p>栈：正常使用   队列：环形队列</p>
<p><strong>2.实现一个特殊的栈，在基本功能的基础上，再实现一个返回栈中最小元素的功能</strong></p>
<ol>
<li>pop、push、getMin操作的时间复杂度都是O(1)</li>
<li>设计的栈类型可以使用现成的栈结构</li>
</ol>
<p>准备两个栈就够了，一个栈是经典的Data栈，一个栈叫Min栈</p>
<p>加元素的两个栈同时加，Data栈中所有元素正常加，min栈中：当前加入元素和目前栈顶元素谁小加谁，如果栈顶元素小，重复加入一个栈顶元素。所以两个栈是同步上升的，弹出的时候两个栈也一起弹，你在任何时候想getMin，就是min栈的栈顶。（Java api中获得栈顶的方法是peek()).</p>
<p>方法二：发现当前数比min栈的栈顶大，不压入；否则压入。弹出：数据栈栈顶和最小栈的栈顶元素相同时最小栈栈顶元素弹出，否则不弹出（数据栈栈顶元素一直弹出）一般情况下用第一种。</p>
<p><strong>3.如何只用栈结构实现队列结构  /  如何用队列结构实现栈结构</strong></p>
<p>注意：底层不能用双端队列，否则这事儿直接搞定了。只能用传统意义上标准的栈和队列。不过这个题目也比较简单，这里就不展开了。（提示：两个栈实现一个队列，两个队列实现一个栈，beside，这题的实现细节并不是特别简单，有很多需要注意的地方）</p>
<p>栈和队列其实用得很多。图的广度优先遍历是用队列来实现的，图的深度优先遍历是用栈来实现的。而且栈可以实现队列，队列也可以实现栈，相当于可以相互实现。</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>左神的递归讲得真的天下第一了。先来一个题目：使用递归的方式求一个数组中的最大值，我先上一波代码。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token comment">//L..mid    mid+1..R</span>
    <span class="token comment">//int mid = (L+R)/2</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*a*/</span>  <span class="token keyword">int</span> leftMax <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rightMax <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math<span class="token punctuation">.</span>Max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>写递归的时候最好跟着过程画一个脑图出来。递归的底层实现逻辑是什么呢？当我们调用一个函数的时候，会把这个函数的相关信息压入栈中，给一个数组[0,2,7,3]比如此时我压入f(0,3)，同时假如说我的代码执行到了a行处，那么系统会先销毁当前的执行现场(但当前信息被记录了下来），然后压入一个新的栈f(0,1)，记录当前信息，代码执行到a行处，压入f(0,0)，销毁当前执行现场，压入一个新的栈，此时L == R，然后此时返回leftMax = 0，继续往下执行进入rightMax，传入f(1,1)，返回rightMax = f(1) = 2，这个结束后销毁当前执行过程，返回给系统栈的栈顶。就这样递归下去。（其实递归画个图好理解些）有递归调用继续往栈里放，当前层执行完销毁并返回给新栈顶。（这个递归的脑图是一个二叉树）</p>
<p><strong>任何递归行为都可以改成非递归行为，递归本质上就是利用系统栈帮你做了一些事，你不用系统栈，自己来，就可以把递归改成迭代。伪递归就是某些语言发现你这是个递归，在底层上帮你优化了一下，帮你改成了迭代</strong></p>
<p>对于某一类递归行为，它的时间复杂度，是可以直接确定的：T(N) = aT(N/b) + O(N^d)，（a，b，d都是常数）</p>
<p>这一类的递归行为，指的是我<strong>子问题的规模是一致的</strong>，这个子问题调用了a次，除了子问题之外，剩下操作的复杂度叫做O(N^d)，这一类的递归问题，都可以用一个公式来求出时间复杂度。</p>
<p>上面的那个递归行为的时间复杂度用公式计算出来就是：T = 2T(N/2) + O(N^0); (原问题规模为N，子问题规模为N/2，剩下的操作只有两行，复杂度为O(1))</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn2-1.png" alt="image-20201128202459129"></p>
<p>如果你要把原来的分为1/2改成分为两个2/3，中间重合了1/3，此时你的时间复杂度就变成了T = 2T(N/(3/2)) + O(N^0)</p>
<p>只要你的递归符合上面那个式子，可以直接确定时间复杂度（不要管下面的结论是怎么推出来的）</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn2-2.png" alt="image-20201128203601662"></p>
<p>对于这个公式，不用理解，背就完事儿了</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn2-3.png" alt="image-20201128204825376"></p>
<p>归并排序，快排，堆排都是最后一个复杂度，下篇文章讲。</p>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>HashMap相当于是一个有key有value的集合</p>
<p>HashSet相当于是一个只有key的集合</p>
<p>但二者底层怎么组织是一模一样的，就只是有value和没value的区别，key是怎么组织的方式是一样的。value就相当于是key的一个小跟屁虫跟在后面。</p>
<p><strong>哈希表的逆天之处就在于，哈希表的增、删、改、查，在使用时一律认为这些操作的时间复杂度为O(1)</strong></p>
<p>在Java中，基本类型变量在传递时是按值传递的，它们的包装类在传递时是按引用传递的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true,值传递</span>
<span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false,引用传递，自动装箱了</span>
<span class="token comment">//相比较值用equals方法</span>
<span class="token comment">//大的这个东西，如果值是在-128~127之间，按值传递，否则按引用传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>哈希表中：全是大类型（包装类），甭管在什么范围内，一律按值传递。注意：只有基础类型的包装类大类才是值传递，非基础类型的key，引用传递</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//主函数中：</span>
<span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span> node2 <span class="token operator">=</span> node1<span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node1<span class="token punctuation">,</span> <span class="token string">"我是node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node2<span class="token punctuation">,</span> <span class="token string">"我是node2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//sout map.size之后输出值是1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再说一个内存问题：HashMap&lt;String, String&gt;建4个map，每加一条记录key的长度是100，value的长度也是100，我加了四回不同的记录，这个map里总共的空间是800个字符,四条记录每条记录都拷贝一个值到内存中，因为它是基础类型按值传递。但是HashMap&lt;Node, Node&gt;,然后map里面加了四回（四条记录），每条map里面的keyNode合计有20G，valueNode也是20G，但是map中只存每一个node的内存地址，8字节。所以一条记录16字节，总共64字节。</p>
<p>注意：String等基础的大类型在其它地方是引用，单独在哈希表中是按值。</p>
<h3 id="有序表TreeMap-lt-gt"><a href="#有序表TreeMap-lt-gt" class="headerlink" title="有序表TreeMap&lt;&gt;"></a>有序表TreeMap&lt;&gt;</h3><p>和哈希表用法上没啥区别，但是它会自动把你加入的键值对进行排序。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\cn2-4.png" alt="cn2-4"></p>
<p>但是它所有的操作时间复杂度为O(logn)，不如哈希表。</p>
<p>思考：如果有序表中加入了非基础类型的元素，它的key该怎么比较大小呢？</p>
<p>后面在堆和比较器排序的文章中会写到这一点。</p>
<p>本篇结束。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>链表相关面试题</title>
    <url>/2019/07/29/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="链表相关面试题"><a href="#链表相关面试题" class="headerlink" title="链表相关面试题"></a>链表相关面试题</h2><p>了解完基础知识就可以开始刷题了，真正能让你进去的是刷题。</p>
<p>想练手写代码，找个20道题练一下就行了。</p>
<p><strong>链表问题</strong></p>
<ol>
<li>对于笔试，不用太在乎空间复杂度一切为了时间复杂度</li>
<li>对于面试，时间复杂度依然放在第一位，但是一定要找到空间最省的方法</li>
</ol>
<h3 id="链表面试题常用的数据结构与技巧"><a href="#链表面试题常用的数据结构与技巧" class="headerlink" title="链表面试题常用的数据结构与技巧"></a>链表面试题常用的数据结构与技巧</h3><h4 id="1-使用容器（哈希表、数组等）"><a href="#1-使用容器（哈希表、数组等）" class="headerlink" title="1.使用容器（哈希表、数组等）"></a>1.使用容器（哈希表、数组等）</h4><h4 id="2-快慢指针"><a href="#2-快慢指针" class="headerlink" title="2.快慢指针"></a>2.快慢指针</h4><p>快慢指针</p>
<ol>
<li>输入链表头结点，奇数长度返回中点，偶数长度返回上中点(前面的那个中点)</li>
<li>输入链表头结点，奇数长度返回中点，偶数长度返回下中点</li>
<li>输入链表头结点，奇数长度返回中点的前一个结点，偶数长度返回上中点的前一个结点</li>
<li>输入链表头结点，奇数长度返回中点的前一个结点，偶数长度返回下中点的前一个结点</li>
</ol>
<p>这四种情况边界条件是不一样的，你都得给它抠清楚</p>
<p>返回上中点的代码：<span id="more"></span></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">midOrUpMideNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">,</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//注意这个是短路或，前面不成立它才	会判断后面的，head.next是空，只有head一个点，直接返回这一个点，最后那个是前两个不为空，第三个为空，返回头结点（上中点）。前面卡一个过滤，有一个点、两个点、三个点的时候	</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//链表有三个点或三个以上的点</span>
    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token comment">//慢指针来到第二个点</span>
    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">//快指针来到第三个点</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>返回下中点的代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">midOrDownNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以直接把链表放在容器里面，然后直接取出size一半那个位置的元素（细节需要自己抠），这样简单，但是面试的时候最好写上面的。当然笔试的时候用容器，笔试的时候为了什么？就是为了ac（通过率），面试的时候再用上面的都可以。面试的时候可以装逼，当然，要明白一件事，你要是真吊的话就不是装逼了。</p>
<h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><ol>
<li><p>给定一个单链表head，请判断该链表是否为回文结构（回文，正着念和反着念一样）</p>
<ol>
<li>哈希表的方法特别简单（笔试用）</li>
<li>改原链表的方法就需要注意边界了（面试用）</li>
</ol>
<p>这题比较憨，就不写代码了，想看的去leetcode上自己查</p>
</li>
<li><p>将单链表按照某值划分成左边小、中间相等、右边大的形式</p>
<ol>
<li>把链表放入数组里，在数组上做partition（笔试用）</li>
<li>分成小、中、大三部分，再把各个部分之间串起来（面试用）（准备六个引用即可，还可以保证稳定性）</li>
</ol>
</li>
</ol>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20201205154816881.png" alt="image-20201205154816881" style="zoom:40%;" />

<p>下面是第二种方法的代码（面试用的方法）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">listPartition</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span> sH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> sT <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> eH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> eT <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> mH <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> mT <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//六个指针，小于、等于、大于区域的头和尾</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//save next node</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//把head后面的环境记一下，等会让要标空</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//先让head指向空</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>sH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//小于部分如果为空，当前结点即作头结点又作尾结点</span>
                sH <span class="token operator">=</span> head<span class="token punctuation">;</span>  
                sT <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                sT<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//先把尾巴的下一个结点指向当前结点，然后再让尾巴指向当前结点</span>
                sT <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">==</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//剩下的两种情况操作一模一样</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>eH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    eH <span class="token operator">=</span> head<span class="token punctuation">;</span>
                    eT <span class="token operator">=</span> head<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    eT<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
                    eT <span class="token operator">=</span> head<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>mH <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    mH <span class="token operator">=</span> head<span class="token punctuation">;</span>
                    mT <span class="token operator">=</span> head<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    mT<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
                    mT <span class="token operator">=</span> head<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            head <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> 
        <span class="token comment">//接下来，小于区域的尾巴，连等于区域的头，等于区域的尾巴，连大于区域的头，但是某个区域可能不存在，为了避免空指针异常，需要先判断区域是否存在</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sT <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            sT<span class="token punctuation">.</span>next <span class="token operator">=</span> eH<span class="token punctuation">;</span> <span class="token comment">//等于区域为空也没事，因为小于区域尾巴本来就指向空</span>
            eT <span class="token operator">=</span> eT <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> sT <span class="token operator">:</span> eT<span class="token punctuation">;</span><span class="token comment">//如果等于区域为空的话，等于区域的尾巴变成小于区域的尾巴</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//上面的if不管中不中，下面都是eT去连大于区域的头</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>eT <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            eT<span class="token punctuation">.</span>next <span class="token operator">=</span> mH<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sH <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> sH <span class="token operator">:</span> <span class="token punctuation">(</span>eH <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> eH <span class="token operator">:</span>mH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最后返回所有串起来的链表的最左侧的结点，牛啊</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你没必要一开始就写出哎卧槽很牛的代码，没必要。你可以一开始写得很low，对于你来讲写出来一条一条之后再做优化都可以。</p>
<ol start="3">
<li><p>一种特殊的单链表结点类描述如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> rand<span class="token punctuation">;</span>
    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>rand指针是单链表结点结构中新增的指针，rand可能指向链表中的任意一个结点，也可能指向null</p>
<p>给定一个由Node结点类型组成的无环单链表的头结点head，请实现一个函数完成这个链表的复制，并返回复制的新链表的头结点</p>
<p>【要求】</p>
<p>时间复杂度为O(1)</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205154816881.png" style="zoom:40%;" />

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">copyListWithRand1</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">///先复制结点到map里去(在map中创造一个一模一样的链表)</span>
    <span class="token punctuation">&#125;</span>
    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//如果cur是老结点</span>
        <span class="token comment">//那么map.get(cur)就是它克隆出来的新结点</span>
        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>rand <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这两行就是克隆结点</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面来看一下不用哈希表的方法（为什么可以不用哈希表，因为可以人为构造对应关系）首先有一个链表，里面有123结点，把1’放在1后面2前面，2’和3’依次一样，然后遍历的时候一对一对地取出来（取一对和取一个没啥区别）</p>
<p>（这就是你人为构造的哈希关系）然后复制rand指针。最后一步把大链表在next指针方向上分离出来。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205165503934.png" alt="image-20201205165503934" style="zoom: 33%;" /></li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">copyListWithRand2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">//下面要把每一个copy出来的node给链接到原本的node后面和下一个node之前</span>
    <span class="token comment">//1 -> 2</span>
    <span class="token comment">//1 -> 1' -> 2</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//cur是老的链表</span>
        next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>          <span class="token comment">//这个while循环中的操作就是插入结点的操作</span>
    <span class="token punctuation">&#125;</span>
    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">//cur是老结点</span>
    <span class="token class-name">Node</span> curCopy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//cur的克隆结点就叫curCopy</span>
    <span class="token comment">//set copy node rand(随机指针)</span>
    <span class="token comment">//1 -> 1' -> 2 -> 2'</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//cur 老</span>
        <span class="token comment">//cur.next   新copy</span>
        next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//next就是老结点的下一个(跳过中间插入的复制节点)</span>
        curCopy <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        curCopy<span class="token punctuation">.</span>rand <span class="token operator">=</span> cur<span class="token punctuation">.</span>rand <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cur<span class="token punctuation">.</span>rand<span class="token punctuation">.</span>next <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//如果原结点的rand指针为空，则curCopy的rand指针为空，否则让它被cur.rand指向</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//head.next 一定是新链表的头结点</span>
    <span class="token class-name">Node</span> res <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>	
    <span class="token comment">//split(此时插入的链表已经复制完毕，要进行分离)</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        curCopy <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">//让原链表的next指向原链表的下一个结点</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        curCopy<span class="token punctuation">.</span>next <span class="token operator">=</span> next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> next<span class="token punctuation">.</span>next <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//复制结点也指向下一个复制的结点(如果不为空)</span>
        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment">// 分完了之后返回我原来的头部(复制链表的头部)</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="链表算法的两个噩梦"><a href="#链表算法的两个噩梦" class="headerlink" title="链表算法的两个噩梦"></a>链表算法的两个噩梦</h3><p><strong>下面要讲的这个题，和约瑟夫环问题，被认为是链表算法的两个噩梦</strong></p>
<p><strong>给定两个可能有环也可能无环的单链表，头结点head1和head2。请实现一个函数，如果两个链表相交，请返回相交的第一个结点。如果不相交，返回null</strong></p>
<p>【要求】</p>
<p>如果两个链表长度之和为N，时间复杂度达到O(N)，额外空间复杂度为O(1)</p>
<p>（我找了一下，这不是lc上的简单题吗…）（等会儿你就知道这个考虑得可比lc上那个easy题复杂多了…）</p>
<ol>
<li>先判断一个链表是否·为环，并返回它的结点<ol>
<li>使用HashSet，从第一个结点开始将链表加入集合，如果到哪一个结点下面加不了了说明它是环点</li>
<li>不用HashSet的方法。准备两个指针，快指针和慢指针</li>
</ol>
</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205193641115.png" alt="image-20201205193641115" style="zoom:50%;" />

<p>让快指针f走两步，慢指针s走一步，两个指针一定会在环上的某个点相遇，<strong>但怎么找到第一个入环的结点？接下来的操作就是一个玄学的地方了</strong></p>
<p><strong>让f回到开头的结点，每次走一步，与s同步走，f与s相遇的第一个结点就是入环的第一个结点</strong></p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205194059060.png" alt="image-20201205194059060" style="zoom:50%;" />

<p>直接记结论就行，有兴趣的话就去找找证明（小学奥赛的追击问题）</p>
<p>下面看下code，先解决入环问题</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//三种情况对应无结点、只有一个结点、只有两个结点</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//n1慢n2快</span>
    <span class="token class-name">Node</span> n1 <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// n1 -> slow</span>
    <span class="token class-name">Node</span> n2 <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//n2 -> fast</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n1 <span class="token operator">!=</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//它们相遇时从while中跳出</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> n2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        n2 <span class="token operator">=</span> n2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        n1 <span class="token operator">=</span> n1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n1 <span class="token operator">!=</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//walk again from head 快指针从头开始一步一步走，慢指针在原来位置继续一步一步走</span>
        n1 <span class="token operator">=</span> n1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        n2 <span class="token operator">=</span> n2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> n1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来已经获得了两个链表的头结点和他们的第一个入环结点，要找第一个相交的结点。用HashSet的方法：把第一个链表放入HashSet中，然后遍历第二个链表，看第二个链表的结点是否在HashSet中，这个简单。</p>
<p>不用HashSet的方法：从链表1开始走，走到最后一个结点，记录为end1，记录一下长度，设为length1；再遍历第二个链表，也是走到最好一个结点，记录为end2，记录下length2。先判断end1 == end2，如果不等于则必不相交，之前说过，如果相交，结尾的内存地址必是一样的。如果end1 == end2，你两只是相交的最后一个结点，我要找第一个结点，假设第一个链表长度是100，第二个链表长度是80，长链表先走20步，还剩80步时短链表开始走，一定会在第一个相交结点处相遇。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如果两个链表都无环，返回第一个相交结点，如果不相交，返回null</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">noLoop</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Node</span> cur1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> cur2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        n<span class="token operator">++</span><span class="token punctuation">;</span>
        cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>   <span class="token comment">//cur1经历完这个过程之后就变成了end1</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur2<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        n<span class="token operator">--</span><span class="token punctuation">;</span>
        cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>   <span class="token comment">//cur2经历完这个过程之后就变成了end2</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//如果end1 != end2</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>end1 <span class="token operator">!=</span> end2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// n：链表1的长度减去链表2长度的值</span>
    cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>  <span class="token comment">//谁长，谁的头变成cur1</span>
    cur2 <span class="token operator">=</span> cur1 <span class="token operator">==</span> head1 <span class="token operator">?</span> head2 <span class="token operator">:</span> head1<span class="token punctuation">;</span> <span class="token comment">//谁短，谁把头部给cur2</span>
    
    n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        n<span class="token operator">--</span><span class="token punctuation">;</span>
        cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">//cur1先把差值的那些步给先走了</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cur1 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  
        cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token comment">//然后二者同时往前走</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> cur1<span class="token punctuation">;</span>
    
    <span class="token comment">//上面已经讨论了两个链表都无环的情况，下面还有三种情况，一个有环一个没环占两种情况，两个都有环占一种情况</span>
    <span class="token comment">//一个有环一个没环的情况是不可能相交的，否则会破坏链表只有一个next指针的规则，要么就是前面重合，那就不是两条链表了，就是一条链表了</span>
    <span class="token comment">//如果两个有环链表相交他们一定是共用环的，还要分两种情况：1.两个链表入环的结点是一个点；2.两个链表入环的结点不是一个点</span>
    <span class="token comment">//第二种情况最好区分，如果你发现loop1的地址等于loop2的地址，那就是第二种情况。找这个相交结点也很好找，因为环你是不用看的，你只需要找第一个入环结点，当作最后结点即可，可以转换为上面的无环结点相交问题。你就找你的loop1和loop2，把它们当成公共尾结点即可</span>
    <span class="token comment">//所以我们只需要区分第一种情况和第三种情况。如何区分？让loop1转一圈看看能不能遇到loop2，能遇到就是第三种情况，否则是第一种情况</span>
    
    <span class="token comment">//两个有环链表，返回第一个相交结点，如果不相交返回null</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">bothLoop</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> loop1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">,</span> <span class="token class-name">Node</span> loop2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Node</span> cur1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Node</span> cur2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">==</span> loop2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cur1 <span class="token operator">=</span> head1<span class="token punctuation">;</span>
            cur2 <span class="token operator">=</span> head2<span class="token punctuation">;</span>
            <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">//剩下的代码和上面的无环部分一模一样</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                n<span class="token operator">++</span><span class="token punctuation">;</span>
                cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> loop2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                n<span class="token operator">--</span><span class="token punctuation">;</span>
                cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> head1 <span class="token operator">:</span> head2<span class="token punctuation">;</span>  <span class="token comment">//谁长，谁的头变成cur1</span>
            cur2 <span class="token operator">=</span> cur1 <span class="token operator">==</span> head1 <span class="token operator">?</span> head2 <span class="token operator">:</span> head1<span class="token punctuation">;</span>  <span class="token comment">//谁短，谁把头部给cur2</span>
            n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                n<span class="token operator">--</span><span class="token punctuation">;</span>
                cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> cur1<span class="token punctuation">;</span>  <span class="token comment">//和上面的无环链表一模一样，就是第二种情况，二者的入环点相同，直接把入环点当成两个																			链表的公共尾结点	</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//else就是loop1 !=loop2的时候</span>
            cur1 <span class="token operator">=</span> loop1<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//从loop1的下一个结点开始走</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果它转回自己了，就会从while中跳出来</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>cur1 <span class="token operator">==</span> loop2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> loop1<span class="token punctuation">;</span> <span class="token comment">//如果遇到了，返回loop1和loop2都可以(都可以算是是相交的第一个结点)</span>
                <span class="token punctuation">&#125;</span>
                cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//如果它转回自己都没遇到loop2，不相交</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//下面看调用这些功能方法的核心方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">getIntersectNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span> <span class="token class-name">Node</span> head2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Node</span> loop1 <span class="token operator">=</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> loop2 <span class="token operator">=</span> <span class="token function">getLoopNode</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> loop2 <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">noLoop</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> loop2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">bothLoop</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> loop1<span class="token punctuation">,</span> head2<span class="token punctuation">,</span> loop2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205205111918.png" alt="image-20201205205111918" style="zoom: 50%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205224851424.png" alt="image-20201205224851424" style="zoom: 33%;" />

<h3 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h3><p>约瑟夫环问题说实话比这个还要难一点，但这个已经比较难了。这个问题其实是三道面试题的一个合集。</p>
<ol>
<li>第一个面试题：给你一个链表，返回他第一个入环的结点。</li>
<li>第二个面试题：两个无环链表相交，返回相交的结点</li>
<li>第三个面试题：明确告诉你两个有环链表，怎么找到它们第一个相交的结点</li>
</ol>
<h3 id="小题"><a href="#小题" class="headerlink" title="小题"></a>小题</h3><p>再看最后一个小题：</p>
<p>能不能不给单链表的头结点，只给要被删除的结点，把这个结点给删掉。</p>
<p>lc上的那个交换值的做法就是一个抖机灵的做法，会有很多种问题。如果你要删掉的是一个服务器呢？如果你删除的这个节点要调用析构函数呢？直接调不了。第三个问题，这种做法是绝对无法删除链表的最后一个结点的。null在系统中是一个单独的区域，你想删除最后一个结点，就必须把它前一个结点的指针手动指向空，你自己去掉强大的析构函数，屁用没有。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205233031313.png" alt="image-20201205233031313" style="zoom:33%;" />

<p>注意，别把最后一个指针直接等于null，自己看下面的图。当你new一个Node的时候实际上是在内存中申请了一块新的内存空间，然后用a这个引用能找到它。你把c指向null，b.next照样能找到c原来所指的那一块内存空间。</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205233127726.png" alt="image-20201205233127726" style="zoom: 67%;" />

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20201205233202856.png" alt="image-20201205233202856" style="zoom: 50%;" />

<p>所以，刚才那道题，面试官提出来不是想让你抖机灵的。他就是考察你对内存的理解的。他就指望着你讲清楚选择的那种抖机灵的删除方式是不好的。你正儿八经地删除结点是一定要头结点的。所以，要告诉他，不行，有哪些问题。要删掉一个结点一定是要头结点的，而且一定要准确地连好指针。</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>关于IO流</title>
    <url>/2021/02/08/IO%E6%B5%81/</url>
    <content><![CDATA[<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><code>java.io.File</code> File类是文件和目录名的抽象表示，主要用于文件和目录的创建、查找和删除工作</p>
<h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><span id="more"></span>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token comment">/*
    java.io.File
    文件和目录路径名的抽象表示形式
    Java把电脑中的文件和文件夹（目录）封装为了一个File类，我们可以使用File类对文件和文件夹进行操作
    我们可以使用File类的方法
        创建一个文件/文件夹
        删除文件/文件夹
        获取文件/文件夹
        判断文件/文件夹是否存在
        对文件夹进行遍历
        获取文件的大小
        File类是一个与系统无关的类，任何的操作系统都可以使用这个类中的方法

        重点：记住三个单词
            file：文件
            directory：文件夹
            path：路径
            方法和哪个词相关就是对应操作哪种类型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
        static String pathSeparator 与系统有关的路径分隔符，它被表示为一个字符串
        static char pathSeparator 与系统有关的路径分隔符
        Windows系统：分号  Linux系统：冒号

        static String separator 与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串
        static char separatorChar 与系统有关的默认名称分隔符(文件名称分隔符）
        Windows系统：反斜杠  Linux系统：正斜杠

        操作系统：路径不能写死了
        因为以后你在电脑上写完的代码可能要在服务器上运行，而服务器可能是Linux或Unix系统
        所以我们把杠和分号都用 "+ File.separator +" 这种形式来表示（可以记）
         */</span>
        <span class="token class-name">String</span> pathSeparator <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pathSeparator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出分号</span>

        <span class="token class-name">String</span> separator <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出反斜杠</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token comment">/*
    路径：
        绝对路径：是一个完整的路径
            以盘符（C:  D:)开始的路径
        相对路径：是一个简化的路径
        相对于当前项目的根目录(D:\\STUDATA\\IDEA_Code\\IO)
        如果使用当前项目的根目录，那么路径可以简化书写
        (D:\\STUDATA\\IDEA_Code\\IO\\123.txt) --> 简化为: 123.txt（可以省略项目的根目录）
    注意：
        1.路径是不区分大小写的
        2.路径中的文件名称分隔符在Windows中使用反斜杠，而反斜杠是转义字符，两个反斜杠代表一个反斜杠，所以要写两个
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
        File类的构造方法
         */</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token string">"C:\\"</span><span class="token punctuation">,</span><span class="token string">"D:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

        <span class="token comment">/*
    File(String pathname) 通过将给定路径名的字符串转换为一个抽象的路径名来创建一个新的实例
    参数：
        String pathname
        1.路径可以是以文件结尾，也可以是以文件夹结尾
        2.路径可以是相对路径，也可以是绝对路径
        3.路径可以是存在的，也可以是不存在的
        因为创建File对象只是把字符串的路径给它封装为File对象，不考虑路径的真假情况
     */</span>


    <span class="token comment">/*
    File(String parent, String child)
    参数：把路径分成了两部分
        String parent:父路径
        String child:子路径
    好处：
        父路径和子路径可以单独书写，非常灵活
        父路径和子路径都可以变化
     */</span>

    <span class="token comment">/*
    File(File parent, String child)
        参数：把路径分成了两部分
        File parent:父路径
        String child:子路径
    好处：
        父路径和子路径可以单独书写，非常灵活
        父路径是File类型，可以使用File类的一些方法对路径进行一些操作，再使用File类创建对象
     */</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span><span class="token string">"hello.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token class-name">String</span> parent<span class="token punctuation">,</span> <span class="token class-name">String</span> child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//输出C:\D:</span>
        <span class="token comment">//使用起来灵活，前后都可以直接在参数那一块变</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">File</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token comment">/*
    File类获取功能的方法
        public String getAbsolutePath(): 返回此File的绝对路径名字符串
        public String getPath(): 将此File路径名转换为字符串
        public String getName(): 返回由此File表示的文件或目录的名称
        public long length(): 返回此File表示的文件的长度（文件大小，不是文件名长度）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">/*
        public String getAbsolutePath(): 返回此File的绝对路径名字符串
        获取的是构造方法中的路径
        无论路径是绝对的还是相对的，它返回的都是绝对路径

        public String getName(): 返回由此File表示的文件或目录的名称
        返回的是构造方法传递路径的结尾部分的（文件/文件夹）

        public long length(): 返回此File表示的文件的长度（文件大小，不是文件名长度）
        获取的是构造方法指定的文件大小，以字节为单位
        注意：
            1.文件夹是没有大小概念的，所以我们不能获取文件夹的大小
            2.如果构造方法给出的路径不存在，则length()方法返回0
            3.获取文件夹的大小返回的也是0
         */</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\JavaSnake\\src\\statics\\body.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//输出1064,代表这张图片的大小是1064个字节</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//输出a.txt</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里返回的就是构造方法中写的路径，写的是什么就是什么</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//输出的也是构造器中写的路径，File类的toString方法里面调用的就是getPath()方法</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> absolutePath1 <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>absolutePath1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="File类中具有判断功能的方法"><a href="#File类中具有判断功能的方法" class="headerlink" title="File类中具有判断功能的方法"></a>File类中具有判断功能的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/*
    public boolean exist():判断构造方法中的路径（文件或目录）是否存在，绝对或相对路径都可以
        存在：true
        不存在：false

    public boolean isDirectory()：用于判断构造方法中给定的路径是否以文件夹结尾
        是：true
        否：false

    public boolean isFile()：用于判断构造方法中给定的路径是否以文件结尾
        是：true
        否：false
    注意：
        电脑硬盘中只有文件/文件夹两种东西
        两个方法是互斥的，即不是文件就是文件夹
        两个方法的使用前提：路径必须是存在的，否则都返回false
     */</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出true</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//存在再判断，不存在就不用判断了</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="File类的创建和删除方法"><a href="#File类的创建和删除方法" class="headerlink" title="File类的创建和删除方法"></a>File类的创建和删除方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>



    <span class="token comment">/*
    public boolean createNewFile()
    创建文件的路径和名称在构造方法中给出
    返回值：布尔值
        true：文件不存在时创建文件并返回true
        false：文件存在时不会创建，并返回false
    注意：
        1.此方法只能能创建文件，不能创建文件夹
        2.创建文件的目录必须存在，否则会抛出异常IOException
        3.createNewFile的声明抛出了IOException，所以我们调用时必须处理这个异常，最好是try catch一下

        public boolean mkdir():只能创建单级文件夹
        public boolean mkdirs():既可以创建单级文件夹，也可以创建多级文件夹
        创建文件夹的路径也是在构造方法中给出
        返回值的规则与创建文件相同
        注意：
            如果创建文件夹的路径不存在，不会抛出异常，会返回false

        public boolean delete():可以删除构造方法中给出的文件或文件夹
        返回值：布尔值
            true：文件/文件夹删除成功，返回true
            false：文件夹中有内容时，不能删除文件夹，返回false
        注意：
        delete方法直接在硬盘删除文件夹，不走回收站，删除要谨慎
     */</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            f1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            f2<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//相对路径则直接创建在当前项目的根目录下（与当前项目同级）</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a\\b\\c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//输出true</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO\\a\\b\\c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO\\a\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="File类的遍历目录功能"><a href="#File类的遍历目录功能" class="headerlink" title="File类的遍历目录功能"></a>File类的遍历目录功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/*
        public String[] list(): 返回一个String数组，表示该File目录中的所有子文件或目录
        public File[] listFiles(): 返回一个File数组，表示该File目录中的所有子文件或目录
        （把读取到的东西分别封装为String对象和File对象
    注意：
        1.list方法和listFile方法遍历的是构造方法给出的目录
        2.如果构造方法中给出目录的路径不存在，会抛出空指针异常
        3.如果构造方法中给出的路径不是一个目录(以文件结尾），也会抛出空指针异常
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这个方法能够获取到隐藏的文件与文件夹</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> strArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\STUDATA\\IDEA_Code\\IO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这个方法能够获取到隐藏的文件与文件夹</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
    递归分为两种：直接递归和间接递归
    在自身方法中调用自己称为直接递归
    间接递归：再A方法中调用B方法，再在B方法中调用A方法
    注意事项：
        1.递归一定要有条件限定，保证递归能停下来，否则会发生栈内存溢出
        2.在递归中虽然有条件限定，但是递归次数不能太多，否则也会栈内存溢出
        3.构造方法：禁止递归
        *：每次有一个新方法压栈执行时系统都会为其分配一段内存，
        栈内存中有无数多个a方法，当超出栈内存大小时，会发生StackOverflowError
        *：当一个方法调用另一个方法时，会等待被调用的方法执行完才回来执行本方法
    递归的使用前提：
        当调用方法的时候，方法的出题不变，每次调用方法的参数不变，可以使用递归
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Recurison</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="递归打印多级文件夹"><a href="#递归打印多级文件夹" class="headerlink" title="递归打印多级文件夹"></a>递归打印多级文件夹</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Recurison</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\copy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getAllFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/*
    定义一个方法，让其参数传递File类型的目录
    方法中对目录进行遍历

     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">getAllFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token comment">//只要.jpg结尾的文件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Recurison</span> <span class="token punctuation">&#123;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\copy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getAllFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/*
    定义一个方法，让其参数传递File类型的目录
    方法中对目录进行遍历

     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">getAllFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">/*
            1.把File对象f转换成字符串对象
            2.调用String类中的endsWith方法
             */</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把大写转换为小写</span>
            <span class="token keyword">boolean</span> b <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="FileFilter过滤器的原理和使用"><a href="#FileFilter过滤器的原理和使用" class="headerlink" title="FileFilter过滤器的原理和使用"></a>FileFilter过滤器的原理和使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileFilter</span><span class="token punctuation">;</span>

<span class="token comment">/*
在File类中有两个和listFiles重载的方法，方法的参数传递的就是过滤器
1.File[] listFiles(FileFilter filter)
    java.io.FileFilter接口：用于抽象路径名(File对象)的过滤器
    作用：用来过滤文件的
    抽象方法：用来过滤文件的方法
    boolean accept(File pathname) 测试指定的抽象路径名是否应该包含在某个路径名列表中
    参数：
        File pathname:使用listFiles方法遍历目录，得到的每一个文件对象

2.File[] listFiles(FilenameFilter filter)
    java.io.FilenameFilter接口：实现此接口的类可以用于过滤文件名称
    抽象方法：用来过滤文件的方法
    boolean accept(File dir, String name)测试指定文件是否应该包含在某一个文件列表中
    参数：
        File dir:构造方法中传递的目录
        String name：使用listFiles方法遍历目录获取的每一个文件/文件夹的名称
    注意：两个过滤器接口是没有实现类的，需要我们自己写实现类，重写过滤的方法accept，在方法中自己定义过滤的规则
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Filter</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\copy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getAllFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
        listFile方法一共做了三件事情
            1.listFiles方法会对构造方法中传递的目录进行遍历，获取目录中的每一个文件/文件夹 -->封装为File对象
            2.listFile方法会调用参数传递的过滤器中的方法accept
            3.listFiles方法会把遍历得到的每一个File对象，传递给accept方法的参数（把封装好的File对象传过来）
            4.accept方法返回的是一个布尔值
                返回true就会把传递过去的File对象保存到File数组中
                返回的是false则不会保存
         */</span>
       <span class="token comment">/* File[] files = dir.listFiles(new FileFilter() &#123;
            @Override
            public boolean accept(File pathname) &#123;
                if(pathname.isDirectory()) &#123;
                    getAllFile(pathname);
                    return true;
                &#125;
                return pathname.getName().toLowerCase().endsWith("jpg");

            &#125;
        &#125;);*/</span>

       <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               <span class="token function">getAllFile</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">getAllFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="IO概述"><a href="#IO概述" class="headerlink" title="IO概述"></a>IO概述</h2><table>
<thead>
<tr>
<th></th>
<th>输入流</th>
<th>输出流</th>
</tr>
</thead>
<tbody><tr>
<td><strong>字节流</strong></td>
<td>字节输入流<br/><strong>InputStream</strong></td>
<td>字节输出流<br/><strong>OutputStream</strong></td>
</tr>
<tr>
<td><strong>字符流</strong></td>
<td>字符输入流<br/><strong>Reader</strong></td>
<td>字符输出流<br/><strong>Writer</strong></td>
</tr>
</tbody></table>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20200530164426438.png" alt="image-20200530164426438"  />

<p>流又分为字节流和字符流：</p>
<ul>
<li>字节流的顶级父类是InputStream和OutputStream</li>
<li>字符流的顶级父类是Reader和Writer  </li>
</ul>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>一切文件数据在存储时都是以二进制数字的形式保存，都是一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据，在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。字节流可以读写任意的文件</p>
<h3 id="字节输出流OutputStream"><a href="#字节输出流OutputStream" class="headerlink" title="字节输出流OutputStream"></a>字节输出流OutputStream</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
    java.io.OutputStream 此抽象类是所有输出字节流的超类
    定义了一些子类共性的成员方法
    他是一个抽象类，无法创建对象，只能使用它的子类
    java.io.FileOutputStream extends OutputStream
    FileOutputStream:文件字节输出流
    作用：把内存中的数据写入到硬盘的文件中

    构造方法：
        FileOutputStream(String name)
            创建一个向具有指定名称的文件中写入数据的输出文件流
            FileOutputStream(File file)
            创建一个向指定File对象表示的文件中写入数据的文件输出流
            参数：写入数据的目的地
                String name：目的地是一个文件的路径
                File file：目的地是一个文件
            构造方法的作用：
            1.创建一个FileOutputStream对象
            2.会根据构造方法中传递的文件/文件路径，创建一个空的文件（自带创建文件功能）
            3.会把FileOutputStream对象指向创建好的文件
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="字节输出流写出数据到文件"><a href="#字节输出流写出数据到文件" class="headerlink" title="字节输出流写出数据到文件"></a>字节输出流写出数据到文件</h3><p>文件是保存在硬盘中的，写出数据到文件。</p>
<p>平时我们写代码时的数据是在内存中的（栈区或者堆区），将内存中的数据写入硬盘中</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/*
    java.io.OutputStream 此抽象类是所有输出字节流的超类
    定义了一些子类共性的成员方法
    他是一个抽象类，无法创建对象，只能使用它的子类
    java.io.FileOutputStream extends OutputStream
    FileOutputStream:文件字节输出流
    作用：把内存中的数据写入到硬盘的文件中

    构造方法：
        FileOutputStream(String name)
            创建一个向具有指定名称的文件中写入数据的输出文件流
            FileOutputStream(File file)
            创建一个向指定File对象表示的文件中写入数据的文件输出流
            参数：写入数据的目的地
                String name：目的地是一个文件的路径
                File file：目的地是一个文件
            构造方法的作用：
            1.创建一个FileOutputStream对象
            2.会根据构造方法中传递的文件/文件路径，创建一个空的文件（自带创建文件功能）
            3.会把FileOutputStream对象指向创建好的文件

     写入数据的原理（内存-->硬盘）
     java程序-->JVM-->OS(操作系统)-->OS调用写数据的方法-->把数据写入到文件中

     字节输出流的使用步骤：
        1.创建FileOutputStream对象，构造方法中传递写入数据的目的地
        2.调用FileOutputStream对象中的方法write，把数据写入到文件中
        3.流使用完要释放资源
        （流使用的过程中调用了系统相关的资源，占用一定的内存，使用完毕后清空内存可以提高程序运行的效率）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01OutputStream</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FileOutputStream</span> fos<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//public abstract void write(int b):将指定的字节输出</span>
            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="文件存储的原理和记事本打开"><a href="#文件存储的原理和记事本打开" class="headerlink" title="文件存储的原理和记事本打开"></a>文件存储的原理和记事本打开</h3><ol>
<li>字节输出流写数据的时候，会把十进制的整数转换成二进制的整数，比如你写一个97进去</li>
<li>所以硬盘中存储的数据实际上是字节，也就是二进制的数字。1字节 =  8比特位（8个1010类的二进制数字）</li>
<li>文件不存在时字节输出流所做的第一步是在硬盘中创建文件的对象</li>
<li>任意的文本编辑器（记事本，NotePad++，在打开文件的时候，都会查看编码表，把字节转换成字符表示）</li>
<li>0-127查询ASCII表，其它值会查询系统默认编码表</li>
<li>中文系统：GBK编码表</li>
<li>所以说我们写入97在记事本里看到的是a</li>
</ol>
<h3 id="字节输出流写多个字节的方法"><a href="#字节输出流写多个字节的方法" class="headerlink" title="字节输出流写多个字节的方法"></a>字节输出流写多个字节的方法</h3><h4 id="注意：byte-是字节数组，就是我们平时写输出流的那个一个一个字节的数组，而char-是字符数组，1字符-2字节，二者不一样，不要弄混"><a href="#注意：byte-是字节数组，就是我们平时写输出流的那个一个一个字节的数组，而char-是字符数组，1字符-2字节，二者不一样，不要弄混" class="headerlink" title="注意：byte[]是字节数组，就是我们平时写输出流的那个一个一个字节的数组，而char[]是字符数组，1字符=2字节，二者不一样，不要弄混"></a>注意：byte[]是字节数组，就是我们平时写输出流的那个一个一个字节的数组，而char[]是字符数组，1字符=2字节，二者不一样，不要弄混</h4><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20200601104802563.png" alt="image-20200601104802563"></p>
<p>Arrays类中的toString方法几乎适用于所有类型的数组（Arrays本来就是数组的工具类）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span>

<span class="token comment">/*
    一次写多个字节的方法：
        public void write(byte[] b): 将b.length字节从指定的字节数组写入此输出流
        public void write(byte[] b, int off, int len): 从指定的字节数组写入len字节，从偏移量off开始输出到此输出流
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02OutputStream</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建FileOutputStream对象，构造方法中绑定要写入数据的目的地</span>
        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用FileOutputStream中的write把数据写入到文件中</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
        public void write(byte[] b): 将b.length字节从指定的字节数组写入此输出流
            如果写的第一个字节是正数(0-127)，那么显示的时候会查询ASCII表
            如果写的第一个字节是负数，那么第一个字节会和第二个字节，两个字节组合成一个中文显示，查询系统默认编码表（GBK）
         */</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">//1字节 = 8二进制位 = 0 - 255</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//文件中多了一个ABCDE</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入“烤紻E”</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入ABC</span>

        <span class="token comment">//写入字符串的方法，使用String类中的方法getBytes()把字符串转换为字节数组</span>
        <span class="token comment">//要想以指定的编码表写入数据，则需要在将字符串转化为字节数组时使用，编码表传入getBytes方法的参数中</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys3 <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bys3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注意：UTF-8编码表中一个中文是三个字节，而GBK中两个字节是一个中文</span>
        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="字节输出流的追加续写和换行"><a href="#字节输出流的追加续写和换行" class="headerlink" title="字节输出流的追加续写和换行"></a>字节输出流的追加续写和换行</h3><p>在写数据时如果不追加续写，则每运行一次程序输出流都会新写一个文件把原来的覆盖掉，无法实现追加续写</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
    追加写（续写）：使用两个参数的构造方法即可
    1.FileOutputStream(String name, boolean append)
        创建一个向具有指定name的文件中写入数据的输出文件流
    2.FileOutputStream(String name, boolean append)
        创建一个向具有指定File对象表示的文件中写入数据的输出文件流
    布尔值：
        true：不会覆盖，追加续写
        false：覆盖源文件，创建新文件
    换行写：写换行符号：
   		Windows：\r\n
   		Linux:/n
   		mac:/r
   		注意斜杠的正反，Windows反，Linux和mac正
   		注意：\r\n也是字符串，也要getBytes()转换为字节数组再写
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="字节输入流InputStream"><a href="#字节输入流InputStream" class="headerlink" title="字节输入流InputStream"></a>字节输入流InputStream</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
java.io.InputStream：所有字节输入流的父类，里面定义了所有子类共性的方法
    int read()
        从输入流中读取数据的下一个字节
    int read(byte[] b)
        从输入流中读取一定数量的字节，并将其存储在缓冲区的数组b中
    void close()
        关闭此输入流并释放与该流相关的所有资源
    常用子类：FileInputStream 文件字节输入流
    作用：把硬盘文件中的数据读取到内存中使用
    构造方法
        FileInputStream(String name)
        FileInoutStream(File file)
        参数：读取文件的数据源
            String name:文件的路径
            File file：文件
    构造方法的作用：
        1.创建一个FileInputStream对象
        2.把创建的的对象指向文件
        读取数据的原理(由硬盘到内存)：Java程序-->JVM-->OS读取数据的方法-->读取文件
    字节输入流的使用步骤（重点）：
        1.创建对象，构造方法中绑定要读取的数据源
        2.使用read方法读取文件
        3.释放资源
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01InputStream</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//int read()读取文件中的一个字节并返回，读取到文件的末尾返回-1</span>
        <span class="token comment">//int len = fis.read();</span>
        <span class="token comment">//读取返回的是字符或字节的编码？反正读到最后一位返回的是-1</span>
        <span class="token comment">//发现读取文件的步骤是一个重复的过程，所以可以使用循环优化</span>
        <span class="token comment">//System.out.println(len);</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把IDEA的默认编码转化成GBK后可以这样输出中文</span>
            <span class="token comment">//注意里面不能直接输出fis.read()因为里面读取也算是在继续往下读</span>
            <span class="token comment">//一定要用一个变量来接收我们读取到的数据</span>
            <span class="token comment">//读取“你”字输出228 189 160（UTF-8)中中文是三个字节</span>
        <span class="token punctuation">&#125;</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="字节输入流一次读取多个字节"><a href="#字节输入流一次读取多个字节" class="headerlink" title="字节输入流一次读取多个字节"></a>字节输入流一次读取多个字节</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20200601115814765.png" alt="image-20200601115814765"  />

<p>byte[] bys 的作用：作为缓冲区，字节数组多大每次就读取多少个字节（所以一般都用1024）</p>
<p>int len的作用：返回读取到的字节的个数</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Array</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span>

<span class="token comment">/*
    字节输入流一次读取多个字节的方法：
        int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组b中
    明确两件事：
        1.方法的参数byte[]的作用？
        2.方法的返回值int是什么？
    String类的构造方法：
        1.String(byte[] b)把字节数组转换成字符串
        2.String(byte[] b, int offset, int length)把字节数组转换成字符串(开始的索引，转换个数）
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02InputStream</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用read方法读取文件</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出[49, 48]</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//记录每次读取的有效字节个数</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//输出读写到的字符数组（以字符串形式）</span>
            <span class="token comment">//这个字符数组相当于是一个缓冲区，里面存储了独到的字节</span>
            <span class="token comment">//用0-len的形式可以避免输出后面的1024数组剩下的空格</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//释放资源</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="字节流练习：文件复制"><a href="#字节流练习：文件复制" class="headerlink" title="字节流练习：文件复制"></a>字节流练习：文件复制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/*
    文件复制的练习
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01CopyFile</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c:\\duilie.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果不用数组缓冲则这里写的是len，用数组缓冲则这里要写数组</span>
        <span class="token punctuation">&#125;</span>
        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>使用字符流可能存在的问题：一个中文汉字是三个字节，在读取完之后输出的是一些数字（2个汉字就对应输出6个整数，这样读取时使用char进行强制转型输出，发现输出了一堆乱码，因为IDEA的默认编码表是UTF-8，所以可能会产生一些问题，所以Java还提供了字符流</p>
<h3 id="字符输入流Reader"><a href="#字符输入流Reader" class="headerlink" title="字符输入流Reader"></a>字符输入流Reader</h3><p>Reader是字符输入流最顶层的父类，里面也定义了一些公共方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/*
java.io.Reader: 字符输入流最顶层的父类，里面定义了一些共性的成员方法
    1.int read() 读取单个字符并返回
    2.int read(char[] cbuf) 一次读取多个字符
    3.close()释放资源
    4.以后注意：只要是一Reader或Writer结尾的就是字符流，以InputStream或OutputStream结尾的就是字节流

    java.io.FileReader extends InputStreamReader extends Reader
    注意这里面有一个字符和字节结合的，这个叫做转换流，后面再说
    FileReader：作用：把硬盘文件中的数据以字符的方式读取到内存中

    构造方法
    FileReader(String fileName)
    FileReader(File file)
    参数：读取文件的数据源
        String fileName:文件的路径
        File file:一个文件
    FileReader构造方法的作用：
        1.创建一个FileReader对象
        2.会把FileReader对象指向要读取的文件
    字符输入流的使用步骤：
    1.创建一个FileReader对象，构造方法中绑定要读取的数据源
    2.使用FileReader对象中的方法read()读取文件
    3.释放资源
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Reader</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token comment">//与字节流对应，也可以用字符数组缓冲，这里创建的就是字符数组，char类型的</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//数组用来存储读取到的多个字符，len存储的是每次读取到的有效字符个数</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//String类的构造方法不仅有把字节数组转换成字符串的，还有把字符数组转换成字符串的</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="字符输出流Writer"><a href="#字符输出流Writer" class="headerlink" title="字符输出流Writer"></a>字符输出流Writer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Writer</span><span class="token punctuation">;</span>

<span class="token comment">/*
    java.io.Writer:字符输出流，所有字符输出流的父类，是一个抽象类，里面定义了一些共性的成员方法
    常用子类：
    java.io.FileWriter extends OutputStreamWriter extends Writer
    FileWriter:文件字符输出流
    作用：那内存中的字符数据写入到文件中

    构造方法：
    1.FileWriter(File file)
    2.FileWriter(String fileName)
    这个就不说了，和之前一模一样

    字符输出流的使用步骤（重点）:
    1.创建FileWriter对象，构造方法中绑定要写入数据的目的地
    2.使用FileWriter中的方法Write，把数据写入到内存缓冲区中(字符转换为字节的过程)
    3.使用FileReader中的flush()方法把内存缓冲区中的数据,刷新到文件中
    4.释放资源(它会先把内存缓冲区中的数据刷新到文件中,所以flush不用写)

    注意,字符输出流和字节输出流最大的区别就是字符输出流不是直接把数据写入到文件中,而是先写入到内存中
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Writer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"d.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//fw.flush();</span>
        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h3><p>close()方法和flush()方法的区别:</p>
<p>flush:刷新缓冲区,流对象可以继续使用</p>
<p>close:先刷新缓冲区,然后通知系统释放资源,流对象就不能使用了</p>
<h3 id="写出其他数据-写数据的其他方法"><a href="#写出其他数据-写数据的其他方法" class="headerlink" title="写出其他数据(写数据的其他方法)"></a>写出其他数据(写数据的其他方法)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/*
    字符输出流写数据的其它方法
    void write(char[] cbuf)
    void write(char[] cbuf, int off, int len)
    void write(String str)写入字符串
    void write(String str, int off, int len)写入字符串的一部分
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Writer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>

        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只写一个1,注意最后一个len索引处的值是不会写进去的</span>
        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="字符流的续写和换行-和字节流一模一样"><a href="#字符流的续写和换行-和字节流一模一样" class="headerlink" title="字符流的续写和换行(和字节流一模一样)"></a>字符流的续写和换行(和字节流一模一样)</h3><p>参考字节流</p>
<h2 id="IO异常的处理"><a href="#IO异常的处理" class="headerlink" title="IO异常的处理"></a>IO异常的处理</h2><p>这里不用throws来抛出了,使用try catch来处理异常部分</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>

<span class="token comment">/*
    在JDK1.7之前可以使用try catch finally来处理流的异常
    格式:
        try&#123;
            可能会产生异常的代码
           &#125; catch(异常类变量 变量名)&#123;
            异常的处理逻辑
            &#125; finally&#123;
            一定会执行的代码(一般放资源释放的代码)
            &#125;
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01TryCatch</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//提高变量的作用域,让finally可以使用</span>
        <span class="token comment">//变量在定义的时候可以没有值,但是使用的时候必须有值</span>
        <span class="token comment">//所以这里必须先赋一个初始值</span>
        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"g.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//如果创建对象失败了,fw的默认值是null,null是不能调用方法的,它会抛出空指针异常</span>
            <span class="token comment">//所以我们再做一个优化,如果fw不等于null,则释放资源</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fw<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//close()方法本身也是有异常的,所以在这个finally里面还要单独try catch一次</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>JDK7之后的写法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
    JDK7的新特性
    在try的后边可以增加一个(),在括号中可以定义流对象
    那么这个流对象的作用域就在try中有效
    try中的代码执行完毕,会自动把流对象释放,就不用写finally了
    格式:
        try(定义流对象1;定义流对象2;定义流对象3;....)&#123; //可以定义多个流对象
            可能会产生异常的代码
        &#125; catch(异常类变量 变量名)&#123;
            异常的处理逻辑
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>JDK9的新特性</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	在try的前面可以定义流对象
	在try后面的()中可以直接引入流对象的名称(变量名)
	在try代码执行完毕之后流对象也会被自动释放掉
	格式:
		A a = new A();
		B b = new B();
		try(a;b)&#123;
		
		&#125; catch()&#123;
		
		&#125;
		但是由于最上面的定义定义在了外面,所以主函数还是要丢出一个FileNotFoundException
		JDK9的新特性没有7的好用
		(其实我感觉原始的最好用)
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>GUI编程——贪吃蛇开发实战</title>
    <url>/2020/06/23/GUI%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h3><p>组件</p>
<ul>
<li><p>窗口</p>
</li>
<li><p>弹窗</p>
</li>
<li><p>面板<span id="more"></span></p>
</li>
<li><p>文本框</p>
</li>
<li><p>列表框</p>
</li>
<li><p>按钮</p>
</li>
<li><p>图片</p>
</li>
<li><p>监听事件</p>
</li>
<li><p>鼠标</p>
</li>
<li><p>键盘事件</p>
</li>
<li><p>破解工具  </p>
</li>
</ul>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>GUI核心技术：两个相关类 Swing AWT 但是不流行，</p>
<ol>
<li><p>因为不美观</p>
</li>
<li><p>需要JRE环境</p>
</li>
</ol>
<p>为什么我们要学习？</p>
<ol>
<li>它是MVC架构的基础</li>
<li>可以写出自己心中想要的一些小工具</li>
<li>工作时候可能需要维护到Swing界面（概率很小）</li>
<li>了解MVC架构，了解监听器</li>
</ol>
<h2 id="2-AWT"><a href="#2-AWT" class="headerlink" title="2.AWT"></a>2.AWT</h2><h3 id="2-1-AWT介绍"><a href="#2-1-AWT介绍" class="headerlink" title="2.1 AWT介绍"></a>2.1 AWT介绍</h3><ol>
<li>抽象窗口工具，包含了很多的类和接口  </li>
</ol>
<ul>
<li><p>GUI:图形用户界面编程</p>
</li>
<li><p>Eclipse就是用Java写的</p>
</li>
</ul>
<ol start="2">
<li>元素：窗口，按钮，文本框</li>
<li>java.awt包下</li>
</ol>
<h3 id="2-面板-panel"><a href="#2-面板-panel" class="headerlink" title="2.面板 panel"></a>2.面板 panel</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yao<span class="token punctuation">.</span>lesson01</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">WindowAdapter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">WindowEvent</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">WindowListener</span><span class="token punctuation">;</span>

<span class="token comment">//Panel可以看成是一个空间，但是不能单独存在</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPanel</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//存在一个布局的概念</span>
        <span class="token class-name">Panel</span> panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置布局</span>
        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//坐标</span>
        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Panel设置坐标</span>
        panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//frame.add(panel)</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>

        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//监听窗口关闭事件  System.exit(0)</span>
        <span class="token comment">//适配器模式:</span>
        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//窗口关闭的时候需要做的事情</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-布局管理器"><a href="#3-布局管理器" class="headerlink" title="3.布局管理器"></a>3.布局管理器</h3><ul>
<li>流式布局</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yao<span class="token punctuation">.</span>lesson01</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFlowLayout</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//组件-按钮</span>
        <span class="token class-name">Button</span> button01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Button</span> button02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Button</span> button03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置为流式布局</span>
        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button01<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button02<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button03<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>东西南北中</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yao<span class="token punctuation">.</span>lesson01</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBorderLayout</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"TestBorderLayout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Button</span> east <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Button</span> west <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"West"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Button</span> south <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"South"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Button</span> north <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"North"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Button</span> center <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"Center"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>east<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>west<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>south<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>north<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>center<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>表格</li>
</ul>
<h3 id="4-事件监听"><a href="#4-事件监听" class="headerlink" title="4.事件监听"></a>4.事件监听</h3><p>事件监听：当某个事情发生的时候，干什么？</p>
<p>对于点一个按钮然后就想在控制台输出内容的可以用<code>frame.addActionListener</code>对于点击×就可以关闭窗口的监听可以用<code>frame.addWindowListener</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestActionEvent</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//按下按钮的时候出发一些事件</span>
        <span class="token class-name">Frame</span> frame  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//因为addActionListener需要一个ActionListener，所以我们需要构造一个ActionListener</span>
        <span class="token comment">//怎么构造呢？接口就写实现类</span>
        <span class="token class-name">MyActionListener</span> myActionListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>myActionListener<span class="token punctuation">)</span><span class="token punctuation">;</span>

        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">windowClose</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//关闭窗体的事件</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">windowClose</span><span class="token punctuation">(</span><span class="token class-name">Frame</span> frame<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
            <span class="token comment">//这是一个匿名内部类，里面重写了一个方法</span>
            <span class="token comment">//方法的参数是WindowEvent类</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//事件监听</span>
<span class="token keyword">class</span> <span class="token class-name">MyActionListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span>  
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<p>多个按钮共享一个事件：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestActionListener02</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"开始，停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//两个按钮共用同一个监听</span>
        <span class="token comment">//开始    停止</span>
        <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Button</span> button2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        button2<span class="token punctuation">.</span><span class="token function">setActionCommand</span><span class="token punctuation">(</span><span class="token string">"button-pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MyMonitor</span> myMonitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        button1<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>myMonitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        button2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>myMonitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//两个按钮共用一个监听事件，所以我们现在写一个监听事件</span>

        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button1<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button2<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">MyMonitor</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按钮被点击了：msg"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="5-简易计算器，组合-内部类回顾复习"><a href="#5-简易计算器，组合-内部类回顾复习" class="headerlink" title="5.简易计算器，组合+内部类回顾复习"></a>5.简易计算器，组合+内部类回顾复习</h5><p>oop原则：优先使用组合，组合大于继承</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简易计算器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCalc</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//计算器类</span>
<span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//3个文本框</span>
        <span class="token class-name">TextField</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
        <span class="token class-name">TextField</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
        <span class="token class-name">TextField</span> num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>

        <span class="token comment">//1个按钮</span>
        <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCalculatorListener</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1个标签</span>
        <span class="token class-name">Label</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//单纯的一个加号，其余什么也没有</span>

        <span class="token comment">//布局</span>
        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//监听器类</span>
<span class="token keyword">class</span> <span class="token class-name">MyCalculatorListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//获取三个变量</span>
    <span class="token keyword">private</span> <span class="token class-name">TextField</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyCalculatorListener</span><span class="token punctuation">(</span><span class="token class-name">TextField</span> num1<span class="token punctuation">,</span> <span class="token class-name">TextField</span> num2<span class="token punctuation">,</span> <span class="token class-name">TextField</span> num3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num1 <span class="token operator">=</span> num1<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num2 <span class="token operator">=</span> num2<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num3 <span class="token operator">=</span> num3<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//1.获得加数与被加数</span>
        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//2.等于时将这两个值进行加法运算后放到第三个框</span>
        num3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.清除前两个框</span>
        num1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        num2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一般狂神偏好的步骤：</p>
<ol>
<li>先把所有组件写出来</li>
<li>把监听器写出来</li>
<li>把布局写出来  </li>
</ol>
<p>自己总结了一个大体思路：  </p>
<ol>
<li>写一个主方法类，里面调用窗口类</li>
<li>写一个窗口类，里面有基本的布局以及监听器</li>
<li>写一个监听器类，并在监听器类中组合窗口类，将窗口类对象传入监听器的抽象方法中，并用button调用这个方法，这样在点击按钮的时候会启动监听，执行这个方法里面的内容  </li>
</ol>
<p>组合方式的代码：  </p>
<p>（完全改成了面向对象的写法）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简易计算器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCalc</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//计算器类</span>
<span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//属性</span>
    <span class="token class-name">TextField</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">;</span>
    <span class="token comment">//方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//3个文本框</span>
         num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
         num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
         num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
        <span class="token comment">//1个按钮</span>
        <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1个标签</span>
        <span class="token class-name">Label</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//单纯的一个加号，其余什么也没有</span>


        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCalculatorListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//布局</span>
        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">//监听器类</span>
<span class="token keyword">class</span> <span class="token class-name">MyCalculatorListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//获取计算器这个对象，典型的在一个类中组合另外一个类</span>
    <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>



    <span class="token keyword">public</span> <span class="token class-name">MyCalculatorListener</span><span class="token punctuation">(</span><span class="token class-name">Calculator</span> calculator<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>calculator <span class="token operator">=</span> calculator<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//1.获得加数与被加数</span>
        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//2.等于时将这两个值进行加法运算后放到第三个框</span>
        calculator<span class="token punctuation">.</span>num3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.清除前两个框</span>
        calculator<span class="token punctuation">.</span>num1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calculator<span class="token punctuation">.</span>num2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    </p>
<p>内部类写法（更好的包装）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简易计算器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCalc</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//计算器类</span>
<span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//属性</span>
    <span class="token class-name">TextField</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">;</span>
    <span class="token comment">//方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//3个文本框</span>
         num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
         num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
         num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符数</span>
        <span class="token comment">//1个按钮</span>
        <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1个标签</span>
        <span class="token class-name">Label</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//单纯的一个加号，其余什么也没有</span>


        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCalculatorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//布局</span>
        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//监听器类</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyCalculatorListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//1.获得加数与被加数</span>
            <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment">//2.等于时将这两个值进行加法运算后放到第三个框</span>
            num3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//3.清除前两个框</span>
            num1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            num2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>优点：连caculator都不用再单独传一遍，因为内部类的最大优点就是可以畅通无阻地访问外部类的属性和方法，降低了编码成本  </p>
<h3 id="7-画笔paint"><a href="#7-画笔paint" class="headerlink" title="7.画笔paint"></a>7.画笔paint</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPaint</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">MyPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyPaint</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//画笔</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">// super.paint(g);</span>
        <span class="token comment">//画笔，需要有颜色</span>
        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//实心的圆</span>
        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//养成习惯，画笔用完将他还原到最初的颜色（黑色）</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>画笔很简单，重写Frame类的paint方法即可。后面会讲到与鼠标监听配合使用  </p>
<h3 id="8-鼠标监听"><a href="#8-鼠标监听" class="headerlink" title="8 .鼠标监听"></a>8 .鼠标监听</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20200525115415473.png" alt="image-20200525115415473"></p>
<p>repaint()鼠标每次点击就重画一次</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试鼠标监听事件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMouseListener</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token string">"画图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//画画需要画笔，需要监听鼠标当前的位置，需要一个集合来存储这个点</span>
    <span class="token class-name">ArrayList</span> points <span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//我们需要一个东西来存鼠标点击的点</span>
        points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//鼠标监听器针对当前这个窗口</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMouseListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//画画，需要监听鼠标的事件</span>
        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//添加一个点到界面上</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPaint</span><span class="token punctuation">(</span><span class="token class-name">Point</span> point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        points<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyMouseListener</span> <span class="token keyword">extends</span>  <span class="token class-name">MouseAdapter</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//适配器模式不用重写接口中所有的方法，把继承接口改为继承其实现类</span>
        <span class="token comment">//鼠标，按下，弹起，按住不放</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">mousePressed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MyFrame</span> myFrame <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyFrame</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//这里我们点击的时候就会在界面上产生一个点</span>
            <span class="token comment">//这个点就是鼠标的点：</span>
            myFrame<span class="token punctuation">.</span><span class="token function">addPaint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//每次点击鼠标都需要重画一遍</span>
            myFrame<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先有一个窗口，窗口内有一个画笔，然后有一个鼠标监听器（继承了鼠标的适配器），他们三个都是空的。然后我们需要一个缓冲的地方，就是这个鼠标的点应该存在哪里。于是我们就写了一个存点的point集合.这个集合所有人都要用，所以我们把它提到最高。然后这个点要开始放了，我们要把当前鼠标点击的位置给存进来。存到集合里面，然后我们的集合就把它给读取出来。然后我们发现第一次读取它是白的，点了没反应，因为我们点击的时候它已经画完了，我们需要它不断地重新画。 </p>
<h4 id="详细注释版鼠标监听画笔"><a href="#详细注释版鼠标监听画笔" class="headerlink" title="详细注释版鼠标监听画笔"></a>详细注释版鼠标监听画笔</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//鼠标监听事件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMouseListener</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token string">"画图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//自己的类</span>
<span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//画画需要画笔，需要监听鼠标当前的位置，需要一个集合来存储鼠标画出来的点</span>
    <span class="token class-name">ArrayList</span> points<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//存鼠标点的点</span>
        <span class="token comment">//因为下面的类可能用得到这个集合，所以把它的定义放到最高，然后在这里初始化即可</span>
        points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



        <span class="token comment">//鼠标监听器，正对这个窗口</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMouseListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里面需要传入的是一个MouseListener的实现类对象</span>
        <span class="token comment">//MouseListener也是一个接口，里面有click，press等等与鼠标监听相关的抽象方法</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//画画，需要监听鼠标的事件</span>
        <span class="token comment">//这里面画出来的每一个点都需要与鼠标绑定</span>
        <span class="token comment">//鼠标怎么来了，需要添加一个鼠标的监听器</span>

        <span class="token comment">//画笔画出来的东西要根据鼠标当前的位置来</span>
        <span class="token comment">//所以我们现在需要一个东西来存点</span>
        <span class="token class-name">Iterator</span> it <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//ArrayList集合没有指定泛型时默认的泛型是Object型，所以需要强转</span>
            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//上面这一步是什么意思呢？</span>
            <span class="token comment">//我们画出来的点不一定是一个点，而是一个很小的圆形</span>
            <span class="token comment">//所以我们就用画圆形的方法</span>
            <span class="token comment">//上面迭代器把ArrayList集合中的Object类型元素迭代出来时已经强转成了Point类型</span>
            <span class="token comment">//我们就用point提供的坐标来传入画圆形的方法中，这样一个一个的小圆形就被画出来了，也就是我们看到的点</span>

        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token comment">//添加一个点到界面上面，how？用paint把点画上去</span>
    <span class="token comment">//怎么画？先把集合中的点迭代出来再画</span>
    <span class="token comment">//但是Frame窗口怎么才能接收到我们传进来的点呢？（传进Frame中才能执行画笔方法画画）</span>
    <span class="token comment">//通过一个中间商,自己写一个add点的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPoint</span><span class="token punctuation">(</span><span class="token class-name">Point</span> point<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        points<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyMouseListener</span> <span class="token keyword">extends</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//如果直接实现MouseListener接口则需要重写一大堆抽象方法</span>
        <span class="token comment">//根据适配器模式，我们可以继承他的子类，这样可以不用重写那么多方法</span>
        <span class="token comment">//鼠标有三个动作：按下，按住不动，弹起</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">MyFrame</span> myFrame <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">MyFrame</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//这里谁调用的它就是e.getSource()就返回谁</span>
            <span class="token comment">//所以我们这里用多态创建一个引用变量来接收它</span>
            <span class="token comment">//注意：getSource()方法返回的是一个Object类型的对象，所以需要使用多态，同时还要向下转型</span>
            <span class="token comment">//这里我们点击的时候就会在我们传进来的窗口的界面上产生一个点</span>
            <span class="token comment">//现在我们要做的就是把这个被添加到窗口中的点显现出来</span>
            <span class="token comment">//这个点要被画出来，所以现在我们要把思路转到画笔这里来</span>
            <span class="token comment">//这个点就是鼠标的点</span>

            <span class="token comment">//通过这个方法把点传到窗口的存点集合里面去</span>
            myFrame<span class="token punctuation">.</span><span class="token function">addPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//每次点击鼠标都需要重画一遍，不然往集合中画一次点程序就结束了</span>
            myFrame<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//这个方法可以在画完点后刷新一次</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="9-窗口监听"><a href="#9-窗口监听" class="headerlink" title="9.窗口监听"></a>9.窗口监听</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestWindowListener</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">WindowFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//写一个自己的窗口</span>
<span class="token keyword">class</span> <span class="token class-name">WindowFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">WindowFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//addWindowListener(new MyWindowListener());</span>

        <span class="token comment">//也可以直接通过匿名内部类进行对象创建</span>

        <span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                              <span class="token annotation punctuation">@Override</span>
                              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">windowClosing</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token punctuation">&#125;</span>



                              <span class="token annotation punctuation">@Override</span>
                              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                  <span class="token class-name">WindowFrame</span> source <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WindowFrame</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                  <span class="token comment">//此方法返回调用它的Object类型的对象</span>
                                  source<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"被激活了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WindowActivated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token punctuation">&#125;</span>
                          <span class="token punctuation">&#125;</span>
           <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

   <span class="token comment">//在内部写一个自己的监听器</span>
  <span class="token comment">/* class MyWindowListener extends WindowAdapter &#123;
       @Override
       public void windowClosing(WindowEvent e) &#123;
           setVisible(false);
           //解释一下为啥要写这一步
           //这一步可以达到的效果就是隐藏窗口
           //通过按钮隐藏窗口

           System.exit(0); //正常退出，非正常退出把0变成1即可
       &#125;
   &#125;*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="10-键盘监听"><a href="#10-键盘监听" class="headerlink" title="10.键盘监听"></a>10.键盘监听</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestKeyListener</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">KeyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">KeyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">KeyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//获得键盘按下的是哪一个键</span>
               <span class="token keyword">int</span> keyCode <span class="token operator">=</span>  e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//这个方法可以获取当前按压的键盘对应的一个值</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>keyCode <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token comment">//VK_UP代表的是上键</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你按下了上键"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token comment">//根据按下的不同操作，产生不同的结果</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>##3.Swing编程</p>
<ol>
<li>GUI编程就是两类，AWT和Swing</li>
<li>AWT相当于是底层，Swing相当于进行封装</li>
<li>AWT画出来的界面稍微难看点，Swing封装后好看点</li>
</ol>
<p>3.1 窗口，面板</p>
<p>和之前的全部一样，只是加了一个J在前面，Frame编程JFrame</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JFrameDemo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//init();方法，用作初始化</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"这是一个JFrame窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置一些文字 JLabel</span>
        <span class="token class-name">JLabel</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"欢迎来到图书馆！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
        

        <span class="token comment">//容器实例化</span>
        <span class="token comment">//获得一个容器，容器里面的颜色才是窗口真正的颜色</span>
        <span class="token class-name">Container</span> contentPane <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        contentPane<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//关闭事件，现在不用写监听器了，因为里面有更高级的方法</span>
        <span class="token comment">//但是了解监听这个概念是必要的，MVC基础</span>
        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认关闭操作</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//建立一个窗口</span>
        <span class="token keyword">new</span> <span class="token class-name">JFrameDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//发现程序运行后窗口的颜色没有设置成功，因为需要一个容器</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2弹窗Dialog"><a href="#3-2弹窗Dialog" class="headerlink" title="3.2弹窗Dialog"></a>3.2弹窗Dialog</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DialogDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">DialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//JFrame放东西需要容器</span>
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//绝对布局</span>
        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//按钮</span>
        <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"点击弹出一个对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建对象</span>
        button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//点击这个按钮的时候，弹出一个弹窗</span>
        <span class="token comment">//需要一个监听事件</span>
        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//监听器</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//弹窗</span>
                <span class="token keyword">new</span> <span class="token class-name">MyDialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">new</span> <span class="token class-name">DialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//class MyDialog</span>
<span class="token keyword">class</span> <span class="token class-name">MyDialogDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyDialogDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"秦老师带你学Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：弹窗不用添加关闭事件，它自己有这个功能</p>
<h3 id="Icon，ImageIcon标签"><a href="#Icon，ImageIcon标签" class="headerlink" title="Icon，ImageIcon标签"></a>Icon，ImageIcon标签</h3><p>label</p>
<pre class="line-numbers language-none"><code class="language-none">new JLabel(&quot;xxx&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 图标Icon</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//图标是一个接口，需要一个实现类，正常的图标需要写在一个窗口里面，所以我们需要去继承一个类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IconDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Icon</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">IconDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">IconDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">IconDemo</span> iconDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IconDemo</span><span class="token punctuation">(</span>
                <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给图标初始化</span>
        <span class="token comment">//图标会放在标签上，也可以放在按钮上</span>
        
        <span class="token comment">//label是放在当前的这个窗体中</span>
        <span class="token comment">//当前的IconDemo这个类也实现了图标接口，所以也可以把它看成一个图标</span>
        <span class="token class-name">JLabel</span> jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"iconTest"</span><span class="token punctuation">,</span> iconDemo<span class="token punctuation">,</span> <span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//可也吧这个图标传到一个标签上，并用Swing常量设置它的位置</span>

        <span class="token comment">//</span>
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//省去this，因为调用当前所在的init方法需要一个对象，默认的就是这个对象</span>
        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">IconDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token class-name">Component</span> c<span class="token punctuation">,</span> <span class="token class-name">Graphics</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(还有一个获取图片路径的icon没写，倒时候再写，今天吃得太饱了)</p>
<h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h3><p>JPanel</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JPanelDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token class-name">JPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//后面两个参数的意思是间距</span>

        <span class="token class-name">JPanel</span> panel1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//JPanel面板的构造方法中就有一个设置布局的参数</span>

        panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>panel1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">JPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="设置可以滚动的JScrollPanel"><a href="#设置可以滚动的JScrollPanel" class="headerlink" title="设置可以滚动的JScrollPanel"></a>设置可以滚动的JScrollPanel</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JScrollPanelDemo</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">JScrollPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//文本域</span>
        <span class="token class-name">JTextArea</span> textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里是设置你写文本的这个范围是20行，50列（一个字算一行一列）</span>
        textArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"欢迎学习Java！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置默认文本</span>
        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Scroll面板</span>
        <span class="token class-name">JScrollPane</span> scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把文本域丢到滚动面板里面</span>
        <span class="token comment">//把滚动面板丢到容器里面</span>
        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollPane<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">JScrollPanelDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><ul>
<li><p>图片按钮</p>
</li>
<li><p>```java<br>public class JButtonDemo01 extends JFrame {</p>
<pre><code>public JButtonDemo01() &#123;
    Container container = this.getContentPane();
    //想获得当前类所在包下的图片，通过当前这个类.class.getResource(&quot;图片名&quot;)
    //它返回的是一个URL值（图片类型）
    URL resource = JButtonDemo01.class.getResource(&quot;作业.png&quot;);
    //将一个图片变为一个图标
    Icon icon = new ImageIcon(resource);
    //要把这个URL传到一个ImageIcon里面，icon就是一个图标

    //把这个图标放在一个按钮上
    JButton button = new JButton();
    button.setIcon(icon);
    //Button除了setText还可以setIcon(前者是设置文本域，后者是设置图标)

    //当你的鼠标移动到一个图标的位置时他会有那种出现的小边框提示你（也可以是文本框，悬浮窗之类的）
    button.setToolTipText(&quot;图片按钮&quot;);
    //这是产生一个提示的文本

    //add
    container.add(button);
    this.setVisible(true);
    this.setBounds(100,100,500,300);
    this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
&#125;



public static void main(String[] args) &#123;
    JButtonDemo01 jbd1 = new JButtonDemo01();
&#125;
</code></pre>
<p>}</p>
<pre class="line-numbers language-none"><code class="language-none">
    这个图片按钮的URL路径必须是全英文，如果有中文则会报空指针异常

  

+ 单选按钮

&#96;&#96;&#96;java
public class JButtonDemo02 extends JFrame &#123;
    public JButtonDemo02() &#123;
        Container container &#x3D; this.getContentPane();
        

        &#x2F;&#x2F;单选框，在JButton中间加一个Radio就是单选型Button
        JRadioButton radioButton01 &#x3D; new JRadioButton(&quot;JRadioButton01&quot;);
        JRadioButton radioButton02 &#x3D; new JRadioButton(&quot;JRadioButton02&quot;);
        JRadioButton radioButton03 &#x3D; new JRadioButton(&quot;JRadioButton03&quot;);

        &#x2F;&#x2F;由于单选框只能选择一个，所以我们一般会将其分组
        &#x2F;&#x2F;在一个组内的button，只能被选择一个
        &#x2F;&#x2F;下面是对Button进行分组的语法
        ButtonGroup group &#x3D; new ButtonGroup();
        group.add(radioButton01);
        group.add(radioButton02);
        group.add(radioButton03);
        &#x2F;&#x2F;这样的话在这个组中只能选择一个
        &#x2F;&#x2F;假设不分组则可以多选

        container.add(radioButton01,BorderLayout.CENTER);
        container.add(radioButton02,BorderLayout.NORTH);
        container.add(radioButton03,BorderLayout.SOUTH);

        
        this.setVisible(true);
        this.setBounds(100,100,500,300);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    &#125;

    public static void main(String[] args) &#123;
        new JButtonDemo02();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<ul>
<li><p>复选按钮</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JButtonDemo03</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token class-name">JButtonDemo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//多选框的叫做CheckBox</span>
            <span class="token class-name">JCheckBox</span> checkbox01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JCheckBox</span> checkbox02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JCheckBox</span> checkbox03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkbox01<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
            container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkbox02<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
            container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>checkbox03<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>



            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">JButtonDemo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>下拉框</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJComboBoxDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">TestJComboBoxDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JComboBox</span> status <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        status<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"即将上映"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        status<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"正在上映"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        status<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"已下架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        status<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//null就代表框里面没有内容</span>

        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestJComboBoxDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>列表框</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComboBoxDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token class-name">TestComboBoxDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//生成列表的内容，一般内容是一个数组</span>
        <span class="token comment">//稀疏数组压缩数据用</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contents <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token comment">//创建一个列表</span>
        <span class="token class-name">JList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//列表中需要放内容，直接把内容丢到构造器里面就ok</span>

        <span class="token comment">//然后把列表添加到容器中即可</span>
        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//list不仅可以是数组，也可以是集合</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestComboBoxDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>应用场景<ul>
<li>下拉框：选择地区，或者一些单个选项</li>
<li>列表：展示一些信息，一般是动态扩容的（用集合）  </li>
</ul>
</li>
</ul>
<h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><ol>
<li>文本框</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTextDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">TestTextDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//文本框是JTextField</span>
        <span class="token class-name">JTextField</span> textField01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JTextField</span> textField02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//后面的这个参数是规定字符数</span>

        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textField01<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textField02<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//此时是由一个默认布局的，我们必须给它布置一个布局,在文本域参数后面直接写上布局就OK</span>
        <span class="token comment">//不知道为什么在这里设置流式布局会出错，难道流式布局只能通过setLayout方法来布置？</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>





    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestTextDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>密码框</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//密码框</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTextDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">TestTextDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//密码框的名称是JPasswordField，密码框会自动把文本变成点号</span>
        <span class="token comment">//你也可以设置为其他符号，比如星号</span>
        <span class="token class-name">JPasswordField</span> passwordField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//passwordField.setEchoChar('*');</span>

        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>passwordField<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">WindowConstants</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">TestTextDemo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>文本域一般可以配合面板使用</p>
<h2 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h2><p>帧，如果时间片足够小，就是动画。一秒30帧对人的眼睛来说已经是动画了。帧连起来是动画，拆开就是静态的图片</p>
<p>键盘监听</p>
<p>定时器，里面有一个类叫做Timer，他会刷新每秒的帧数  </p>
<p>游戏的主启动类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//游戏的主启动类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartGames</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1.绘制一个静态窗口  JFrame</span>
        <span class="token class-name">JFrame</span> jFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"贪吃蛇小游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置界面大小</span>
        jFrame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置界面大小</span>
        jFrame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//窗口大小不可改变</span>
        jFrame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置关闭事件，游戏可以关闭了</span>
        <span class="token comment">//正常的游戏都应该放在游戏的面板上</span>
        <span class="token comment">//2.面板 JPanel 可以加入到frame窗口中</span>
        jFrame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GamePanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        jFrame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让窗口展现出来</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>游戏面板类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//游戏的面板</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GamePanel</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">KeyListener</span><span class="token punctuation">,</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//蛇会移动，还有坐标，这个时候我们需要去定义一些关于蛇的数据结构</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>  <span class="token comment">//蛇的长度</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snakeX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//蛇的x坐标 25*24</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snakeY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//蛇的x坐标 25*20</span>
    <span class="token class-name">String</span> fx<span class="token punctuation">;</span> <span class="token comment">//初始方向向右</span>
    <span class="token comment">//游戏当前的状态：开始，停止</span>
    <span class="token keyword">boolean</span> isStart <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//默认游戏不开始</span>

    <span class="token keyword">boolean</span> isFail <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//游戏失败状态</span>

    <span class="token comment">//食物的坐标</span>
    <span class="token keyword">int</span> foodX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> foodY<span class="token punctuation">;</span>
    <span class="token comment">//还需要一个随机数种子，因为食物的坐标是随机出现的</span>
    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认的随机数种子</span>

    <span class="token keyword">int</span> score<span class="token punctuation">;</span> <span class="token comment">//成绩</span>


    <span class="token comment">//定时器，只需要实现ActionListener接口,重写一个定时的方法就可以了，定时器是一个Timer类，new一个就可以了</span>
    <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//解释一下参数，后面的this代表被定时器监听的对象</span>
    <span class="token comment">//前面的delay代表多少毫秒刷新一次，100毫秒就是一秒刷新十次</span>
    <span class="token comment">//不要设置的太快，否则小蛇就直接起飞了，跟QQ堂外挂一样</span>

    <span class="token keyword">public</span> <span class="token class-name">GamePanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获得焦点和键盘事件</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFocusable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获得焦点事件</span>
        <span class="token comment">//焦点是什么意思，，昨天将文本框时解释过</span>
        <span class="token comment">//你在一个文本框内操作的时候它会聚焦在这个文本框上，</span>
        <span class="token comment">// 你鼠标一旦离开文本框点击了其它东西那么它便不再聚焦在这里面</span>

        <span class="token comment">//获取键盘事件</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//由于键盘监听事件写在当前这个类中，所以直接this</span>
        <span class="token comment">//如果是写在其他类或内部类中，则需要去new一个监听器</span>

        timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//游戏一开始就启动定时器，相当于开始执行小蛇移动的监听器方法</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//初始化方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//头的初始坐标</span>
        snakeX<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>
        snakeY<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//第一个身体的初始坐标</span>
        snakeX<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
        snakeY<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//第二个身体的初始坐标</span>
        fx <span class="token operator">=</span> <span class="token string">"R"</span><span class="token punctuation">;</span> <span class="token comment">//初始方向向右</span>
        <span class="token comment">//养成一个习惯，数据的初始化都放在初始化方法里，默认的变量（定义）放在最上面，这样分开比较好</span>

        <span class="token comment">//初始化食物坐标数据</span>
        foodX <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token operator">*</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//之前计算过X总共就34个格子，这个代表的是不超过34的整数</span>
        foodY <span class="token operator">=</span> <span class="token number">75</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token operator">*</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Y总共有24个格子</span>

        <span class="token comment">//初始化成绩</span>
        score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//画板： 画界面，画蛇</span>
    <span class="token comment">//绘制面板，我们游戏中的所有东西都使用这个画笔来画</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">paintComponent</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paintComponent</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清屏，不用的话也可以，但是会出现闪屏</span>

        <span class="token comment">//绘制静态的面板,注意一切绘画操作都是在这个重写的绘制组件方法里面完成的</span>
        <span class="token class-name">Data</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span><span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绘制头部广告栏</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置面板的背景颜色</span>
        <span class="token comment">//在下面绘制一个黑色的长方形矩形作为游戏界面</span>
        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">850</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//画积分</span>
        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"长度"</span> <span class="token operator">+</span> length<span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"分数"</span> <span class="token operator">+</span> score<span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//画食物</span>
        <span class="token class-name">Data</span><span class="token punctuation">.</span>food<span class="token punctuation">.</span><span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>g<span class="token punctuation">,</span>foodX<span class="token punctuation">,</span>foodY<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//把小蛇画上去</span>
        <span class="token comment">//Icon类的变量可以调用一个叫做paintIcon的方法，第一个参数穿传要被画上去的面板，</span>
        <span class="token comment">//后面一个参数传画笔，最后两个参数传坐标</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Data</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//蛇头初始化向右，需要通过方向来判断</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Data</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"U"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Data</span><span class="token punctuation">.</span>up<span class="token punctuation">.</span><span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Data</span><span class="token punctuation">.</span>down<span class="token punctuation">.</span><span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>


        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Data</span><span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">paintIcon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> snakeX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> snakeY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//用上面for循环的方式则下面两行就用不上了</span>
        <span class="token comment">//Data.body.paintIcon(this,g,snakeX[1],snakeY[1]); //蛇的第一个身体</span>
        <span class="token comment">//Data.body.paintIcon(this,g,snakeX[2],snakeY[2]); //蛇的第二个身体</span>


        <span class="token comment">//游戏状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStart <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将画文字的画笔设置为白色</span>
            g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置字体的方法</span>
            g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"按下空格开始游戏！"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//画文字的方法</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"游戏失败，按下空格重新开始"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>



    <span class="token comment">//键盘监听器</span>
    <span class="token comment">//最暴力的方式，直接让当前面板实现键盘监听器接口，不用单独再写一个类，连内部类都不用写</span>
    <span class="token comment">//键盘监听事件</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//首先监听空格，要获得当前键盘的keyCode</span>
        <span class="token keyword">int</span> keyCode <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获得键盘按键是哪一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_SPACE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//如果按下的是空格键</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>isFail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//重新开始</span>
                isFail <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                isStart <span class="token operator">=</span> <span class="token operator">!</span>isStart<span class="token punctuation">;</span> <span class="token comment">//取反操作</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//就像那天的画小圆点一样，监测完了键盘监听事件之后要repaint()</span>
            <span class="token comment">//repaint()完了之后相当于原本屏幕上面的那行字就消失了，因为panel进行了repaint</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//设置键盘监听控制小蛇上下左右移动</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fx <span class="token operator">=</span> <span class="token string">"U"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_DOWN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fx <span class="token operator">=</span> <span class="token string">"D"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_LEFT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fx <span class="token operator">=</span> <span class="token string">"L"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_RIGHT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fx <span class="token operator">=</span> <span class="token string">"R"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">//下面两个用不上的抽象方法放着就行了</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//定时的事件监听方法</span>
        <span class="token comment">//事件监听需要通过固定的时间来刷新，比如1秒10次（频率可以自己调）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStart <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> isFail <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果游戏是开始状态，就让小蛇动起来</span>

            <span class="token comment">//总共有两个监听，一个键盘监听，一个事件监听，吃食物放在事件监听里面</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> foodX <span class="token operator">&amp;&amp;</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> foodY<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                length<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//长度加一再重新生成食物即可</span>
                score <span class="token operator">=</span> score <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//每吃一个分数加10</span>
                foodX <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token operator">*</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                foodY <span class="token operator">=</span> <span class="token number">75</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token operator">*</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>


            <span class="token comment">//动就是让小蛇的坐标一直加，先默认右移</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                snakeX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> snakeX<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//向前移动一节</span>
                snakeY<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> snakeY<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//向前移动一节</span>
                <span class="token comment">//最开始头是在右边的，但是头是数组最开始的那一个</span>
                <span class="token comment">//所以头动了就让跟着的一节身体移动到头的位置</span>
                <span class="token comment">//然后然后让接下来的第二届身体移动到第一节身体的位置</span>
                <span class="token comment">//第一节身体变到第0节身体，第二节身体变到第一节身体</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//控制走向（身体不用控制，后面一节自动到前面一节，只用控制脑袋的走向即可</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">//头部移动</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">850</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token comment">//边界判断</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">25</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">850</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token comment">//边界判断</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"U"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">650</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">650</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">//失败判定，撞到自己就算失败</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>snakeX<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> snakeX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> snakeY<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> snakeY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    isFail <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//变完了就需要让它重画一下</span>
            timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定时器开启</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>数据中心</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//一般写游戏都要有一个单独的数据中心，我们一般用一个单独的类来当作数据中心</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//头部的图片   URL：定位图片地址</span>
    <span class="token comment">//相对路径：直接写文件名字+后缀</span>
    <span class="token comment">//绝对路径：要加“/” 相当于当前的项目</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> headerURL <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/statics/header.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//利用图片的地址当作参数，创建图片的图标</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImageIcon</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>headerURL<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> bodyURL <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/statics/body.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> upURL <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/statics/up.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> downURL <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/statics/down.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> leftURL <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/statics/left.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> rightURL <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/statics/right.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">URL</span> foodURL <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/statics/food.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImageIcon</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>bodyURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImageIcon</span> up <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>upURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImageIcon</span> down <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>downURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImageIcon</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>leftURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImageIcon</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>rightURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImageIcon</span> food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>foodURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>整体思路</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*这个贪吃蛇总共大致步骤就是四个
1.定义数据
2.画上去
3.监听事件
    键盘
    事件
    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>Java集合</title>
    <url>/2020/07/29/Java%E9%9B%86%E5%90%88%E9%87%8D%E6%96%B0%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%AD%A6%EF%BC%89/</url>
    <content><![CDATA[<h3 id="Java——集合"><a href="#Java——集合" class="headerlink" title="Java——集合"></a>Java——集合</h3><p>学习集合的目标</p>
<ol>
<li><p>会使用集合存储数据</p>
</li>
<li><p>会遍历集合，把数据取出来</p>
</li>
<li><p>掌握每种集合的特性</p>
<span id="more"></span></li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210206112458058.png" alt="image-20210206112458058" style="zoom: 67%;" />





<h3 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h3><ol>
<li><p>Iterator接口相当于是一个通用的取出集合中元素的方法。之前用for循环取出是因为将集合中的元素使用toArray（）方法转换成了数组，不然没法取出。</p>
</li>
<li><p>在取出元素之前，先判断集合中是否有元素，如果有则取出，没有则结束。这就是迭代器原理    </p>
</li>
<li><p>使用Iterator中的hasNext（）方法判断其中是否还有下一个元素，使用Next（）方法将元素取出</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * java.util.Iterator接口
 * 有两个常用的方法hasNext()与Next()
 * Iterator是一个接口，无法直接使用，需要使用其实现类对象
 * Collection集合中有一个方法叫做Iterator &lt;E> iterator()，这个方法返回的就是迭代器的实现类对象
 * 迭代器的使用步骤：
 * 1.先使用集合中的方法获取迭代器的实现类对象，使用Iterator接口来接收它（多态）
 * 2.使用Iterator接口中的方法hasNext来判断是否还有下一个元素
 * 3.使用接口中的方法next获取集合中的的下一个元素
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Iterator</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建一个集合对象</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//往集合中添加元素</span>
        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"姚明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"科比"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/**
        迭代器中的泛型跟着集合走
         */</span>
        <span class="token comment">//多态，使用接口接收实现类对象</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> b <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Generic</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 使用泛型的好处：
     * 1.避免了类型转换的麻烦，存储的什么类型，取出的就是什么类型
     * 2.把运行期异常提升到了编译期
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * 创建集合对象，不使用泛型
     * 好处：集合不使用泛型，默认的类型就是Object类型，可以存储任意类型数据
     * 坏处：不安全
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不写尖括号就默认是Object类型</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取迭代器</span>
        <span class="token class-name">Iterator</span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//取出元素是Object类型</span>
            <span class="token class-name">Object</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//想要使用String类特有的方法来获取字符串的长度，但多态的弊端是不能使用子类特有的方法</span>
            <span class="token comment">//所以需要向下转型</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
            <span class="token comment">//所以这块会抛出一个ClassCastException，不能把Integer类型转换成String类型</span>
        <span class="token punctuation">&#125;</span>


    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="泛型的定义与使用"><a href="#泛型的定义与使用" class="headerlink" title="泛型的定义与使用"></a>泛型的定义与使用</h3><h4 id="1-定义和使用含有泛型的类"><a href="#1-定义和使用含有泛型的类" class="headerlink" title="1.定义和使用含有泛型的类"></a>1.定义和使用含有泛型的类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 定义一个含有泛型的类，可以模拟ArrayList集合
 * 泛型是一个未知的数据类型，当我们不知道要是用什么数据类型时，可以使用泛型
 * 泛型可以接收任意的数据类型，可以使用Integer，String，Student...
 * 创建对象的时候确定泛型的数据类型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">E</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">E</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在另外一个class文件中再定义一个测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02GenericClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//不写泛型则默认为Object类型</span>
        <span class="token class-name">GenericClass</span> gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"只能是字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> gc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建GenericClass对象，泛型使用Integer</span>
        <span class="token class-name">GenericClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> gc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gc2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 定义含有泛型的方法：泛型定义在方法的修饰符与返回值类型之间
 * 格式：
 * 修饰符 &lt;泛型> 返回值类型 方法名(参数列表(使用泛型）)&#123;
 *     方法体;
 * &#125;
 * 含有泛型的方法在调用方法时确定泛型的数据类型，传递什么类型的参数，泛型就是什么类型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericMethod</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//定义一个含有泛型的方法</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token class-name">M</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
        
    <span class="token comment">//定义一个含有泛型的静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token class-name">S</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
 * 测试含有泛型的方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03GenericMethod</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建GenericMethod对象</span>
        <span class="token class-name">GenericMethod</span> gm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
        调用含有泛型的方法method01
        传递什么类型，泛型就是什么类型
         */</span>
        gm<span class="token punctuation">.</span><span class="token function">method01</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gm<span class="token punctuation">.</span><span class="token function">method01</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">GenericMethod</span><span class="token punctuation">.</span><span class="token function">method02</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GenericMethod</span><span class="token punctuation">.</span><span class="token function">method02</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
定义含有泛型的接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GenericInterface</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">I</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
含有泛型的接口第一种使用方式：定义接口的实现类，实现接口，指定接口的泛型
 public interface Iterator&lt;E> &#123;&#125;
 E next();
 public final Scanner implements Iterator&lt;String>&#123;
    Scanner类实现了Iterator接口，并指定接口的泛型为字符串，所以重写的next()方法泛型默认就是String
 &#125;
 public String next()&#123;&#125;
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericInterfaceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">GenericInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
 * 含有泛型的接口第二种使用方式，接口使用什么泛型实现类就使用什么泛型，类跟着接口走
 * 就相当于定义了一个含有泛型的类，创建对象的时候确定泛型的类型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericInterfaceImpl2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">GenericInterface</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">I</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/**
 * 测试含有泛型的接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04GenericInterface</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">GenericInterfaceImpl1</span> gil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericInterfaceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gil<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建InterfaceImpl2的对象</span>
        <span class="token class-name">GenericInterfaceImpl2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> gi2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericInterfaceImpl2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gi2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GenericInterfaceImpl2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> gi3 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GenericInterfaceImpl2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gi3<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">123.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><p>泛型通配符是一个问号，不知道使用什么类型来接收数据时，此时可以使用一个问号，他代表未知通配符</p>
<p>注意，此时只能接收数据，就是只能作为方法的一个参数传递，而不能往集合中存储数据</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 泛型通配符：
 * ?:代表任意类型
 * 使用方式：
 * 不能创建对象使用
 * 只能作为方法的参数使用
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Generic</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>list01<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printArray</span><span class="token punctuation">(</span>list02<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 定义一个方法，能遍历所有类型的ArrayList集合
     * 这时候我们不知道ArrayList集合使用什么数据类型，这时可以使用泛型通配符?来接受数据类型
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//使用迭代器遍历集合</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="泛型通配符的高级使用——受限泛型"><a href="#泛型通配符的高级使用——受限泛型" class="headerlink" title="泛型通配符的高级使用——受限泛型"></a>泛型通配符的高级使用——受限泛型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 泛型的上限限定： ? extends E  代表使用的泛型只能是E类型的子类或本身
 * 泛型的下限限定： ? super E    代表使用的泛型只能是E类型的父类或本身
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>（了解即可，工作中用得不多）  </p>
<h4 id="斗地主案例代码（自己敲过）"><a href="#斗地主案例代码（自己敲过）" class="headerlink" title="斗地主案例代码（自己敲过）"></a>斗地主案例代码（自己敲过）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 斗地主综合案例
 * 1.准备牌
 * 2.洗牌
 * 3.发牌
 * 4.看牌
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DouDiZhu</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1。准备牌</span>
        <span class="token comment">//定义一个存储54张牌的ArrayList，泛型使用字符串</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> poker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//定义两个数组来组装牌，一个存储花色，一个存储序号</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"♠"</span><span class="token punctuation">,</span> <span class="token string">"♥"</span><span class="token punctuation">,</span> <span class="token string">"♣"</span><span class="token punctuation">,</span> <span class="token string">"♦"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">//先把大王和小王存储到poker集合中</span>
        poker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//循环嵌套遍历两个数组，用来组装52张牌</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> color <span class="token operator">:</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                poker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>color <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//洗牌，使用Collections工具类中的方法 static void shuffle(List&lt;?> list)进行洗牌</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>poker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//System.out.println(poker);</span>

        <span class="token comment">/**
         * 发牌
         * 定义四个集合存储玩家的牌和底牌，泛型使用字符串
         */</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> player01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> player02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> player03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> dipai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/**
         * 遍历poker集合，获取每一张牌
         * 使用poker集合的索引%3给三个玩家轮流发牌
         * 剩余三张牌给底牌
         * 注意：必须先判断底牌（i>=51，否则牌就发没了）
         */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poker<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//获取每一张牌，使用Collection的get(索引)方法</span>
            <span class="token class-name">String</span> p <span class="token operator">=</span> poker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//轮流发牌</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//给底牌发牌</span>
                dipai<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//给player01发牌</span>
                player01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//给player02发牌</span>
                player02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//给player03发牌</span>
                player03<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//4.看牌</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>player01<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>player02<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>player03<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dipai<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>（这里只讲与集合相关的数据结构）   </p>
<p>栈结构：先进后出（这个想图像，好理解）  </p>
<p>队列：先进先出  </p>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20200525173726590.png" alt="image-20200525173726590"></p>
<p>数组：查询快，增删慢 </p>
<ol>
<li> 查询快：通过索引</li>
<li>增删慢：数组的长度是固定的，我们想要增加或删除一个元素，就必须要创建一个新数组，然后把原数组的数据复制过来。紧接着把新数组的地址赋值给原来的引用变量，然后销毁原来失去引用的数组</li>
</ol>
<p>链表：查询慢，增删快</p>
<ol>
<li>查询慢：链表中的地址不是连续的，每次查询元素都必须从头开始查询</li>
<li>增删快：链表结构，增加/删除一个元素，对链表的整体结构没有影响，所以增删快<ul>
<li>链表中的每一个元素也称之为一个节点</li>
<li>一个节点包含了一个数据源（存储数组），两个指针域（存储地址）</li>
</ul>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20200525173726590.png" alt="image-20200525182048599"></p>
<blockquote>
<p>单向链表：链表中只有一条链，不能保证元素的顺序（存储元素和取出元素的顺序可能不一致）</p>
<p>双向链表：链表中有两条链子，有一条链子是专门记录元素顺序的，是一个有序的集合  </p>
</blockquote>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ol>
<li>二叉树：分支不能超过两个。<ul>
<li>左右两个分支分别称为：左孩子/左子树，右孩子/右子树</li>
</ul>
</li>
<li>排序树：在二叉树的基础上元素是有大小顺序的<ul>
<li>左子树小，右子树大</li>
<li>查询速度就非常快了</li>
</ul>
</li>
<li>平衡树：左孩子和右孩子的数量相等</li>
<li>不平衡树：左孩子与右孩子的数量不相等</li>
</ol>
<p>红黑树 特点：</p>
<ol>
<li>趋近于平衡树，查询速度非常的快，查询叶子节点最大次数和最小次数之间的大小差不能超过2倍</li>
<li>约束条件：<ol>
<li>节点可以是红色或者黑色的</li>
<li>根节点是黑色的</li>
<li>叶子节点（空节点）是黑色的 （空节点就是那种末端的节点）</li>
<li>每个红色节点的子节点都是黑色的</li>
<li>任何一个节点到其每一个叶子节点的所有路径上黑色节点的数量都是相同的</li>
</ol>
</li>
</ol>
<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * java.util包下List接口继承了Collection接口
 * List集合三大特点
 * 1.有序的集合，存储元素和取出元素顺序一致
 * 2.有索引，包含了一些带索引的方法
 * 3.允许存储重复元素
 * &lt;p>
 * List接口中带索引的方法（也就是它特有的方法）
 * add，get，remove，set
 * 注意：操作索引时一定要防止索引越界
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01List</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在c和d之间添加一个666</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//remove()方法返回的是被移除的元素</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把最后一个a替换成A</span>
        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回的是被替换的元素</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//List集合遍历有三种方式</span>
        <span class="token comment">//1.使用普通的for循环</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用迭代器来遍历</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用增强for循环</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>ArrayList集合是List集合的一种数组实现，数组的特点是查询快，增删慢</p>
<p>注意：此实现不是同步的（意思就是这是多线程的，多线程意味着这个集合的效率就高，速度就快）</p>
<p>可以在IDEA中看它的底层源码，发现add()方法的本质居然是数组复制（源码不好读）</p>
<p>许多程序员开发时随意地使用ArrayList完成任何需求，并不严谨，这种用法是不提倡的</p>
</blockquote>
<h3 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h3><ol>
<li>LinkedList是List集合的链表实现，特点是查询慢，增删快</li>
<li>此实现不是同步的，也是多线程，速度快</li>
<li>虽然其查询慢，但是其找到首和尾还是非常快的，所以这个集合中有大量的操作首位的方法  </li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * java.util.linkedList集合 implements list接口
 * LinkedList集合特点（List有的它都有，下面介绍它自己的特点）
 * 1.底层是一个链表的结构，查询慢，增删快
 * 2.里面包含了大量操作首位元素的方法
 * 注意：使用LinkedList集合特有的方法时不能使用多态
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02LinkedList</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建LinkedList集合对象</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用add方法往集合中添加元素</span>
        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//linkedList.addFirst("www");</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//linkedList.clear();</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>linkedList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Vector集合"><a href="#Vector集合" class="headerlink" title="Vector集合"></a>Vector集合</h3><p>Vector是Java1.0版本的老集合，底层逻辑也是数组，而且是线程同步的，速度慢，在1.2之后就被ArrayList取代了  </p>
<h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>不包含重复元素的Collection</p>
<h3 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * java.util.Set implements Collection
 * 1.不允许存储重复元素
 * 2.没有索引，没有带索引的方法，不能用普通的for循环遍历
 * 3.里面的方法和Collection里的方法一样

* java.util.HashSet集合 implements Set接口（Set有的特点它都有）
 * 1.是一个无序的集合，存储元素和取出元素的顺序有可能不一致
 * 2.底层是一个哈希表结构（实际上是一个HashMap的实例），特点是查询的速度非常的快
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Set</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//无法使用普通for循环遍历，因为没有索引</span>

        <span class="token comment">//使用迭代器遍历Set集合</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//输出123</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用增强for遍历</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="HashSet集合存储数据的结构（哈希表）"><a href="#HashSet集合存储数据的结构（哈希表）" class="headerlink" title="HashSet集合存储数据的结构（哈希表）"></a>HashSet集合存储数据的结构（哈希表）</h3><ol>
<li><p>哈希值：</p>
</li>
<li><p>```java<br>/**</p>
<ul>
<li><p>哈希值：是一个十进制的整数，由系统随机给出</p>
</li>
<li><p>（就是对象的地址值，是一个逻辑地址，不是数据实际存储的物理地址）</p>
</li>
<li><p>在Object类里有一个方法，它可以获取对象的哈希值</p>
</li>
<li><p>int hashCode()返回对象的哈希码值</p>
</li>
<li><p>hashCode()方法的源码：</p>
</li>
<li><p>public native int hashCode();</p>
</li>
<li><p>native:代表该方法调用的是本地操作系统的方法</p>
</li>
<li><p>/<br>public class Demo01HashCode {<br>  public static void main(String[] args) {</p>
<pre><code>  //Person类继承了Object类，所以可以使用Object类的HashCode方法
  Person p1 = new Person();
  int h1 = p1.hashCode();
  System.out.println(h1);
  //输出的就是一个十进制的整数

  /**
   * toString方法的源码:
   * return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());
   */
  System.out.println(p1);
  //输出类名+一个16进制的值

  /**
   * String类的哈希值
   * String类重写了hashCode()方法
   */
  String s1 = new String(&quot;abc&quot;);
  String s2 = new String(&quot;abc&quot;);
  System.out.println(s1.hashCode());
  System.out.println(s2.hashCode());
  //返回的哈希值一样，说明字符串类也重写了hashCode()方法
  System.out.println(&quot;重地&quot;.hashCode());
  System.out.println(&quot;通话&quot;.hashCode());
  //这两个中文字符串的哈希值巧合相等
</code></pre>
<p>  }<br>}</p>
<pre class="line-numbers language-none"><code class="language-none">
     

   2. 哈希表：
   3. 哈希表 &#x3D; 数组 + 链表
   4. 哈希表 &#x3D; 数组 + 红黑树
   5. 哈希表的特点：查询速度快

   
   
   
   
   ![image-20210123211233171](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Mozartto&#x2F;pictures&#x2F;Mozarttoimage-20210123211233171.png)



### （上图中横着的是数组，竖着的就是链表结构） 

  

### Set集合不允许存储重复对象的原因

  

### HashSet存储自定义类型的元素

给HashSet中存放自定义元素时，需要重写对象中的hashCode()方法和equals()方法

&#96;&#96;&#96;java
public class Person &#123;
    private String name;
    private int age;

    public String getName() &#123;
        return name;
    &#125;

    public void setName(String name) &#123;
        this.name &#x3D; name;
    &#125;

    public int getAge() &#123;
        return age;
    &#125;

    public void setAge(int age) &#123;
        this.age &#x3D; age;
    &#125;

    public Person(String name, int age) &#123;
        this.name &#x3D; name;
        this.age &#x3D; age;
    &#125;

    @Override
    public String toString() &#123;
        return &quot;Person&#123;&quot; +
                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +
                &quot;, age&#x3D;&quot; + age +
                &#39;&#125;&#39;;
    &#125;

    @Override
    public boolean equals(Object o) &#123;
        if (this &#x3D;&#x3D; o) return true;
        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;
        Person person &#x3D; (Person) o;
        return age &#x3D;&#x3D; person.age &amp;&amp;
                name.equals(person.name);
    &#125;

    @Override
    public int hashCode() &#123;
        return Objects.hash(name, age);
    &#125;
&#125;


&#x2F;**
 * 存储自定义元素时必须重写hashCode()方法和equals()方法
 * 要求：同名和同年龄的人只能存储一次
 *&#x2F;
public class Demo03HashSetSavePerson &#123;
    public static void main(String[] args) &#123;
        &#x2F;&#x2F;创建一个HashSet集合存储Person
        HashSet&lt;Person&gt; set &#x3D; new HashSet&lt;&gt;();
        Person p1 &#x3D; new Person(&quot;小明&quot;,18);
        Person p2 &#x3D; new Person(&quot;小明&quot;,18);
        Person p3 &#x3D; new Person(&quot;小明&quot;,19);
        set.add(p1);
        set.add(p2);
        set.add(p3);
        System.out.println(set);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<h3 id="LinkedHashSet集合"><a href="#LinkedHashSet集合" class="headerlink" title="LinkedHashSet集合"></a>LinkedHashSet集合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * java.util.LinkedHashSet集合 extends HashSe集合
 * LinkedHashSet集合特点：
 * 底层是一个哈希表（数组+链表/红黑树）+链表
 * 多了一条链表：用来记录元素的存储顺序，可以保证元素有序
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04LinkedHashSet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//无序的，并且不允许重复</span>

        <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> linkedHashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedHashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedHashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//有序的，并且也不允许重复，原理就是多了一层链表来保存元素存储顺序</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>这个疯狂Java讲义上讲过</p>
<h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>第一种sort方法（实现Comparable接口）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Collections</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//往集合中添加多个元素</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//打乱集合中的元素顺序</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>第二种sort方法（实现Comparator接口）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 第二种sort方法，它里面需要传递的参数是list和一个Comparator
 * Comparator和Comparable的区别
 * Comparable:自己（this）和别人比较，自己需要实现Comparable接口，重写比较规则CompareTo方法
 * Comparator：相当于找一个第三方的裁判，来比较这两个
 * Comparator排序规则：o1 - o2，则为升序，反之降序
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Sort</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list01<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list01<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里写Comparator接口的匿名内部类</span>
            <span class="token comment">//重写里面的compare方法</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> o1 <span class="token operator">-</span> o2<span class="token punctuation">;</span><span class="token comment">//前面见后面，就是升序排序</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list01<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list01<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小李李"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小军"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*Collections.sort(list02, new Comparator&lt;Student>() &#123;
            @Override
            public int compare(Student o1, Student o2) &#123;
                //按照年龄升序排序
                return o1.getAge() - o2.getAge();
            &#125;
        &#125;);*/</span>

        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list02<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token comment">//按照年龄升序排序</span>
                <span class="token keyword">int</span> result <span class="token operator">=</span>  o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//如果两个人年龄相同，再使用姓名的长度来比较</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    result <span class="token operator">=</span>  o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list02<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>Collection集合是单列集合，而Map集合则是双列集合。Map&lt;K,V&gt;集合有两个泛型。</p>
<ol>
<li>Key和Value（键和值）是一一对应的</li>
<li>Key(键)不可以重复，Value(值)可以重复</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * java.util.Map&lt;K,V>
 *     1.Map集合中Key和Value的数据类型可以相同，也可以不同
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>







<h3 id="Map集合的常用子类"><a href="#Map集合的常用子类" class="headerlink" title="Map集合的常用子类"></a>Map集合的常用子类</h3><ol>
<li><p>HashMap（底层与HashSet一样也是一个哈希表结构，HashSet相当于是new了一个HashMap集合，但是只使用了里面的Key，里面不允许存储重复元素）</p>
</li>
<li><p>这也是一个多线程集合</p>
</li>
<li><p>HashMap也有一个子类叫做LinkedHashMap，与LinkedHashSet类似</p>
<ol start="4">
<li>LinkedHashMap具有可预知的迭代顺序</li>
</ol>
</li>
</ol>
<h3 id="Map集合中的常用方法"><a href="#Map集合中的常用方法" class="headerlink" title="Map集合中的常用方法"></a>Map集合中的常用方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * java.util.Map&lt;K,V>
 * 1.Map集合中Key和Value的数据类型可以相同，也可以不同
 * java.util.HashMap&lt;K,V>集合 implements Map&lt;K,V>接口
 * HashMap集合的特点：
 * 1.HashMap集合底层是哈希表：查询速度特别快
 * JDK1.8之前：数组+单向链表组成
 * JDK1.8之后：数组+单向链表 / 红黑树 （链表的长度超过8）：提高查询速度
 * 2.HashMap集合是一个无序的集合，存储元素和取出元素的顺序可能不一致
 * java.util.LinkedHashMap&lt;K,V> extends HashMap&lt;K,V>集合
 * LinkedHashMap的特点：
 * 1.LinkedHashMap集合底层是哈希表+链表（多一层链表保证迭代顺序）
 * 2.LinkedHashMap集合是一个有序集合，存储元素和取出元素顺序相同
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Map</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/*
    public V put(K key, V value): 把指定的值添加到Map集合中
    返回值：v
    存储键值对的时候，key不重复，返回值v是null
    存储键值对的时候，key重复，会使用新的value替换原有的value，返回被替换的value值

    public V remove(Object key):把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值
    返回值V：
    key存在，v返回被删除的值
    key不存在，v返回null

    public V get(Object key)根据指定的键，在Map集合中获取对应的值
    返回值：key存在，返回对应的value值
           key不存在，返回null

          boolean containsKey(Object key)判断集合中是否包含指定的键
          包含返回true，不包含返回false
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建Map集合（多态）</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"李晨"</span><span class="token punctuation">,</span> <span class="token string">"范冰冰1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"李晨"</span><span class="token punctuation">,</span> <span class="token string">"范冰冰2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//输出范冰冰1</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lily"</span><span class="token punctuation">,</span><span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yaoming"</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"liza"</span><span class="token punctuation">,</span><span class="token number">167</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"yaoming"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="遍历Map集合的方法"><a href="#遍历Map集合的方法" class="headerlink" title="遍历Map集合的方法"></a>遍历Map集合的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
遍历Map集合的两种方式：第一种，通过键找值的方式
Set&lt;K> keySet()
1.把Map集合中所有的key取出来存储到Set集合中
2.遍历Set集合可以使用迭代器或者增强for来进行遍历
3.再使用Value get(key)方法可以获取value
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Map</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Ben"</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"liza"</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用增强for来遍历Set集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Entry键值对对象"><a href="#Entry键值对对象" class="headerlink" title="Entry键值对对象"></a>Entry键值对对象</h3><p>在Map接口中有一个内部的静态接口叫做Entry（类似于内部类，但其是静态的可以通过Map接口名直接调用)</p>
<p>作用：当Map集合一创建，那么就会在Map集合中创建一个Entry对象，用来记录键与值（键值对对象，键与值的映射关系）</p>
<p>Map集合中有一个方法叫做 entrySet() 把Map集合中的Entry对象取出来存储到一个Set集合中</p>
<p>Set&lt;Map.Entry&lt;K,V&gt;&gt;   </p>
<p>遍历Set集合，获得其中的每一个Entry对象，Entry对象中有两个方法：getKey() 和getValue(),分别可以获取其中所储存的键和值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
 * 遍历Map集合的第二种方法
 * 使用Map集合中的方法entrySet()返回此映射中包含的映射关系的Set视图
 * 实现步骤：
 * 1.使用Map集合中的方法entrySet()，把Map集合中多个Entry对象取出来，存储到一个Set集合中
 * 2.遍历Set集合，获取每一个Entry对象
 * 3.使用Entry对象中的方法getKey()和getValue()获取键与值
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Map</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Ben"</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"liza"</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用Map集合中的方法entrySet()，把Map集合中多个Entry对象取出来，存储到一个Set集合中</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用迭代器遍历Set集合</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span>it <span class="token operator">=</span>  set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用增强for遍历Set集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="HashMap存储自定义类型对象"><a href="#HashMap存储自定义类型对象" class="headerlink" title="HashMap存储自定义类型对象"></a>HashMap存储自定义类型对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
HashMap存储自定义键值
1.Map集合保证Key是唯一的
2.作为key的元素，必须重写HashCode方法和equals方法,以保证key唯一

 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01HashMapSavePerson</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//可以保证key是唯一的，因为SString类重写了HashCode()和equals()方法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> map <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用KeySet与增强for遍历Map集合</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> key <span class="token operator">+</span> <span class="token string">" --->"</span><span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment">/*
    HashMap存储自定义类型键值
    key:Person类型
    作为key，Person类必须重写HashCode和equals方法，以保证key是唯一的
    如果自定义类型作为键，那么一定要重写自定义类型中的HashCode和equals方法，否则会出现键重复的现象
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"弓箭女王"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"弓箭蛮王"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"American"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"飞盾"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"British"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"飞盾"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Norway"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用entrySet和增强for遍历Map集合</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> set <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LinkedHashMap集合"><a href="#LinkedHashMap集合" class="headerlink" title="LinkedHashMap集合"></a>LinkedHashMap集合</h3><p>LinkedHashMap集合是HashMap的子类，是一个有序的集合</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
java.util.LinkedHashMap&lt;K,V> extends HashMap&lt;K,V>
由Map接口的哈希表和链接列表（链表）实现，具有可预知的迭代顺序
底层原理：
哈希表+链表
HashMap是一个key不允许重复且无序的集合
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01LinkedHashMap</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//总是按abcd的顺序输出</span>

        <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> linked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linked<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linked<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//key也不允许重复，但是是一个有序的集合，怎么存就怎么取</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Hashtable集合"><a href="#Hashtable集合" class="headerlink" title="Hashtable集合"></a>Hashtable集合</h3><p>它也实现了Map接口，也是一个双列集合（Collection那一堆是单列集合，没有键值对），它底层也是一个哈希表。它与HashMap相似。</p>
<ol>
<li>Hashtable的键和值都不能为空（null），但HashMap可以</li>
<li>Hashtable从JDK1.0就有了，HashMap是JDK1.2之后的</li>
<li>Hashtable是线程安全类，意思是它是同步的，单线程。而单线程就意味着速度慢</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
java.util.Hashtable&lt;K,V> 集合 implements Map
Hashtable 底层也是一个哈希表，，是一个单线程，线程安全的集合，速度慢
之前学的所有集合都可以存储空值空键（null），但是Hashtable集合不可以
Hashtable与Vector一样在JDK1.2之后被更先进的集合取代了
（Vector被ArrayList取代了，Hashtable被HashMap取代了
但是Hashtable的子类Properties依然活跃在历史的舞台
Properties集合是一个唯一和IO流相关的集合
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Hashtable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用HashMap输出正常</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="练习案例"><a href="#练习案例" class="headerlink" title="练习案例"></a>练习案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*练习：计算一个字符串中每个字符出现的次数
分析：
1.使用Scanner获取用户输入的字符串
2.创建Map集合，key是字符串中的字符，value是字符的个数
3.遍历字符串，获取每一个字符
4.使用获取到的字符去Map集合判断key是否存在
    key存在，通过字符（key）获取到value（字符个数）
    value++
    put（key，value）把新的value存储到Map集合中
    key不存在：
    put（key，1）
5.遍历Map集合，输出结果

 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoMapTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1.使用Scanner获取用户输入的字符串</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.创建Map集合，key是字符串中的字符，value是字符的个数</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.遍历字符串，获取每一个字符(先使用增强for）</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//4.使用获取到的字符去Map集合判断key是否存在</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//key存在</span>
                <span class="token class-name">Integer</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                value<span class="token operator">++</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//5.遍历Map集合，输出结果</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="JDK9对集合添加的优化"><a href="#JDK9对集合添加的优化" class="headerlink" title="JDK9对集合添加的优化"></a>JDK9对集合添加的优化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
List,Set,Map接口中增加了一个静态的方法of，可以给集合一次性添加多个元素
static &lt;E> of (E...elements) 这个方法返回的是一个集合
使用前提：
    当集合中存储元素以及确定时使用
注意事项：
1.of方法只适用于上面三大接口，不适用于接口的实现类
2.of方法的返回值是一个不能改变的集合，集合不能再使用add，put方法添加元素，否则会抛出异常
3.Map与Set接口在调用of方法时不能有重复的元素，否则也会抛出异常
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01JDK9</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值可以重复，键不能重复</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能添加，系统抛出异常</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Debug追踪"><a href="#Debug追踪" class="headerlink" title="Debug追踪"></a>Debug追踪</h3><p>Debug叫做“调试bug“</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis详解</title>
    <url>/2021/03/21/Mybatis/</url>
    <content><![CDATA[<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="Mybatis的项目搭建"><a href="#Mybatis的项目搭建" class="headerlink" title="Mybatis的项目搭建"></a>Mybatis的项目搭建</h3><p>但凡是框架，使用都是分三步走：</p>
<ol>
<li>导入jar文件，使用maven</li>
<li>处理配置文件</li>
<li>开发业务代码</li>
</ol>
<h5 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h5><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407132103248.png" alt="image-20210407132103248"></p>
<p>注意之前设置maven的时候要把你用的maven覆盖掉idea原有的maven，同时配置文件和本地仓库位置也要自己配置一下。</p>
<p>创建完一个maven项目之后需要导入如下的依赖：（在mvnrepository.com）中去搜索对应的依赖。总共四个依赖：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210407133128215.png" alt="image-20210407133128215"></p>
<p>注意其中的scope标签，表示的是你这个依赖的范围。Junit是在测试的时候用的，所以它的scope是test。</p>
<p>lombok的scope是provided，因为Lombok就是在编译的时候需要使用一下</p>
<h5 id="2-处理配置文件"><a href="#2-处理配置文件" class="headerlink" title="2.处理配置文件"></a>2.处理配置文件</h5><p><strong>1.准备数据库，包结构和实体类：</strong></p>
<p>先在IDEA中创建一个maven项目，下面这个是mybatis的项目结构：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408090551255.png" alt="image-20210408090551255" style="zoom:67%;" />



<p>我们需要做的就是在Java目录下创建自己域名的包，然后在包下创建两个文件夹：mapper和pojo。</p>
<p><strong>2.准备mapper映射文件和核心配置文件</strong></p>
<p>我们知道第二个大步骤是处理核心配置文件，那么mybatis有哪些配置文件呢？如下图：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408091425065.png" alt="image-20210408091425065"></p>
<p>首先是SqlMapConfig.xml配置文件，一些URL、Driver、UserName和Password等信息都往这里面放，它下面要关联一系列的Mapper映射文件，每一个mapper映射文件对应一个数据库表，比如Dept表，每一个数据库表我们要做的增删改查操作都放在mapper映射文件里面。那么如何配置这两个配置文件呢？</p>
<p>在mybatis官网的入门教程中可以查到这么一段配置代码：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408092022337.png" alt="image-20210408092022337" style="zoom:50%;" />

<p>放在项目的resources资源目录下，在resources目录下创建sqlMapConfig.xml文件，把上面这段代码粘进去。创建了xml后IDEA会默认为我们在文档顶部生成一段文档约束，不用去管，也不要删掉。</p>
<p>我们需要更改里面的四个property选项，注意，在xml文档中写url的时候会用到&amp;符号，但是在是在xml和html文档中写这些符号都需要在符号后面跟上一个转义符amp;才可以，也就是说&amp;才代表了一个完整的&amp;符号。</p>
<p>在mapper文件夹下创建DeptMapper.xml文件，去mybatis官网里面把mapper的映射代码粘进来，mapper文件夹下应该还要有一个名为DeptMapper的接口，然后我们要保证项目编译之后xml文件和其对应的接口要放在同一个包中</p>
<p>上面的mapper对应的路径也要改一下</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408094725451.png" alt="image-20210408094725451" style="zoom:70%;" />

<p>DeptMapper.xml文件中的内容如下：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408111143668.png" alt="image-20210408111143668" style="zoom:70%;" />

<p>然后我们需要在pojo文件夹下创建数据库表对应的实体类，实体类名字要与数据库表名保持一致，实体类要实现序列化（Serializable）接口，在实体类中需要添加对应列名的属性，并提供相应的get、set方法以及构造方法。</p>
<p>但是！but！<img src="file:///C:\Users\xiaoqiyao\Documents\Tencent Files\1220883974\Image\C2C\92AA8D022A50F6B0C5FB24AFD774A79C.gif" alt="img" style="zoom:15%;" />在我们使用了Lombok之后，我们可以直接写一个小注解，然后Lombok会自动帮我们生成对应的get、set和对应的构造方法！注解格式如下：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408100129365.png" alt="image-20210408100129365"></p>
<p>注意：在mybatis中DAO层统一改为mapper层，意思就是连接数据库那一层，里面会写一些SQL的增删改查代码以及Java代码。</p>
<h3 id="Mybatis运行测试"><a href="#Mybatis运行测试" class="headerlink" title="Mybatis运行测试"></a>Mybatis运行测试</h3><p>在原生的JDBC中，我们查询数据库内容可能要写一大堆代码，还要配置什么Driver、Connector等等，但是在mybatis中只需要像下面这样写：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408101941785.png" alt="image-20210408101941785" style="zoom:50%;" />

<p>那这些都准备完了之后，我们要如何对数据库进行增删改查呢？通过一个sqlSession对象，也叫sql会话对象。</p>
<p>下面你将看到的，是一幅比较乱的图，我来一一解释：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408102812343.png" alt="image-20210408102812343"></p>
<p>我们需要一个sqlSession对象来对数据库进行增删改查，session就像是一个生产线，那么生产线从哪里来？需要一个工厂，也就是SqlSessionFactory，工厂从哪里来？需要工人来修，工人就是SqlSessionFactoryBuilder，工人的build方法中需要传入一个IO流对象，这个reader对象就是sqlMapConfig.xml文件，就像是建造工厂的一个图纸一样。IO流怎么获得呢？通过一个Resources类获得，返回一个</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408104907354.png" alt="image-20210408104907354"></p>
<p>在Test方法之前和之后可以添加@Before和@After注解，分别在@Test方法的之前和之后自动执行</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408110822498.png" alt="image-20210408110822498" style="zoom: 67%;" />

<p>把close方法放到@After方法中：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408110747360.png" alt="image-20210408110747360" style="zoom:67%;" />



<h3 id="Mybatis日志配置"><a href="#Mybatis日志配置" class="headerlink" title="Mybatis日志配置"></a>Mybatis日志配置</h3><p>我们想要像navicat那样看一下数据库运行的日志细节，这个时候我们在IDEA中就需要额外的一个日志了，否则我们只能看到运行结果</p>
<p>我们需要在整个项目的pom.xml配置文件中去添加日志的依赖。依赖到mvnrepository.com里面去找，直接搜log4j即可</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408111716735.png" alt="image-20210408111716735" style="zoom:50%;" />

<p>弄完之后import changes（IDEA右下角的小弹窗）：<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408111754609.png" alt="image-20210408111754609" style="zoom:67%;" /></p>
<p>然后我们需要在resources的根目录下创建一个这样的文件：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408111924609.png" alt="image-20210408111924609" style="zoom:50%;" />

<p>里面要粘的内容如下：（可以百度到）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408112007194.png" alt="image-20210408112007194" style="zoom:67%;" />

<p>日志打印分为四个级别：<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408112104822.png" alt="image-20210408112104822"></p>
<p>debug是最细的一种。所以我们只需要在项目中添加一个依赖，再添加一个log4j.properties文件即可</p>
<p>注意，上面用的是log4j版本1，如果你导入的是log4j的版本2的依赖，创建的文件如下：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408112852044.png" alt="image-20210408112852044" style="zoom:80%;" />

<p>文件名为：log4j2.xml</p>
<h3 id="Mybatis其它配置"><a href="#Mybatis其它配置" class="headerlink" title="Mybatis其它配置"></a>Mybatis其它配置</h3><p>（注意：以下配置都是在sqlMapConfig.xml里面配置）</p>
<p>1.关于事务的配置</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408113952228.png" alt="image-20210408113952228"></p>
<p>把JDBC改成MANAGED，我们其实不用设置这个，后面会全部托管给Spring</p>
<p>2.mapper加载映射文件</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408114621638.png" alt="image-20210408114621638"></p>
<p>这个后面再讲，讲到代理模式的时候会讲</p>
<p>3.指定类型别名</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408114545813.png" alt="image-20210408114545813"></p>
<p>可以省去一些包名，不用每次都写一大堆路径</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408115109812.png" alt="image-20210408115109812" style="zoom:67%;" />

<p>那如果有100个类呢？每个类都要这样写一大行，那不是太多了？可以使用包扫描来起别名：（格式如下）</p>
<p>别名规则就是类的首字母小写</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408115212844.png" alt="image-20210408115212844"></p>
<h3 id="Mybatis引入外部属性配置文件"><a href="#Mybatis引入外部属性配置文件" class="headerlink" title="Mybatis引入外部属性配置文件"></a>Mybatis引入外部属性配置文件</h3><p>之前在核心配置文件中配置了四个和MySQL有关的信息，和mybatis的核心配置耦合度太高，其实这四个信息可以放在其它地方。这样每个配置文件的功能都比较单一，这样要好一点。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408115838593.png" alt="image-20210408115838593"></p>
<p>在resources下新建一个properties属性的配置文件：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408120011998.png" alt="image-20210408120011998"></p>
<p>内容如下：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408120246649.png" alt="image-20210408120246649"></p>
<p>用户名和密码写你自己的。</p>
<p>在mybatis核心配置文件中添加下面这段：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408120609958.png" alt="image-20210408120609958" style="zoom:50%;" />

<p>原来的属性改成这样即可：（花括号里的名称与jdbc配置文件里面的名称对应）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408120641096.png" alt="image-20210408120641096" style="zoom:67%;" />

<p>注意，jdbc.properties里面不要有空格。当内外都配置了driver的时候，外部配置文件中的配置优先。（引入了外部文件，内部就没必要写了）</p>
<p>jdbc配置文件中建议加一下前缀，因为其它配置文件中可能也会有username和password：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408121128970.png" alt="image-20210408121128970"></p>
<p>（美元符和大括号里面也改一下）</p>
<h3 id="sqlSession三种查询方法"><a href="#sqlSession三种查询方法" class="headerlink" title="sqlSession三种查询方法"></a>sqlSession三种查询方法</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408122523517.png" alt="image-20210408122523517"></p>
<p>现在来说一下跳过的pojo和DAO</p>
<p>pojo里面存放的是和数据库表所对应的实体类对象，DAO里面存放的是对数据库进行的增删改查操作。</p>
<p>在pojo中创建数据库表的实体类，并把表中的列信息创建为属性，并提供相应的get、set以及构造方法（用Lombok注解）</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408123225242.png" alt="image-20210408123225242"></p>
<p>现在我想对这个数据库进行增删改查，所以要在mapper里面进行一些操作：（mapper就是DAO）</p>
<p>那么我们要在mapper里面进行哪些操作呢？我们可以定义一个方法：**(第一种，查询单个对象)**</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408124619028.png" alt="image-20210408124619028"></p>
<p>在mapper中这个select标签就相当于是定义了一个方法，id就是方法名，标签里面写我们的SQL语句resultType就是返回值类型，返回的是一个emp对象（员工信息，在pojo里面有对应的实体类）。</p>
<p>parameterType是参数类型</p>
<p>注意，你写完一个新的mapper文件之后要在核心配置文件里面加载以下新的mapper文件：（把Emp加上了）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408125104221.png" alt="image-20210408125104221" style="zoom:67%;" />

<p>在测试类中调用上面mapper文件里面定义的方法：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408125155544.png" alt="image-20210408125155544" style="zoom:60%;" />

<p><strong>第二种：使用List查询多个对象</strong></p>
<p>这个是mapper里面对应的新定义的查询多个对象的方法：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408125702090.png" alt="image-20210408125702090" style="zoom:60%;" />

<p>测试查询多个对象：（下面这个注释写错了，是查询多个对象，不用在意）</p>
<p>下面那个foreach也可以直接用增强for(emp.for+回车即可)，这种foreach写法稍稍结合了一点lambda表达式和函数引用</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408125606945.png" alt="image-20210408125606945" style="zoom:50%;" />



<p><strong>第三种：使用Map查询多个对象，将数据库里的主键作为Map中的键</strong></p>
<p>上面的是返回多个对象的List集合，下面来看一下返回多个对象的Map集合：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408153434393.png" alt="image-20210408153434393" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408153255670.png" alt="image-20210408153255670" style="zoom:67%;" />



<h3 id="sqlSession三种参数传递"><a href="#sqlSession三种参数传递" class="headerlink" title="sqlSession三种参数传递"></a>sqlSession三种参数传递</h3><p>我们刚刚讲的这些查询都是没有参数的，但我们知道SQL语句中有些时候是有参数传递的，下面来讲一下如何传递参数。</p>
<p><strong>单个参数的情况：</strong></p>
<p>这个是mapper文件中的代码：（说明都在注释里）</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408161934193.png" alt="image-20210408161934193"></p>
<p>test方法中：前面传方法名，后面传参数</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408160858630.png" alt="image-20210408160858630"></p>
<p>上面是单个参数传递，下面看多个参数传递：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408163610173.png" alt="image-20210408163610173" style="zoom:70%;" />

<p><strong>参数是一个map集合</strong>：</p>
<p>&amp;gt代表xml中的大于符号（great than）小于符号是&amp;lt分号，大于等于是&amp;gt分号=，小于等于同理。</p>
<p>对应的test方法：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408163948331.png" alt="image-20210408163948331" style="zoom:70%;" />

<p>查询结果如下：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408164234594.png" alt="image-20210408164234594"></p>
<p><strong>参数为一个对象：</strong></p>
<p>上面的两个参数为deptno和sal，那我也可以直接传一个emp对象进去，然后从emp对象身上去取这两个属性出来。</p>
<p>arg是参数的意思，args意思就是多个参数。get和set方法Lombok已经写过注解了，此处可以直接调用。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408164944898.png" alt="image-20210408164944898" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408164828482.png" alt="image-20210408164828482" style="zoom:70%;" />



<h3 id="sqlSession实现CRUD"><a href="#sqlSession实现CRUD" class="headerlink" title="sqlSession实现CRUD"></a>sqlSession实现CRUD</h3><p>查询方法刚刚说过了，增删改还没说。增删改方法的返回值类型都是int，但是在这里没有resultType，否则报错。parameterType可以不写（之前说过）</p>
<p>增加数据方法：</p>
<p>注意，这边增加完数据需要手动提交一下事务，不然mybatis是默认回滚的，数据不会有变化。（增删改都需要手动提交事务）或者在@Before的方法中设置一个true，为自动提交。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408172721671.png" alt="image-20210408172721671"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173153877.png" alt="image-20210408173153877"></p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173042336.png" alt="image-20210408173042336" style="zoom:67%;" />



<p>修改数据：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173545403.png" alt="image-20210408173545403" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173456902.png" alt="image-20210408173456902" style="zoom:67%;" />

<p>删除数据：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173854827.png" alt="image-20210408173854827" style="zoom:67%;" /><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173913847.png" alt="image-20210408173913847"><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173854827.png" alt="image-20210408173854827" style="zoom:67%;" /><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173913847.png" alt="image-20210408173913847"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408173913847.png" alt="image-20210408173913847"></p>
<h3 id="Mybatis基于接口代理模式开发"><a href="#Mybatis基于接口代理模式开发" class="headerlink" title="Mybatis基于接口代理模式开发"></a>Mybatis基于接口代理模式开发</h3><p>先把你要对数据库进行的操作的方法全部定义在一个接口里面，定义为抽象方法</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408180310269.png" alt="image-20210408180310269"></p>
<p>在接口的<strong>同级目录下</strong>创建一个对应的mapper文件，内容如下：（mapper.xml文件里面实现了接口里面定义的抽象方法：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408181432291.png" alt="image-20210408181432291"></p>
<p>maven有一个缺点，就是整个蓝色的Java目录下只编译Java文件，不编译xml文件。人家这么设定的原因就是想让我们把代码和目录文件分开。在resources目录下创建一个同名路径，然后把配置文件放进去。创建的时候一步一步创建，不要写带点的包名，否则会被识别为一个包。（其实后面学SpringBoot的时候配置文件和Java文件编译之后可以不用在同级目录下，后面再说）</p>
<p>涨知识：IDEA有时候编译项目的时候会误报，此时我们可以按CTRL+alt+shift+H将编译级别调低，就不会误报了。（不过我不太想调低）</p>
<p>测试类中的代码：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408182428691.png" alt="image-20210408182428691" style="zoom:67%;" />

<p>这个接口不用我们自己去写实现类，mybatis会自动帮我们生成实现类，我们可以直接调用里面的方法，这个方法就是我们在mapper中重写的方法。</p>
<p>别忘了新写完一个mapper后要在核心配置文件中添加mapper的映射：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210408182906081.png" alt="image-20210408182906081" style="zoom:80%;" />

<p>我们发现，这个方法完全是我们自己定义的方法，没有用sqlSession对象中的update哪些方法，耦合度降低了。到后面耦合度会更低，sqlSession对象直接看不到了，直接用mapper去调findAll方法。框架真香。</p>
<h3 id="MyBatis接口代理下的参数问题"><a href="#MyBatis接口代理下的参数问题" class="headerlink" title="MyBatis接口代理下的参数问题"></a>MyBatis接口代理下的参数问题</h3><p>定义两个方法，一个是根据empno去寻找员工，另一个是根据员工编号和薪资下限寻找员工。</p>
<p>注意，下面两个定义的方法海阳老师是写了文档注释的，一般定义接口中的抽象方法都是要写文档注释的，这是开发中的好习惯。</p>
<p>EmpMapper.java文件中定义的抽象方法（蓝色小鸟）：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410090844285.png" alt="image-20210410090844285" style="zoom:60%;" />

<p>那么我们要为这两个我们要实现的方法写SQL语句</p>
<p>EmpMapper.xml文件中重写的方法（红色小鸟，注意两个文件要同名噢）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410090418475.png" alt="image-20210410090418475" style="zoom:70%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410091710629.png" alt="image-20210410091710629" style="zoom:67%;" />

<p>arg0，arg1这些代表的就是test方法里面传来的参数（按顺序）</p>
<p>也可以使用param* ，param1，param2…（从1开始）</p>
<p>test文件中的测试方法：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410091710629.png" alt="image-20210410091710629" style="zoom:67%;" />

<p>还可以在接口中给参数起别名：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410092208716.png" alt="image-20210410092208716" style="zoom:67%;" />

<p>注意：起了别名之后arg* 不能使用，param* 可以使用</p>
<p>上面的empno应该是deptno，写错了。</p>
<h3 id="MyBatis模糊查询"><a href="#MyBatis模糊查询" class="headerlink" title="MyBatis模糊查询"></a>MyBatis模糊查询</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410095400865.png" alt="image-20210410095400865" style="zoom:80%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410095707225.png" alt="image-20210410095707225" style="zoom:70%;" />

<p>这个字母a会作为参数传入到Java文件的接口的抽象方法中，抽象方法再调用xml文件里重写的SQL语句对数据库进行增删改查。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410095835292.png" alt="image-20210410095835292" style="zoom:67%;" />

<p>这样查就会出错哦。把ename那里改一下：</p>
<p>改成<code>like concat (&#39;%&#39;, #&#123;ename&#125;, &#39;%&#39;)</code> 里面不要有多余的空格。</p>
<h3 id="Mybatis主键自增回填"><a href="#Mybatis主键自增回填" class="headerlink" title="Mybatis主键自增回填"></a>Mybatis主键自增回填</h3><p>这种细碎使用技巧和知识点比较多。</p>
<h3 id="Mybatis接口代理CURD"><a href="#Mybatis接口代理CURD" class="headerlink" title="Mybatis接口代理CURD"></a>Mybatis接口代理CURD</h3><p>展示一些DML的操作。快速了解一下即可。该讲的前面都讲了。</p>
<h3 id="动态SQL之if"><a href="#动态SQL之if" class="headerlink" title="动态SQL之if"></a>动态SQL之if</h3><p>动态SQL是MyBatis框架中非常好用的一个功能。</p>
<p>Java接口类和test方法中都是正常写，就是xml文件中的SQL语句部分有一些变化。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410105800527.png" alt="image-20210410105800527" style="zoom: 67%;" />

<h3 id="动态SQL之where和when"><a href="#动态SQL之where和when" class="headerlink" title="动态SQL之where和when"></a>动态SQL之where和when</h3><p>把where 1=1 改成一个<where></where>标签。</p>
<p>有了where标签就可以去掉 if 中的第一个and</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410110524674.png" alt="image-20210410110524674" style="zoom:67%;" />

<p>或者把 if 结构换成 choose - when 结构：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410110703867.png" alt="image-20210410110703867" style="zoom:67%;" />



<h3 id="动态SQL之SET"><a href="#动态SQL之SET" class="headerlink" title="动态SQL之SET"></a>动态SQL之SET</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410111645737.png" alt="image-20210410111645737" style="zoom:67%;" />

<h3 id="动态SQL之TRIM"><a href="#动态SQL之TRIM" class="headerlink" title="动态SQL之TRIM"></a>动态SQL之TRIM</h3><p>set 和 where相当于是trim的特殊情况</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410112944408.png" alt="image-20210410112944408" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410112859331.png" alt="image-20210410112859331" style="zoom:67%;" />

<h3 id="动态SQL之BIND"><a href="#动态SQL之BIND" class="headerlink" title="动态SQL之BIND"></a>动态SQL之BIND</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410113325004.png" alt="image-20210410113325004" style="zoom:67%;" />

<h3 id="动态SQL之SQL"><a href="#动态SQL之SQL" class="headerlink" title="动态SQL之SQL"></a>动态SQL之SQL</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410114519740.png" alt="image-20210410114519740" style="zoom: 80%;" />

<p>直接用sql id 上面那一段那种写法，可以省去下面的很多代码，下面写SQL想写上面那一大堆查询语句时，直接 “include refid=标签” 即可。</p>
<h3 id="动态SQL之foreach"><a href="#动态SQL之foreach" class="headerlink" title="动态SQL之foreach"></a>动态SQL之foreach</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410120128102.png" alt="image-20210410120128102" style="zoom:70%;" />

<p>哇噢，看不懂。懂了。就是你要查多个员工的数据，你传入的是多个empno参数，然后你要在xml文件中把这些参数用foreach遍历一下。</p>
<h3 id="手动处理映射关系"><a href="#手动处理映射关系" class="headerlink" title="手动处理映射关系"></a>手动处理映射关系</h3><p> 当你实体类中的属性名和数据库的列名不一致的时候，要使用resultMap来处理一下。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410141755126.png" alt="image-20210410141755126" style="zoom:67%;" />

<h3 id="Mybatis多表查询"><a href="#Mybatis多表查询" class="headerlink" title="Mybatis多表查询"></a>Mybatis多表查询</h3><h4 id="一对一关联查询"><a href="#一对一关联查询" class="headerlink" title="一对一关联查询"></a>一对一关联查询</h4><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410143034506.png" alt="image-20210410143034506"></p>
<p>看到了这个目录结构，感觉还蛮重要的，可以说一下。蓝色的Java文件夹下存放的是Java代码，其下又分为两个文件夹：mapper和pojo。pojo里面放的是数据库表对应的实体类，mapper里面存放的是要执行SQL的接口，里面定义了抽象方法。</p>
<p>比如现在你要查emp员工的一大堆信息，要求还要查询员工的部门。但是resultType只会去emp类的属性里面去找结果类型，所以现在你要在emp的实体类中加入一条dept属性。同时要在其对应的mapper映射文件中加入一个association标签，代表这是一个关联属性。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410150305312.png" alt="image-20210410150305312" style="zoom:67%;" />

<p>手动处理映射的意义是什么呢？之前我们在mapper文件中定义方法时都可以定义resultType，但是resultType只能指定一种类型。当我们想要返回多种类型时，就需要手动处理映射，使用resultMap。</p>
<p>比如我想要查询一个部门中的一些员工信息，还有这个部门的编号和地理位置等，此时我是根据部门来查，但是其中会返回员工信息。</p>
<p>在部门的实体类中定义完自身属性之后，再定义一个存放员工的list集合：</p>
<p>在mapper映射文件c中重写方法，并将返回值类型设置为resultMap，并自己定义resultMap的映射关系。</p>
<p>collection代表的是一个集合，ofType指的是集合里的元素类型。collection会把在它下面定义的resultMap放入自身集合中。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410154331669.png" alt="image-20210410154331669"></p>
<p>resuleMap就填写上面的deptJoinEmps</p>
<p>Test方法：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410154025662.png" alt="image-20210410154025662" style="zoom:67%;" />

<h4 id="一对多关联查询"><a href="#一对多关联查询" class="headerlink" title="一对多关联查询"></a>一对多关联查询</h4><p>一个部门返回多个员工，一对多</p>
<h4 id="多对多关联查询"><a href="#多对多关联查询" class="headerlink" title="多对多关联查询"></a>多对多关联查询</h4><p>这个其实好解释，前两个你会了这个你也就会了。通过project表查询正在进行的项目，里面有projectID表中的部分属性，同时projectID中有emp中的部分属性（比如empno），这样想查询哪些员工做了哪些项目就可以通过project一层一层地进行查询。</p>
<p>那结果集是怎么封装的呢？首先返回一个project对象，一个project类里面有一个list集合属性，这个集合里面装地时projectID对象，同时每个projectID对象里面又有emp属性，里面装的是emp对象（一对一）。</p>
<p>所以这个映射是先一对多，然后一对一。</p>
<p>一对多用collection，一对一用association</p>
<p>Java接口文件：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410161206393.png" alt="image-20210410161206393" style="zoom:67%;" />

<p>mapper.xml文件：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410162018095.png" alt="image-20210410162018095" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410162123507.png" alt="image-20210410162123507" style="zoom:67%;" />

<p>总结：多对多表的关系的转换需要一个中间表来处理，会转化成一些一对多和一对一</p>
<p>test方法：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410162526775.png" alt="image-20210410162526775" style="zoom:67%;" />

<p>注意，Emp实体类里面记得用Lombok注解添加构造方法和get、set方法！</p>
<h3 id="多表查询-级联积极加载"><a href="#多表查询-级联积极加载" class="headerlink" title="多表查询_级联积极加载"></a>多表查询_级联积极加载</h3><p>就是在定义collection的时候附加上一些属性。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410165203754.png" alt="image-20210410165203754" style="zoom:67%;" />

<p>select是你在往collection里放入元素的时候要调用的另一个方法。javaType是你collection的类型，column是你要往collection里放的元素，jdbcType是放入的元素类型，fetchType是加载类型，有积极加载和懒加载两种模式</p>
<h3 id="多表查询-级联懒加载"><a href="#多表查询-级联懒加载" class="headerlink" title="多表查询_级联懒加载"></a>多表查询_级联懒加载</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410165933824.png" alt="image-20210410165933824" style="zoom:67%;" />



<h3 id="MyBatis使用注解完成CRUD"><a href="#MyBatis使用注解完成CRUD" class="headerlink" title="MyBatis使用注解完成CRUD"></a>MyBatis使用注解完成CRUD</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410171438221.png" alt="image-20210410171438221" style="zoom:67%;" />

<p>直接在接口的抽象方法上@select即可指定此抽象方法要执行的查询语句，就不用在其对应的mapper映射文件中再写SQL了。当然，需要频繁改动的SQL最好还是在mapper里写，方便修改。但是有些固定的SQL语句可以使用注解来写，简化mapper里面的代码。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410171749896.png" alt="image-20210410171749896" style="zoom:60%;" />

<p>这些SQL相对来说功能都比较固定，修改可能性不大。</p>
<h3 id="Mybatis一级缓存"><a href="#Mybatis一级缓存" class="headerlink" title="Mybatis一级缓存"></a>Mybatis一级缓存</h3><p>缓存可以使连接数据库查询的次数变低。比如现在我要根据empno=7521来查询一个员工信息，一般mybatis会以键值对的形式来进行缓存。就是把emp作为键key，7521作为值value，存储在mybatis缓存中。这样下次查询7521员工信息的时候，就会直接从自身缓存中提出信息，而不会连接数据库进行多一次的查询。注意，缓存信息是存储在sqlSession中，如果你用两个sqlSession查询同一个数据，MyBatis还是会连接数据库进行查询。</p>
<p>调用sqlSession.commit()方法时会自动清空缓存。（事务提交时情空缓存，避免增删改造成的缓存不一致问题）只有增删改的时候需要手动提交事务。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410175725126.png" alt="image-20210410175725126" style="zoom:67%;" />

<h3 id="Mybatis二级缓存"><a href="#Mybatis二级缓存" class="headerlink" title="Mybatis二级缓存"></a>Mybatis二级缓存</h3><p>二级缓存可以实现跨sqlSession之间的共享数据，是在sqlSession之外的一个缓存空间。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410174712050.png" alt="image-20210410174712050" style="zoom:67%;" />

<p>二级缓存默认并不开启，需要我们手动设置开启。<strong>注意：sqlSession必须提交之后，相关数据才会放入二级缓存。</strong></p>
<p>二级缓存要求实体类必须实现序列化接口。并且可以把这些序列化的数据放入到其它位置，比如本地磁盘，Redis数据库等等。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410175927172.png" alt="image-20210410175927172" style="zoom:67%;" />

<h3 id="Mybatis三方缓存（了解）"><a href="#Mybatis三方缓存（了解）" class="headerlink" title="Mybatis三方缓存（了解）"></a>Mybatis三方缓存（了解）</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410180027734.png" alt="image-20210410180027734" style="zoom:60%;" />

<p>反正就是借助第三方数据库进行缓存，包括著名的Redis，但是这个现在用不到，因为是分布式的时候用的。</p>
<h3 id="Mybatis逆向工程（了解）"><a href="#Mybatis逆向工程（了解）" class="headerlink" title="Mybatis逆向工程（了解）"></a>Mybatis逆向工程（了解）</h3><p>自己查文档。这个好用的，自动帮你生成基础的SQL、mapper配置文件、实体类和接口这些。</p>
<h3 id="Mybatis配置文件编译问题（IDEA的小坑）"><a href="#Mybatis配置文件编译问题（IDEA的小坑）" class="headerlink" title="Mybatis配置文件编译问题（IDEA的小坑）"></a>Mybatis配置文件编译问题（IDEA的小坑）</h3><p>在Maven中添加一个插件，可以直接把xml配置文件放在蓝色Java目录下，和对应的同名接口Java文件放在一起，这样比较科学，就不用在resources目录下一级一级地去建对应的目录然后把xml文件放进去了。要导入一个依赖，这个依赖自己去网上查代码，添加到mybatis的核心配置文件中即可。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410181723525.png" alt="image-20210410181723525" style="zoom:67%;" />

<p>其实有些时候配置文件和Java代码放一块看着也挺杂的，Maven其实是建议我们把配置文件和Java代码分开放的。</p>
<p>MyBatis终于肝完了，NICE！</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>关系型数据库技术</title>
    <url>/2020/06/30/MySQL/</url>
    <content><![CDATA[<p>这里以MySQL为例。</p>
<h3 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h3><p>MySQL基本上是企业中最常用的关系型数据库了，关于MySQL的使用和可视化图形界面工具Navicat的安装这里不详细展开。(不过默默提醒一句，Navicat真的太贵了，三个月1699￥，建议想用的但是还没有参加工作的同学先淘宝，不过是真的好用，比SQLYog好用得不是一个级别)</p>
<p>这里主要是关于SQL(结构化查询语言)的介绍：</p>
<h3 id="SQL基本语法："><a href="#SQL基本语法：" class="headerlink" title="SQL基本语法："></a>SQL基本语法：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
	num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 6代表显示长度</span>
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 10个字符</span>
	sex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	enterdate <span class="token keyword">date</span><span class="token punctuation">,</span> <span class="token comment">-- date是日期类型</span>
	classname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看表的结构,展示的是表的详细信息</span>
<span class="token keyword">desc</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 查看表中数据：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 查看建表语句：</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'2022-5-8'</span><span class="token punctuation">,</span><span class="token string">'软件1班'</span><span class="token punctuation">,</span><span class="token string">'123@126.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'软件1班'</span><span class="token punctuation">,</span><span class="token string">'123@126.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 在student表中插入数据：</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'2022-5-8'</span><span class="token punctuation">,</span><span class="token string">'软件1班'</span><span class="token punctuation">,</span><span class="token string">'123@126.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 使用now()可以代表当前时间</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'软件1班'</span><span class="token punctuation">,</span><span class="token string">'123@126.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 如果插入的数据不完整，则需要说明你在哪几列插入了数据：</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>num<span class="token punctuation">,</span> name<span class="token punctuation">,</span> enterDate<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2022-5-8'</span><span class="token punctuation">,</span><span class="token string">'软件1班'</span><span class="token punctuation">,</span><span class="token string">'123@126.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改表中数据：</span>
<span class="token keyword">update</span> student <span class="token keyword">set</span> sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span> <span class="token comment">-- 表中所有数据的性别都被修改</span>

<span class="token keyword">update</span> student <span class="token keyword">set</span> sex <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token keyword">where</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 指定目标进行性别修改</span>
<span class="token comment">-- 修改数据时不要忘记加限制条件，否则你影响的就是全表的数据</span>

<span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token comment">-- 删除全表数据，注意一定要加限制条件</span>

<span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其实所有的语法结构都不用去硬记的，下个MySQL的API就行了，用多了自然就熟了</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改表的结构</span>
<span class="token comment">-- 增加一列：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 5代表总位数，2代表小数位数</span>
<span class="token keyword">update</span> student <span class="token keyword">set</span> score <span class="token operator">=</span> <span class="token number">123.1</span> <span class="token keyword">where</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 增加一列，放在最前面：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">first</span><span class="token punctuation">;</span> <span class="token comment">-- 将socre添加在首列</span>

<span class="token comment">-- 增加一列，放在sex后面：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">after</span> sex<span class="token punctuation">;</span>


<span class="token comment">-- 删除一列操作：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">drop</span> score<span class="token punctuation">;</span>

<span class="token comment">-- 修改一列：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> score <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- modify 只修改列的定义，不会改变列的名字</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> student change score score1 <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- change 同时修改列名和列的类型</span>

<span class="token comment">-- 删除表：</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span> 	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="非外键约束："><a href="#非外键约束：" class="headerlink" title="非外键约束："></a>非外键约束：</h4><p>为防止不符合规范的数据存入数据库，在用户对数据进行插入、修改、删除等操作时，MySQL    提供了一种机制来检查数据库中的数据是否满足规定的条件，以保证数据库中数据的准确性和一致性，这种机制就是完整性约束。</p>
<p>MySQL中主要支持一下几种完整性约束，如表所示，其中check约束是MySQL8中提供的支持</p>
<p>比如上表中学生学号重复了，这是不对的，所以此时我们需要加入约束</p>
<p>主键：不能为空 + 唯一 ，比如上表中学号就应该是主键</p>
<p>主键的作用：通过主键，可以识别到唯一的一条记录</p>
<p>如果主键是整数类型，那么需要自增</p>
<p>非外键约束的类型：</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210131142535301.png" alt="image-20210131142535301" style="zoom: 67%;" />

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>
	num <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> <span class="token comment">-- 主键约束，且自增</span>
	NAME <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment">-- 非空约束</span>
	sex <span class="token keyword">CHAR</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span> <span class="token comment">/* 默认约束*/</span>  <span class="token keyword">check</span><span class="token punctuation">(</span>sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">||</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 检查约束</span>
	age <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	enterdate <span class="token keyword">date</span><span class="token punctuation">,</span>
classname <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
email <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">15</span> <span class="token punctuation">)</span> <span class="token keyword">unique</span> <span class="token comment">-- 唯一约束</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">-- 添加数据	</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'软件工程01班'</span><span class="token punctuation">,</span><span class="token string">'zs@163.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'软件工程01班'</span><span class="token punctuation">,</span><span class="token string">'zs@1163.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 下面这个年龄超出范围，添加数据时报错</span>

<span class="token comment">-- 插入部分数据</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span> enterdate<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'feife'</span><span class="token punctuation">,</span><span class="token string">'2018-04-23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 添加null或default的话主键一样会自增(其它部分数据有效)，添加时主键部分数据添加成功，其它部分数据导致添加失败时，主键一样会自增</span>
<span class="token comment">-- 主键不要求连号，唯一且非空即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>约束从作用上可以分为两类：</p>
<ol>
<li>表级约束：可以约束表中任意一个或多个字段。与列定义相互独立，不包含在列定义中。与定义用 ‘,’ 分隔；必须指出要约束的名称；</li>
<li>列级约束：包含在列定义中，直接跟在该列的其它定义之后，用空格分隔，不必指定列名；</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
	num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> 
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 
	sex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token punctuation">,</span>
	age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	enterdate <span class="token keyword">date</span><span class="token punctuation">,</span>
	classname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	
	<span class="token keyword">constraint</span> pk_stu <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 这就是一个约束，pk_stu是约束的名字，我们添加的是一个主键约束,后面可以指定是给哪个列添加的约束</span>
	<span class="token comment">-- 如果想要自增，auto_increment只能添加到列的后面去，不能添加在单独写出来的主键约束后面</span>
	
	<span class="token keyword">constraint</span> ck_stu_sex <span class="token keyword">check</span> <span class="token punctuation">(</span>sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">||</span> sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token comment">-- 添加检查约束时记得标明是对哪个列信息的检查约束，以免报错的时候分不清楚</span>
	
	<span class="token keyword">constraint</span> ck_stu_age <span class="token keyword">check</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	
	<span class="token keyword">constraint</span> uq_stu_email <span class="token keyword">unique</span> <span class="token punctuation">(</span>email<span class="token punctuation">)</span>
	
	<span class="token comment">-- 非空约束和默认约束不能加表级约束，只能添加到列级约束里面</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'软件工程01班'</span><span class="token punctuation">,</span><span class="token string">'zs@163.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'软件工程01班'</span><span class="token punctuation">,</span><span class="token string">'ww@163.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
	<span class="token comment">-- 注意，主键虽然是默认自增，但是你也可以1，2，5的这样去插入不连续的主键，这个时候系统以你写入的为主，如果你没有写入或写入null，则其会自动自增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在创建表之后添加约束</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
	num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	sex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	enterdate <span class="token keyword">date</span><span class="token punctuation">,</span>
	classname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 在创建表之后添加约束：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> pk_stu <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span> <span class="token comment">-- 修改自增条件</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> ck_stu_sex <span class="token keyword">check</span><span class="token punctuation">(</span>sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">||</span> sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> ck_stu_age <span class="token keyword">check</span><span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> uq_stu_email <span class="token keyword">unique</span> <span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">desc</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="上面讲过的所有约束都是非外键约束，下面来说一说外键约束，外键约束指的是表中的某一个字段依赖于另一张表中某一字段的值。"><a href="#上面讲过的所有约束都是非外键约束，下面来说一说外键约束，外键约束指的是表中的某一个字段依赖于另一张表中某一字段的值。" class="headerlink" title="上面讲过的所有约束都是非外键约束，下面来说一说外键约束，外键约束指的是表中的某一个字段依赖于另一张表中某一字段的值。"></a>上面讲过的所有约束都是非外键约束，下面来说一说外键约束，外键约束指的是表中的某一个字段依赖于另一张表中某一字段的值。</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 先创建父表：班级表</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> class<span class="token punctuation">(</span>
	classnum <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
	cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	room <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token comment">-- 添加班级数据</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> class <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java001'</span><span class="token punctuation">,</span><span class="token string">'r003'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> class <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java002'</span><span class="token punctuation">,</span><span class="token string">'r416'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> class <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java001'</span><span class="token punctuation">,</span><span class="token string">'r103'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">desc</span> class<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> class<span class="token punctuation">;</span>

<span class="token comment">-- 一个一个添加太麻烦了，可以一次性添加多个信息：</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> class <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java001'</span><span class="token punctuation">,</span><span class="token string">'r003'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java002'</span><span class="token punctuation">,</span><span class="token string">'r416'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java001'</span><span class="token punctuation">,</span><span class="token string">'r103'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建子表(学生表)。在这里班级表是父表，学生表是子表</span>
<span class="token comment">-- 创建学生表：</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
	num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> 
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 
	classname <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">-- 取值参考class表中的cno字段，但是不要求字段名字完全重复，但是类型和长度定义要求是要完全相同的 </span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加学生信息：</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">update</span> student <span class="token keyword">set</span> classname <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">where</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- 出现问题：</span>
<span class="token comment">-- 1.添加一个学生对应的班级编号为4(但实际上没有4班）</span>

<span class="token comment">-- 2.删除班级2，不能说删就删，因为里面有学生。删除后学生表中的学生还是属于2班</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> class <span class="token keyword">where</span> classnum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">-- 出现问题的原因：</span>
<span class="token comment">-- 因为你现在的外键约束根本没用语法添加进去，现在只是逻辑上认为班级编号是外键，但是没有从语法上定义</span>

<span class="token comment">-- 解决办法：添加外键约束</span>
<span class="token comment">-- 注意：外键约束只有表级约束，没有列级约束</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
	num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> 
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 
	classnum <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 取值参考class表中的cno字段，但是不要求字段名字完全重复，但是类型和长度定义要求是要完全相同的 </span>
	
	<span class="token keyword">constraint</span> fk_stu_classnum <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span> <span class="token keyword">references</span> class <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 在创建表以后添加外键约束：</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
	num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> 
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 
	classname <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">-- 取值参考class表中的cno字段，但是不要求字段名字完全重复，但是类型和长度定义要求是要完全相同的 </span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> 	fk_stu_classnum <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span> <span class="token keyword">references</span> class <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 这时添加2班的学生会发现添加失败</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">update</span> student <span class="token keyword">set</span> classname <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">where</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- 此时删除已有学生的班级也会发现删除失败：</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> class <span class="token keyword">where</span> classnum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：删除含有外键约束的表时，先删主表，再删从表</p>
<h3 id="外键策略："><a href="#外键策略：" class="headerlink" title="外键策略："></a>外键策略：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> class<span class="token punctuation">(</span>
	classnum <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
	cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	room <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> class <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java001'</span><span class="token punctuation">,</span><span class="token string">'r003'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java002'</span><span class="token punctuation">,</span><span class="token string">'r416'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'java001'</span><span class="token punctuation">,</span><span class="token string">'r103'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
	num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> 
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 
	classname <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">-- 取值参考class表中的cno字段，但是不要求字段名字完全重复，但是类型和长度定义要求是要完全相同的 </span>
	<span class="token keyword">constraint</span> fk_stu_classnum <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span> <span class="token keyword">references</span> class <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> class<span class="token punctuation">;</span>

<span class="token comment">-- 删除班级2，如果直接删除的话肯定不行，因为有外键约束</span>
<span class="token comment">-- 加入外键策略：</span>
<span class="token comment">-- 策略1：no action 不允许操作</span>
<span class="token comment">-- 不能直接删，可以间接删，通过操作sql来完成</span>
<span class="token comment">-- 先把班级2的学生对应的班级改为3班或改为null，然后再删除班级2</span>
<span class="token keyword">update</span> student <span class="token keyword">set</span> classnum <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">where</span> classnum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> class <span class="token keyword">where</span> classnum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 

<span class="token comment">-- 策略2：使用cascate 级联操作：(在操作主表时，它会影响从表的外键信息)</span>
<span class="token comment">-- 先删除之前的外键约束，然后重新添加外键约束</span>
<span class="token comment">-- 先试试更新操作：</span>
<span class="token keyword">update</span> class <span class="token keyword">set</span> classnum <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">where</span> classnum <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> fk_stu_classnum<span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_stu_classnum <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span> <span class="token keyword">references</span> class <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span><span class="token punctuation">;</span>

<span class="token comment">-- 此时你更新class表里面的班级，学生表里面对应班级的学生的班级信息也会自动更改</span>
<span class="token comment">-- 级联操作不要轻易去用，因为如果有误操作，可能会对很多数据造成影响</span>

<span class="token comment">-- 策略3：set null 置空操作</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_stu_classnum <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span> <span class="token keyword">references</span> class <span class="token punctuation">(</span>classnum<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">set</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">set</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">-- 级联操作和置空操作也可以混着写</span>

<span class="token comment">-- 应用场合：</span>
<span class="token comment">-- 1.朋友圈删除，点赞留言都删除：级联操作</span>
<span class="token comment">-- 2.解散班级，但学生不能删除：置空操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="DDL和DML的补充："><a href="#DDL和DML的补充：" class="headerlink" title="DDL和DML的补充："></a>DDL和DML的补充：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 快速添加和已有表结构相同的表</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> student2
<span class="token keyword">as</span> 
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token comment">-- 结构和数据都和student表是一致的</span>

<span class="token comment">-- 快速添加结构一致但是没有数据的表：</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> student3
<span class="token keyword">as</span> 
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">-- 1=2永远不满足，数据添加不了，但是结构会添加进来</span>

<span class="token comment">-- 快速添加部分列和部分数据：</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> student4
<span class="token keyword">as</span> 
<span class="token keyword">select</span> name<span class="token punctuation">,</span>classnum <span class="token keyword">from</span> student <span class="token keyword">where</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除操作：</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">truncate</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>
<span class="token comment">-- delete和truncate都是删除的操作，delete属于DML操作，delete是一条一条的删数据，可以加where</span>
<span class="token comment">-- truncate是保留表的结构，直接删除整张表然后创建一张空表</span>
<span class="token comment">-- delete操作可以回滚，truncate操作会导致隐式提交，因此不能回滚</span>
<span class="token comment">-- delete操作会显示影响行数，truncate操作显示的影响行数为0</span>
<span class="token comment">-- delete删除数据后数据还是会从之前的最大值加1开始自增，truncate删除数据后数据从1开始重新自增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="DQL查询操作-整个数据库中最重要的一部分，实际开发中用的最多的操作"><a href="#DQL查询操作-整个数据库中最重要的一部分，实际开发中用的最多的操作" class="headerlink" title="DQL查询操作(整个数据库中最重要的一部分，实际开发中用的最多的操作)"></a>DQL查询操作(整个数据库中最重要的一部分，实际开发中用的最多的操作)</h3><p>下面用一个自己写的公司员工表当作例子，来练习单表的查询：</p>
<p>表格样例(看着很多，其实用Navicat写不了多久就写出来了，主要是可以CTRL+D直接复制原有数据，修改一下关键数据即可)：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 准备四张表：dept(部门表)，emp(员工表)，salgrade(薪资等级表)，bonus(奖金表)</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> dept<span class="token punctuation">(</span>
	deptno <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	dname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	loc <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> dept
	<span class="token keyword">add</span> <span class="token keyword">constraint</span> pk_dept <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>
	empno <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
	emname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	job <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	mgr <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	hiredate <span class="token keyword">date</span><span class="token punctuation">,</span>
	sal <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	comm <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	deptno <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> emp
	<span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_deptno <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>deptno<span class="token punctuation">)</span>
	<span class="token keyword">references</span> dept <span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>
	

<span class="token keyword">create</span> <span class="token keyword">table</span> salgrade<span class="token punctuation">(</span>
	grade <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
	losal <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	hisal <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> bouns<span class="token punctuation">(</span>
	ename <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	job <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	sal <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	comm <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>deptno<span class="token punctuation">,</span> dname<span class="token punctuation">,</span> loc<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'accounting'</span><span class="token punctuation">,</span> <span class="token string">'newyork'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>deptno<span class="token punctuation">,</span> dname<span class="token punctuation">,</span> loc<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'research'</span><span class="token punctuation">,</span> <span class="token string">'dallas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>deptno<span class="token punctuation">,</span> dname<span class="token punctuation">,</span> loc<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">'sales'</span><span class="token punctuation">,</span> <span class="token string">'chicago'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> dept <span class="token punctuation">(</span>deptno<span class="token punctuation">,</span> dname<span class="token punctuation">,</span> loc<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'operations'</span><span class="token punctuation">,</span> <span class="token string">'boston'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7369</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk1'</span><span class="token punctuation">,</span> <span class="token number">7902</span><span class="token punctuation">,</span> <span class="token string">'1990-12-17'</span><span class="token punctuation">,</span> <span class="token number">6800</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7370</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk2'</span><span class="token punctuation">,</span> <span class="token number">7903</span><span class="token punctuation">,</span> <span class="token string">'1990-12-18'</span><span class="token punctuation">,</span> <span class="token number">2800</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7371</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk3'</span><span class="token punctuation">,</span> <span class="token number">7904</span><span class="token punctuation">,</span> <span class="token string">'1990-12-11'</span><span class="token punctuation">,</span> <span class="token number">3800</span><span class="token punctuation">,</span> <span class="token number">1300</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7372</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk4'</span><span class="token punctuation">,</span> <span class="token number">7905</span><span class="token punctuation">,</span> <span class="token string">'1990-12-12'</span><span class="token punctuation">,</span> <span class="token number">4800</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7373</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk5'</span><span class="token punctuation">,</span> <span class="token number">7906</span><span class="token punctuation">,</span> <span class="token string">'1990-12-13'</span><span class="token punctuation">,</span> <span class="token number">5800</span><span class="token punctuation">,</span> <span class="token number">1100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7374</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk6'</span><span class="token punctuation">,</span> <span class="token number">7907</span><span class="token punctuation">,</span> <span class="token string">'1990-12-14'</span><span class="token punctuation">,</span> <span class="token number">1100</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7375</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk7'</span><span class="token punctuation">,</span> <span class="token number">7902</span><span class="token punctuation">,</span> <span class="token string">'1990-12-15'</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">1300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7376</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk8'</span><span class="token punctuation">,</span> <span class="token number">7908</span><span class="token punctuation">,</span> <span class="token string">'1990-12-17'</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">1700</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7377</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk9'</span><span class="token punctuation">,</span> <span class="token number">7909</span><span class="token punctuation">,</span> <span class="token string">'1990-12-16'</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">1100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7378</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk10'</span><span class="token punctuation">,</span> <span class="token number">7912</span><span class="token punctuation">,</span> <span class="token string">'1990-12-10'</span><span class="token punctuation">,</span> <span class="token number">8100</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7379</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk11'</span><span class="token punctuation">,</span> <span class="token number">7922</span><span class="token punctuation">,</span> <span class="token string">'1990-12-27'</span><span class="token punctuation">,</span> <span class="token number">8300</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7380</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk12'</span><span class="token punctuation">,</span> <span class="token number">7932</span><span class="token punctuation">,</span> <span class="token string">'1990-12-12'</span><span class="token punctuation">,</span> <span class="token number">8100</span><span class="token punctuation">,</span> <span class="token number">3100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7381</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk13'</span><span class="token punctuation">,</span> <span class="token number">7942</span><span class="token punctuation">,</span> <span class="token string">'1990-12-19'</span><span class="token punctuation">,</span> <span class="token number">8200</span><span class="token punctuation">,</span> <span class="token number">4100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> mgr<span class="token punctuation">,</span> hiredate<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7382</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'clerk14'</span><span class="token punctuation">,</span> <span class="token number">7952</span><span class="token punctuation">,</span> <span class="token string">'1990-12-13'</span><span class="token punctuation">,</span> <span class="token number">7800</span><span class="token punctuation">,</span> <span class="token number">1900</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">insert</span> <span class="token keyword">into</span> salgrade <span class="token punctuation">(</span>grade<span class="token punctuation">,</span> losal<span class="token punctuation">,</span> hisal<span class="token punctuation">)</span>
<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> salgrade <span class="token punctuation">(</span>grade<span class="token punctuation">,</span> losal<span class="token punctuation">,</span> hisal<span class="token punctuation">)</span>
<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">1400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> salgrade <span class="token punctuation">(</span>grade<span class="token punctuation">,</span> losal<span class="token punctuation">,</span> hisal<span class="token punctuation">)</span>
<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">1600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> salgrade <span class="token punctuation">(</span>grade<span class="token punctuation">,</span> losal<span class="token punctuation">,</span> hisal<span class="token punctuation">)</span>
<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> salgrade <span class="token punctuation">(</span>grade<span class="token punctuation">,</span> losal<span class="token punctuation">,</span> hisal<span class="token punctuation">)</span>
<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1100</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">drop</span> <span class="token keyword">table</span> salgrade<span class="token punctuation">;</span>

<span class="token comment">-- 查看表：</span>
<span class="token comment">-- 部门表：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span>

<span class="token comment">-- 员工表：</span>
<span class="token comment">-- mgr代表的是上级领导编号</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- 员工表有两个外键，一个是deptno，另一个是empno</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bouns<span class="token punctuation">;</span>
<span class="token comment">-- 这个表不常用，没有数据 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="说几个简单的SQL查询语句的用法："><a href="#说几个简单的SQL查询语句的用法：" class="headerlink" title="说几个简单的SQL查询语句的用法："></a>说几个简单的SQL查询语句的用法：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 对emp进行查询</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 起别名(中间可以加as，也可以省略,别名可以加单引号或双引号，别名中间有空格或特殊符号时时必须加引号)</span>
<span class="token keyword">select</span> empno 员工编号<span class="token punctuation">,</span> emname 员工名字<span class="token punctuation">,</span> sal 员工工资 <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 在查询过程中加入算数运算符</span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> sal<span class="token operator">+</span><span class="token number">1000</span> <span class="token string">'涨薪后'</span><span class="token punctuation">,</span> deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">&lt;</span> <span class="token number">7500</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> sal <span class="token operator">+</span> comm <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- 注意：sal和comm中只要有一个为mull，则相加结果为null</span>

<span class="token comment">-- 去重操作,在你选的选项前面加一个distinct</span>
<span class="token keyword">select</span> job <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">distinct</span> job <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 排序: (默认情况下是升序排列)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">asc</span><span class="token punctuation">;</span> <span class="token comment">-- 指定升序排列</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">;</span> <span class="token comment">-- 指定降序排列</span>

<span class="token comment">-- 在工资相同时，按部门降序排序</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">asc</span><span class="token punctuation">,</span> deptno <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span>  <span class="token keyword">binary</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">-- 加binary代表区分大小写</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">between</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">3000</span><span class="token punctuation">;</span> <span class="token comment">-- 工资在1500和3000之间</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 只能是10或者20，不是区间噢</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'clerk1'</span><span class="token punctuation">,</span><span class="token string">'clerk2'</span><span class="token punctuation">,</span><span class="token string">'clerk12'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 和上面同理</span>

<span class="token comment">-- where子句 + 模糊查询：</span>
<span class="token comment">-- 查询名字中带a的</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emname <span class="token operator">like</span> <span class="token string">'%k%'</span><span class="token punctuation">;</span> <span class="token comment">-- %代表任意多个字符</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emname <span class="token operator">like</span> <span class="token string">'_i%'</span><span class="token punctuation">;</span> <span class="token comment">-- _代表任意一个字符</span>

<span class="token comment">-- 关于null的判断：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">-- 关于小括号的使用</span>
<span class="token comment">-- 加小括号是为了增加可读性</span>
<span class="token comment">-- and的优先级大于or的优先级,(and是且，or是或)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">'clerk1'</span> <span class="token operator">or</span> job <span class="token operator">=</span> <span class="token string">'clerk2'</span> <span class="token operator">and</span> sal <span class="token operator">>=</span><span class="token number">1500</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用函数："><a href="#使用函数：" class="headerlink" title="使用函数："></a>使用函数：</h3><h3 id="单行函数："><a href="#单行函数：" class="headerlink" title="单行函数："></a>单行函数：</h3><p>单行函数：单行函数是指对每一条输入值进行计算，并得到相应的计算结果，然后返回给用户，也就是说，每条记录作为一个输入参数，经过函数计算得到相应结果。</p>
<p>常用的单行函数主要包括字符串函数、数值函数、日期与时间函数、流程函数以及其他函数。</p>
<h3 id="多行函数："><a href="#多行函数：" class="headerlink" title="多行函数："></a>多行函数：</h3><p>多行函数是指对一组数据进行计算，针对这一组数据进行（多行记录）只返回一个结果，也称分组函数。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 函数举例：</span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> lower<span class="token punctuation">(</span>emname<span class="token punctuation">)</span><span class="token punctuation">,</span> upper<span class="token punctuation">(</span>emname<span class="token punctuation">)</span><span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  <span class="token comment">-- 转换大小写</span>
<span class="token comment">-- 函数的功能：封装了特定的一些功能，我们之间拿过来使用，可以实现对应的功能</span>
<span class="token comment">-- 函数的作用：为了提高select的能力</span>
<span class="token comment">-- 注意：函数没有改变数据自身的值，而是在真实数据的上面进行加工和处理，展示新的结果</span>

<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- 最大值，最小值，数量(拿工资的人数)，总和，均值</span>
<span class="token comment">-- lower, upper:改变每一条数据，每一条数据对应一个结果，单行函数</span>
<span class="token comment">-- select max(sal), min(sal), count(sal), sum(sal), avg(sal) from emp; 多个数据返回一个结果，多行函数，多行函数也成为分组函数</span>
<span class="token comment">-- PS:除了多行函数，就是单行函数，多行函数就只有上面写出来的那5个，除了那5个函数以外全部都是单行函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.字符串函数：</span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span> length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">,</span> substring<span class="token punctuation">(</span>ename<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- substring:字符串函数：2代表从下标为2开始，截取长度为3.  （字符串下标从1开始）</span>

<span class="token comment">-- 2.数值函数</span>
<span class="token keyword">select</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ceil<span class="token punctuation">(</span><span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span><span class="token number">5.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- 取绝对值，向上取整，向下取整，round:四舍五入</span>
<span class="token comment">-- 这里会输出144行相同的数据，因为emp里有14个员工</span>

<span class="token keyword">select</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ceil<span class="token punctuation">(</span><span class="token number">5.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span><span class="token number">5.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span> 
<span class="token comment">-- dual是一个伪表，就是你想查什么数据从这里输出即可(只有一行) </span>
<span class="token comment">-- 如果没有where条件的话，from dual可以省略不写 </span>

<span class="token keyword">select</span> ceil<span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
 
<span class="token keyword">select</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- mod是取模函数</span>

<span class="token comment">-- 日期与时间函数</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 获取系统当前时间：</span>
<span class="token keyword">select</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- curdate表示的是年月日，curtime表示的是时分秒</span>

<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 这个是年月日+时分秒</span>
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 等待三秒之后在显示年月日时分秒</span>
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>， <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 等待三秒之后在显示年月日时分秒</span>
<span class="token comment">-- now()前后都一样，sysdate()后面的比前面的慢三秒钟</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span> <span class="token string">'lili'</span><span class="token punctuation">,</span> <span class="token string">'salesman'</span><span class="token punctuation">,</span> <span class="token number">7698</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- now()可以表示年月日时分秒，但是插入数据还是要参照表的结构的</span>

<span class="token comment">-- 流程函数</span>
<span class="token comment">-- if相关：</span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sal <span class="token operator">></span> <span class="token number">2500</span><span class="token punctuation">,</span> <span class="token string">'高薪'</span><span class="token punctuation">,</span> <span class="token string">'低薪'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- if else 双分支结构 </span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sal <span class="token operator">></span> <span class="token number">2500</span><span class="token punctuation">,</span> <span class="token string">'高薪'</span><span class="token punctuation">,</span> <span class="token string">'低薪'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'薪资等级'</span><span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- if else 双分支结构 </span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> sal <span class="token operator">+</span> ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- comm如果为空则为0, 但分支结构</span>

<span class="token keyword">select</span> <span class="token keyword">nullif</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">nullif</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
<span class="token comment">-- 相同则为null，不相同则为第一个数</span>

<span class="token comment">-- case相关：</span>
<span class="token comment">-- case等值判断：</span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> 
<span class="token keyword">case</span> job 
	<span class="token keyword">when</span> <span class="token string">'cleck1'</span> <span class="token keyword">then</span> <span class="token string">'店员1'</span>
	<span class="token keyword">when</span> <span class="token string">'salesman'</span> <span class="token keyword">then</span> <span class="token string">' 销售'</span>
	<span class="token keyword">when</span> <span class="token string">'cleck2'</span> <span class="token keyword">then</span> <span class="token string">'店员2'</span>
	<span class="token keyword">else</span> <span class="token string">'其它'</span>
<span class="token keyword">end</span> <span class="token string">'岗位'</span><span class="token punctuation">,</span> <span class="token comment">-- 给这一栏起名叫岗位</span>
sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- case区间判断</span>

<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> 
<span class="token keyword">case</span> sal
	<span class="token keyword">when</span> sal <span class="token operator">&lt;=</span> <span class="token number">1000</span> <span class="token keyword">then</span> <span class="token string">'A'</span>
	<span class="token keyword">when</span> sal <span class="token operator">&lt;=</span> <span class="token number">2000</span> <span class="token keyword">then</span> <span class="token string">'B'</span>
	<span class="token keyword">when</span> sal <span class="token operator">&lt;=</span> <span class="token number">3000</span> <span class="token keyword">then</span> <span class="token string">'C'</span>
	<span class="token keyword">else</span> <span class="token string">'D'</span>
<span class="token keyword">end</span> <span class="token string">'工资等级'</span><span class="token punctuation">,</span>
deptno <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 	json函数：我们现在还没学json，先不提</span>

<span class="token comment">-- 其它函数：</span>
<span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>多行函数：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 5个多行函数：</span>
<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> 
<span class="token comment">-- 多行函数会自动忽略null值</span>

<span class="token comment">-- max, min, count 针对所有类型都可以，但是sum和avg只针对数值型有效</span>
<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>emname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>emname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>emname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>emname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>emname<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> 

<span class="token comment">-- count -- 计数</span>
<span class="token comment">-- 统计表的记录数，方式一：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 一般用count(*)来统计记录数</span>

<span class="token comment">-- 方式二：</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 会显示14个1(和上一节中的原理一样)</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 会显示14(表中元素个数)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 统计各个部门的平均工资：</span>
<span class="token keyword">select</span> deptno<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment">-- 字段和多行函数不可以同时使用（avg只有一个，deptno14个，显示哪个？）</span>

<span class="token comment">-- 但是可以分组显示：</span>
<span class="token keyword">select</span> deptno<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span> <span class="token comment">-- 字段和多行函数不可以同时使用,除非这个字段属于分组</span>
<span class="token comment">-- 分别输出deptno为10，20，30，40时不同情况下的平均工资</span>

<span class="token keyword">select</span> deptno<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">order</span> <span class="token keyword">by</span> deptno <span class="token keyword">desc</span><span class="token punctuation">;</span> 

<span class="token comment">-- 统计各个岗位的平均工资：</span>
<span class="token keyword">select</span> job<span class="token punctuation">,</span> lower<span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span> <span class="token comment">-- 显示job，顺便显示全部小写的job</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多表查询99语法："><a href="#多表查询99语法：" class="headerlink" title="多表查询99语法："></a>多表查询99语法：</h3><h4 id="1-交叉连接、自然连接、内连接"><a href="#1-交叉连接、自然连接、内连接" class="headerlink" title="1. 交叉连接、自然连接、内连接"></a>1. 交叉连接、自然连接、内连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> deptno <span class="token keyword">from</span> emp<span class="token punctuation">;</span>

<span class="token comment">-- 查询员工的编号，姓名，部门编号，部门名称：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span> <span class="token comment">-- 查询部门编号</span>

<span class="token comment">-- 多表查询：</span>
<span class="token comment">-- 交叉连接 cross join, MySQL中cross join的cross可以省略</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp
<span class="token keyword">cross</span> <span class="token keyword">join</span> dept<span class="token punctuation">;</span> <span class="token comment">-- 笛卡尔乘积，没有实际意义，只有理论意义</span>

<span class="token comment">-- 自然连接 natural join</span>
<span class="token comment">-- 优点：自动匹配所有的同名列</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp
<span class="token keyword">natural</span> <span class="token keyword">join</span> dept<span class="token punctuation">;</span>
<span class="token comment">-- 同名列只展示一次</span>

<span class="token comment">-- 缺点：查询字段的时候没有指定字段所属的数据库表，效率低</span>
<span class="token comment">-- 解决办法：指定表名即可</span>
<span class="token keyword">select</span> emp<span class="token punctuation">.</span>empno<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>emname<span class="token punctuation">,</span>  emp<span class="token punctuation">.</span>sal<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>dname<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>loc<span class="token punctuation">,</span> dept<span class="token punctuation">.</span>deptno
<span class="token keyword">from</span> emp
<span class="token keyword">natural</span> <span class="token keyword">join</span> dept<span class="token punctuation">;</span>

<span class="token comment">-- 缺点：表名太长了写起来会很复杂，给表名起一个别名(使用表名的开头字母)</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>empno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>emname<span class="token punctuation">,</span>  e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dname<span class="token punctuation">,</span> d<span class="token punctuation">.</span>loc<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptno
<span class="token keyword">from</span> emp e
<span class="token keyword">natural</span> <span class="token keyword">join</span> dept d<span class="token punctuation">;</span>

<span class="token comment">-- 自然连接natural join 缺点：自动匹配表中所有同名列，但是有时候我们希望只匹配部分同名列</span>
<span class="token comment">-- 解决办法：内连接的情况下使用using 子句</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 	
<span class="token keyword">from</span> emp e
<span class="token keyword">cross</span> <span class="token keyword">join</span> dept d <span class="token comment">-- inner可以不写</span>
<span class="token keyword">using</span><span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 只匹配deptno的同名列</span>
<span class="token comment">-- 这里不能写natural join，这里是内连接</span>


<span class="token comment">-- using子句的缺点：关联的字段，必须是同名的</span>
<span class="token comment">-- 但是emp表里的deptno在dept表里面不一定也叫deptno，所以可能会出现问题</span>
<span class="token comment">-- 解决：内连接情况下使用on子句</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">inner</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 多表连接查询的类型：1.cross交叉连接  2.natural join自然连接  </span>
<span class="token comment">-- 3. 内连接 -using子句   4.内连接 -on子句</span>
<span class="token comment">-- 综合来看：内连接on子句是用的最多的</span>

<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">inner</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">)</span>
<span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">7000</span><span class="token punctuation">;</span>

<span class="token comment">-- 条件：</span>
<span class="token comment">-- 1.筛选条件：where，having</span>
<span class="token comment">-- 2.连接条件：on，natural，using   </span>
<span class="token comment">-- SQL99语法：筛选条件和连接条件是分开的，92版本的不分开</span>
<span class="token comment">-- 还有92版本，实际开发中99和92都有人用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="外连接语法"><a href="#外连接语法" class="headerlink" title="外连接语法"></a>外连接语法</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- inner join  -on子句：显示的是所有匹配的信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">inner</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span>
<span class="token comment">-- on子句的内连接出现的问题：如果40号部门没有员工。则内连接查询中40号部门就不会显示在结果中</span>

<span class="token comment">-- 外连接：除了显示匹配的数据之外，还可以显示部分或者全部不匹配的数据</span>

<span class="token comment">-- 左外连接：left outer join -- 左边的那张表的信息即使不匹配也能查询出结果</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>

<span class="token comment">-- 右外连接：left outer join -- 右边的那张表的信息即使不匹配也能查询出结果</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>


<span class="token comment">-- 全外连接：left outer join -- 左右两张表的信息即使不匹配也能查询出结果</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>
<span class="token comment">-- 报错了，因为full outer join 全外连接语法在MySQL中不支持，但是在Oracle中支持</span>

<span class="token comment">-- 解决MySQL中不支持全外连接的问题：</span>
<span class="token comment">-- 让左外连接和右外连接取并集，使用关键字：union -取并集</span>
<span class="token comment">-- union：去重</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno
<span class="token keyword">union</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>

<span class="token comment">-- union all: 不去重</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno
<span class="token keyword">union</span> <span class="token keyword">all</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp e
<span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>

<span class="token comment">-- MySQL中对集合操作支持比较弱，只支持并集操作，交集、差集不支持(Oracle中支持)</span>
<span class="token comment">-- outer可以省略不写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多表查询92语法"><a href="#多表查询92语法" class="headerlink" title="多表查询92语法"></a>多表查询92语法</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询员工编号，姓名，薪水，员工部门编号，部门名称：</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>empno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>emname<span class="token punctuation">,</span> e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dname
<span class="token keyword">from</span> emp e<span class="token punctuation">,</span> dept d<span class="token punctuation">;</span>
<span class="token comment">-- 出现了笛卡尔积，56条记录(14*4)，没有什么意义，相当于99语法里面的cross join交叉连接</span>

<span class="token comment">-- 相当于99语法中的natural join</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>empno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>emname<span class="token punctuation">,</span> e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dname
<span class="token keyword">from</span> emp e<span class="token punctuation">,</span> dept d
<span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>


<span class="token comment">-- 查询员工编号，姓名，薪水，员工部门编号，部门名称，只显示工资大于2000的员工</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>empno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>emname<span class="token punctuation">,</span> e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dname
<span class="token keyword">from</span> emp e<span class="token punctuation">,</span> dept d
<span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno <span class="token operator">and</span> e<span class="token punctuation">.</span>sal <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">;</span>


<span class="token comment">-- 查询员工的姓名，岗位，上级编号，上级名称（自连接）</span>
<span class="token keyword">select</span> e1<span class="token punctuation">.</span>emname<span class="token punctuation">,</span> e1<span class="token punctuation">.</span>job<span class="token punctuation">,</span> e1<span class="token punctuation">.</span>mgr<span class="token punctuation">,</span> e2<span class="token punctuation">.</span>emname
<span class="token keyword">from</span> emp e1<span class="token punctuation">,</span> emp e2
<span class="token keyword">where</span> e1<span class="token punctuation">.</span>mgr <span class="token operator">=</span> e2<span class="token punctuation">.</span>empno<span class="token punctuation">;</span>

<span class="token comment">-- 三表查询： 查询员工的编号、姓名、薪水、部门编号、部门名称、薪水等级</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>emname<span class="token punctuation">,</span> e<span class="token punctuation">.</span>empno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dname<span class="token punctuation">,</span> s<span class="token punctuation">.</span>grade <span class="token keyword">from</span> emp e<span class="token punctuation">,</span> dept d<span class="token punctuation">,</span> salgrade s
<span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno <span class="token operator">and</span> e<span class="token punctuation">.</span>sal <span class="token operator">>=</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> e<span class="token punctuation">.</span>sal <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span>


<span class="token comment">-- 总结：</span>
<span class="token comment">-- 1. 92语法麻烦</span>
<span class="token comment">-- 2. 92语法中，表的连接条件 和 筛选的过滤条件是放在一起的，没有分开</span>
<span class="token comment">-- 99语法中提供了更多的查询连接类型：cross, natural, outer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 引入子查询：</span>
<span class="token comment">-- 查询所有比“CLERK"工资高的员工的信息</span>
<span class="token comment">-- 步骤1：查询“clerk1”工资</span>
<span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk1"</span><span class="token punctuation">;</span> <span class="token comment">-- 查询结果为6800</span>

<span class="token comment">-- 步骤2：查询所有工资比6800高的员工的信息</span>
<span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">6800</span><span class="token punctuation">;</span>

<span class="token comment">-- 两次命令解决问题：--> 效率低，第二个命令依托于第一个命令，第一个命令的结果给第二个命令使用</span>
<span class="token comment">-- 但是因为第一个命令的结果可能会修改。所以第二个命令也可能会修改（比如涨工资）</span>


<span class="token comment">-- 将步骤1和步骤2合并--> 子查询：</span>
<span class="token comment">-- 后面括号里的查询就是子查询，先执行子查询</span>
<span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 一个命令解决问题，效率高</span>
<span class="token comment">-- 子查询可以独立运行，这种子查询成为不相关子查询，不相关子查询分为单行子查询和多行子查询</span>
<span class="token comment">-- 子查询返回的结果为1行则为单行子查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="单行子查询："><a href="#单行子查询：" class="headerlink" title="单行子查询："></a>单行子查询：</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 单行子查询：</span>
<span class="token comment">-- 查询工资高于平均工资的雇员名字和工资：</span>
<span class="token keyword">select</span> emname<span class="token punctuation">,</span> sal
<span class="token keyword">from</span> emp
<span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询和clerk1同一部门且工资比他低的雇员名字和工资：</span>
<span class="token keyword">select</span> emname<span class="token punctuation">,</span> sal
<span class="token keyword">from</span> emp
<span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk1"</span><span class="token punctuation">)</span> 
			<span class="token operator">and</span> 
			sal <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 查询职务和mike相同，但是入职时间比mike早的员工的信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> emp
<span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> emname <span class="token operator">=</span> <span class="token string">"mike"</span><span class="token punctuation">)</span>
			<span class="token operator">and</span> 
			hiredate <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> hiredate <span class="token keyword">from</span> emp <span class="token keyword">where</span> emname <span class="token operator">=</span> <span class="token string">"mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>写SQL，先读懂需求再写，别着急一上来就写，那样可能写的不对</p>
<h4 id="多行子查询："><a href="#多行子查询：" class="headerlink" title="多行子查询："></a>多行子查询：</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 多行子查询意味着子查询查询出来的结果是多个</span>

<span class="token comment">-- 1. 查询部门20中雇员职务与部门10中雇员职务相同的雇员的信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- 查询部门20中的雇员信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">-- 1,2,3,8,12,14</span>
<span class="token comment">-- 部门10有哪些职务</span>
<span class="token keyword">select</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">-- 4,5,6,9</span>

<span class="token comment">-- 查询部门20中雇员职务与部门10中雇员职务相同的雇员的信息</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span> 
<span class="token operator">and</span> job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 或者把 in 换成 =any</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span> 
<span class="token operator">and</span> job <span class="token operator">=</span> <span class="token keyword">any</span><span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 2.查询工资比所有的“clerk14”都高的雇员的编号、名字和工资</span>
<span class="token keyword">select</span> emname<span class="token punctuation">,</span> empno<span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- "clerk14"的工资：</span>
<span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk14"</span><span class="token punctuation">;</span>


<span class="token keyword">select</span> emname<span class="token punctuation">,</span> empno<span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp
<span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 或者:(单行子查询)</span>
<span class="token keyword">select</span> emname<span class="token punctuation">,</span> empno<span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp
<span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 3.查询工资低于“clerk”的雇员的信息：</span>
<span class="token comment">-- 查询雇员信息：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> 
sal <span class="token operator">&lt;</span> <span class="token keyword">any</span><span class="token punctuation">(</span><span class="token keyword">select</span> sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 或者：</span>
<span class="token keyword">select</span> emname<span class="token punctuation">,</span> empno<span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp
<span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk"</span><span class="token punctuation">)</span>
<span class="token comment">-- 只要有一个小于就行</span>
<span class="token comment">-- clerk本身不算</span>
<span class="token operator">and</span> job <span class="token operator">!=</span> <span class="token string">"clerk"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="相关子查询："><a href="#相关子查询：" class="headerlink" title="相关子查询："></a>相关子查询：</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 相关子查询：子查询不可以独立运行，且先运行外查询，再运行子查询</span>

<span class="token comment">-- 查询最高工资的员工（不相关子查询）</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">-- 查询本部门工资最高的员工（相关子查询）</span>
<span class="token comment">-- 方法1：不相关子查询：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 使用union可以合并并去重：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">union</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">union</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>
<span class="token keyword">union</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">and</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 方法2：相关子查询</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> sal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> e<span class="token punctuation">.</span> deptno<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span>

<span class="token comment">-- 查询工资高于其所在岗位的平均工资的那些员工（相关子查询）</span>
<span class="token comment">-- 不相关子查询：</span>
<span class="token keyword">select</span> <span class="token operator">*</span>  <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk"</span> <span class="token operator">and</span> sal <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">"clerk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 写很多个岗位之后union一下即可，但是发现有多少个岗位可能是不确定的</span>

<span class="token comment">-- 相关子查询：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> sal <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp e2 <span class="token keyword">where</span> e2<span class="token punctuation">.</span>job <span class="token operator">=</span> e<span class="token punctuation">.</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="事务及其特征："><a href="#事务及其特征：" class="headerlink" title="事务及其特征："></a>事务及其特征：</h4><p>事务（transaction）是用来维护数据库完整性的，它能够保证一系列的MySQL操作要么全部执行，要么全不执行</p>
<p>事务的四大特性（ACID)：原子性、一致性、隔离性、持久性</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- sql展示：通过事务确保转账安全</span>
<span class="token comment">-- 创建一个账户表：</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> account<span class="token punctuation">(</span>
	id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
	uname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
	balance <span class="token keyword">double</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span>

<span class="token comment">-- 在表中插入数据：</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> account <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'丽丽'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'小刚'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 让丽丽给小刚转200块钱：</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">200</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">200</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">-- 默认一个DML语句是一个事务</span>
<span class="token comment">-- 所以上面的操作执行了两个事务</span>

<span class="token comment">-- 必须让上面的两个操作控制在一个事务中：</span>

<span class="token comment">-- 手动开启事务：</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>

<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">200</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">200</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">-- 手动回滚：刚才执行的操作全部取消：</span>
<span class="token keyword">rollback</span><span class="token punctuation">;</span>

<span class="token comment">-- 提交</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>

<span class="token comment">-- 在回滚和提交之前，数据库中的数据都是操作的缓存中的数据，而不是数据库的真实数据</span>
<span class="token comment">-- 记得在使用回滚和提交之前先手动开启事务，不然rollback和commit都没用...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="事务并发问题："><a href="#事务并发问题：" class="headerlink" title="事务并发问题："></a>事务并发问题：</h4><p>可能发生的并发问题一共有下面三种：脏读（Dirty read）、不可重复读（解决办法是锁住一行数据）、幻读（phantom read）–解决办法是锁住表</p>
<h4 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h4><p>最后一个序列化可以解决所有问题，但是速度慢，我们要权衡各种利弊选择不同的隔离级别。一般我们都用重复读的隔离级别。MySQL用的默认级别就是重复读</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210216130518124.png" alt="image-20210216130518124" style="zoom: 80%;" />



<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看事务的默认隔离级别：</span>
<span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span>

<span class="token comment">-- 设置事务的隔离级别，设置当前会话的隔离级别：</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">serializable</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="视图："><a href="#视图：" class="headerlink" title="视图："></a>视图：</h4><p>视图本质上就是一个查询语句，是一个不存在的虚拟的表，查看视图其实就是查看试图对应的SQL语句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建单表视图</span>
<span class="token keyword">create</span> <span class="token keyword">view</span> myview01
<span class="token keyword">as</span> 
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> deptno 
<span class="token keyword">from</span> emp
<span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>


<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> myview01
<span class="token keyword">as</span> 
<span class="token keyword">select</span> empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> deptno 
<span class="token keyword">from</span> emp
<span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">with</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">;</span> <span class="token comment">-- 如果你插入的数据不是20号部门的员工，我就会进行校验</span>


<span class="token comment">-- 查看视图：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myview01<span class="token punctuation">;</span>

<span class="token comment">-- 在视图中插入数据：</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> myview01<span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span> <span class="token string">"lili"</span><span class="token punctuation">,</span> <span class="token string">"clerk15"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> myview01<span class="token punctuation">(</span>empno<span class="token punctuation">,</span> emname<span class="token punctuation">,</span> job<span class="token punctuation">,</span> deptno<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">,</span> <span class="token string">"feifei"</span><span class="token punctuation">,</span> <span class="token string">"clerk15"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 有了check option后插入不是20部门的数据会报错</span>

<span class="token comment">-- 创建多表视图：</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> myview02 
<span class="token keyword">as</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>empno<span class="token punctuation">,</span> e<span class="token punctuation">.</span>emname<span class="token punctuation">,</span> e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp e
<span class="token keyword">join</span> dept d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno
<span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myview02<span class="token punctuation">;</span>

<span class="token comment">-- 创建统计视图：</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> myview03
<span class="token keyword">as</span>
<span class="token keyword">select</span>  e<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dname<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> emp e
<span class="token keyword">join</span> dept d
<span class="token keyword">using</span> <span class="token punctuation">(</span>deptno<span class="token punctuation">)</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myview03<span class="token punctuation">;</span>


<span class="token comment">-- 创建基于视图的视图：</span>

<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> myview04
<span class="token keyword">as</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myview03 <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myview04<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="存储过程："><a href="#存储过程：" class="headerlink" title="存储过程："></a>存储过程：</h4><p>存储过程可以使我们的调用代码更加简洁，企业中一般有专门的人员去写存储过程，我们Java开发人员直接去调就可以了</p>
<p>但是SQL基本上是一个命令实现一个处理，所以也简洁不了多少（纳尼？）</p>
<p>存储过程其实就是一段小程序，(SQL就是程序语言)，类似于Java中的方法或者C++中的函数，他把我们的SQL一起写在存储过程里面。你直接调用就行</p>
<p>自己定义一个存储过程：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 定义一个存储过程</span>

<span class="token comment">-- 定义一个没有返回值的存储过程。</span>
<span class="token comment">-- 实现模糊查询的操作</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emname <span class="token operator">like</span> <span class="token string">"%k%"</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">procedure</span> myprocedure01<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 和方法一样，可以传入参数</span>
<span class="token keyword">begin</span>
	<span class="token keyword">if</span> name <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">then</span>
		<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emname <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token comment">-- 在MySQL里面拼接字符串需要使用字符串拼接函数concat</span>
	<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除存储过程：</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> myprocedure01<span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程：</span>
<span class="token keyword">call</span> myprocedure01<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token keyword">call</span> myprocedure01<span class="token punctuation">(</span><span class="token string">'k'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 定义一个有返回值的存储过程：</span>

<span class="token keyword">create</span> <span class="token keyword">procedure</span> myprocedure02<span class="token punctuation">(</span><span class="token operator">in</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token comment">-- 返回值写在参数列表中，用in和out区分参数和返回值</span>
<span class="token keyword">begin</span>
	<span class="token keyword">if</span> name <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">then</span>
		<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emname <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token comment">-- 在MySQL里面拼接字符串需要使用字符串拼接函数concat</span>
	<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
	<span class="token keyword">select</span> found_rows<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">into</span> num<span class="token punctuation">;</span>
	<span class="token comment">-- found_rows()是MySQL中定义的一个函数，作用是返回查询结果的条数</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程：</span>

<span class="token keyword">call</span> myprocedure02<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token variable">@num</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 用num接收返回结果</span>
<span class="token keyword">select</span> <span class="token variable">@num</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>关于多线程</title>
    <url>/2020/06/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>高并发这篇文章里暂且不谈，先聊一聊多线程。</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="创建线程的方式一：继承Thread类"><a href="#创建线程的方式一：继承Thread类" class="headerlink" title="创建线程的方式一：继承Thread类"></a>创建线程的方式一：继承Thread类</h3><span id="more"></span>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建线程方式一：继承Thread类，重写run方法，调用start方法开启线程</span>
<span class="token comment">//注意：线程开启不一定立即执行，由CPU调度执行</span>
<span class="token comment">//调用run方法并没有创建新线程，是先执行完run方法里面的内容再向下执行</span>
<span class="token comment">//调用start方法创建了新线程，可以和主线程里面的内容同时执行</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//run方法线程体</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在看代码---------"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//主方法，main线程（主线程）</span>

        <span class="token comment">//创建一个线程对象</span>
        <span class="token class-name">ThreadDemo01</span> threadDemo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//调用run方法</span>
        <span class="token comment">//threadDemo01.run();</span>

        <span class="token comment">//调用start()方法</span>
        threadDemo01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在进行多线程---------"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用多线程同时下载图片"><a href="#使用多线程同时下载图片" class="headerlink" title="使用多线程同时下载图片"></a>使用多线程同时下载图片</h3><blockquote>
<p>需要导入一个阿帕奇的commons的工具类jar包</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>
<span class="token comment">/*步骤：
1.先写一个下载器，里面写一个download方法
2.写一个线程类，写出构造方法，里面放url和下载的图片的明字（url是图片的地址）
3.重写这个线程类的run方法，里面创建下载器的对象，并调用下载器中的download方法
4.在主方法中创建线程对象，调用start启动线程即可下载
*/</span>


<span class="token comment">//练习多线程同步下载图片</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>  <span class="token comment">//网络图片地址</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//保存的文件名</span>

    <span class="token keyword">public</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//下载图片线程的执行体</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WebDownloader</span> webDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        webDownloader<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载的文件名为："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ThreadDemo02</span> threadDemo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token string">"https://s1.tuchong.com/content-image/201805/9d4d1c6aa1974569edaad5c668ac8578.jpeg"</span><span class="token punctuation">,</span><span class="token string">"1.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadDemo02</span> threadDemo02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/981318/ft640/242287039.jpg"</span><span class="token punctuation">,</span><span class="token string">"2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadDemo02</span> threadDemo03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo02</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2732846/ft640/20811104.jpg"</span><span class="token punctuation">,</span><span class="token string">"3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadDemo01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadDemo02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadDemo03<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//下载器</span>
<span class="token keyword">class</span> <span class="token class-name">WebDownloader</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常，download方法出现问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="创建线程的方式二：实现Runnable接口"><a href="#创建线程的方式二：实现Runnable接口" class="headerlink" title="创建线程的方式二：实现Runnable接口"></a>创建线程的方式二：实现Runnable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建线程方式二：实现Runnable接口，重写run方法，执行线程需要丢入一个Runnable接口的一个实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo03</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我在学习多线程："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//创建Runnable接口的实现类对象</span>
        <span class="token class-name">ThreadDemo03</span> threadDemo03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//创建线程对象，通过线程对象来开启线程，代理</span>
        <span class="token comment">//把Runnable接口的实现类对象丢到构造器里面去</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo03<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//上面两行代码可以简写为：</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadDemo03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><strong>由于java单继承的局限性，不推荐使用继承Thread类，推荐实现Runnable接口（Java单继承，多实现）</strong></p>
<p><strong>方便一个对象被多个线程使用</strong></p>
</blockquote>
<h3 id="购买火车票"><a href="#购买火车票" class="headerlink" title="购买火车票"></a>购买火车票</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//多个线程同时操作同一个对象</span>
<span class="token comment">//买火车票的例子</span>

<span class="token comment">//发现问题，多个线程操作同一个资源的情况下，线程不安全（拿到了重复票）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo04</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//模拟延时</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" --> 拿到了"</span> <span class="token operator">+</span> ticketNums<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//Thread.currentThread() 方法：获得当前的线程</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ThreadDemo04</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span><span class="token string">"老师"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//CTRL+B进去看源码，前面传Runnable实现类对象，后面传入一个字符串作为线程的名字</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Race</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//胜利者</span>
    <span class="token class-name">String</span> winner<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

            <span class="token comment">//模拟兔子休息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">//判断比赛是否结束</span>
            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">gameOver</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//如果比赛结束，则停止程序</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---> 跑了"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//判断是否完成比赛</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">gameOver</span><span class="token punctuation">(</span><span class="token keyword">int</span> steps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//判断比赛是否有胜利者</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>winner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>steps <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                winner <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"winner is"</span> <span class="token operator">+</span> winner<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Race</span> race <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Race</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>race<span class="token punctuation">,</span> <span class="token string">" 兔子"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>race<span class="token punctuation">,</span> <span class="token string">"乌龟"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><ol>
<li>实现Callable接口，需要返回值类型</li>
<li>重写call方法，需要抛出异常</li>
<li>创建目标对象</li>
<li>创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1);</li>
<li>提交执行：Future<Boolean>result1 = ser.submit(t1);</li>
<li>获取结果：boolean r1 = result1.get();</li>
<li>关闭服务：ser.shutdownNow();</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token comment">//线程创建方式三：实现Callable接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WebDownloader</span> webDownloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebDownloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        webDownloader<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载了文件名为："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"的图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestCallable</span> testCallable1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2610481/ft640/13343944.webp"</span><span class="token punctuation">,</span><span class="token string">"图片1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TestCallable</span> testCallable2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2613444/ft640/29545946.webp"</span><span class="token punctuation">,</span><span class="token string">"图片2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TestCallable</span> testCallable3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token string">"https://photo.tuchong.com/2983984/ft640/618791961.webp"</span><span class="token punctuation">,</span><span class="token string">"图片3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//这个类创建线程的方法：</span>
        <span class="token comment">//1. 创建执行服务</span>
        <span class="token class-name">ExecutorService</span> ser <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 提交执行</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> result1 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testCallable1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> result2 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testCallable2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> result3 <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>testCallable3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 获取结：</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">boolean</span> r1 <span class="token operator">=</span> result1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> r2 <span class="token operator">=</span> result2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> r3 <span class="token operator">=</span> result3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//4. 关闭服务</span>
        ser<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//下载器</span>
<span class="token keyword">class</span> <span class="token class-name">WebDownloader</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//下载方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyURLToFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IO异常，download方法出现问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Callable接口了解即可，以后在工作中可能会用到</p>
</blockquote>
<h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//静态代理模式总结：</span>
<span class="token comment">//真实对象和目标对象都要实现同一个接口</span>
<span class="token comment">//代理对象要代理真实角色</span>

<span class="token comment">//好处：代理对象可以做很多真实对象做不了的事情，真实对象专注做自己的事情</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxy</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">You</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">WeddingCompany</span> weddingCompany <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeddingCompany</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">weddingCompany<span class="token punctuation">.</span></span>HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//代理的接口里面有一个大家都要重写的方法</span>
    <span class="token keyword">void</span> <span class="token class-name">HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//真实角色，你去结婚</span>
<span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你去结婚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//代理角色，帮助你结婚</span>
<span class="token keyword">class</span> <span class="token class-name">WeddingCompany</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//代理谁-->真实目标角色</span>
    <span class="token keyword">private</span> <span class="token class-name">Marry</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WeddingCompany</span><span class="token punctuation">(</span><span class="token class-name">Marry</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span>target<span class="token punctuation">.</span></span>HappyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这就是真实对象</span>
        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结婚之前，布置现场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结婚之后，收尾款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><p>为了避免匿名内部类定义内容过多</p>
<p>内部类就是有些时候创建一个对象只使用一次，所以干脆直接在函数的参数列表中直接new出这个类的对象。  </p>
<p>一般是这样的，在一个函数的参数列表中要调用一个函数式接口的实现类对象，可以用匿名内部类直接new出对象然后再重写方法，函数式接口中只允许有一个抽象方法，这个时候可以用lambda表达式来简化内部类的代码  </p>
<p>关于静态内部类的一个很好的笔记：<a href="http://c.biancheng.net/view/1026.html">http://c.biancheng.net/view/1026.html</a>  </p>
<p>记住一个关键点：访问静态成员都不需要通过创建实例来访问，而访问一般成员要通过创建实例来访问。</p>
<p>Runnable接口中也只有一个run方法，为函数式接口。所以多线程的Runnable接口的实现类也可以用lambda表达式  </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda2</span> <span class="token punctuation">&#123;</span>
    
<span class="token comment">//总结一下几种可以简化的类型：</span>
<span class="token comment">//参数只有一个时可以去掉小括号</span>
<span class="token comment">//代码体只有一句时可以去掉花括号</span>
<span class="token comment">//实现的接口必须是函数式接口</span>
<span class="token comment">//多个参数类型相同时也可以去掉参数类型，但是必须加上小括号 </span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//简化1.参数类型</span>
        <span class="token class-name">ILove</span> iLove <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i love you--> "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        iLove<span class="token punctuation">.</span><span class="token function">love</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//简化2.简化括号</span>
        <span class="token class-name">ILove</span> iLove2 <span class="token operator">=</span> a <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i love you--> "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        iLove2<span class="token punctuation">.</span><span class="token function">love</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//简化3.去掉花括号</span>
        <span class="token comment">//上面两个已经去掉了</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">ILove</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="线程的五大状态"><a href="#线程的五大状态" class="headerlink" title="线程的五大状态"></a>线程的五大状态</h3><p>（操作系统知识）</p>
<p>创建态，就绪态，阻塞态，运行态，死亡态</p>
<h4 id="1-线程停止"><a href="#1-线程停止" class="headerlink" title="1.线程停止"></a>1.线程停止</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试停止线程</span>
<span class="token comment">//建议：</span>
<span class="token comment">//1.建议线程正常停止--->利用次数，不建议死循环</span>
<span class="token comment">//2.建议使用标志位--->设置一个标志位</span>
<span class="token comment">//3.不要使用stop或者destroy等过时或JDK不建议使用的方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//1.设置一个标志位</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run....Thread"</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//2.设置一个公开的方法停止线程，转换标志位</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//自己写的stop方法，不是JDK弃用的那个</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestStop</span> testStop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testStop<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">900</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//调用stop方法切换标志位，让线程停止</span>
                testStop<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程该停止了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ol>
<li>sleep(time)指定当前线程阻塞的毫秒数</li>
<li>sleep存在异常InterruptedException</li>
<li>sleep时间到达后线程进入就绪状态</li>
<li>sleep可以模拟网络延时，倒计时等</li>
<li>每一个对象都有一个锁，sleep不会释放锁</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span>                                                        
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span>                                                                    
                                                                                          
<span class="token comment">//模拟倒计时                                                                                   </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSleep2</span> <span class="token punctuation">&#123;</span>                                                                 
                                                                                          
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>                          
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                                                                     
                                                                                          
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                    
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                           
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                               
                <span class="token keyword">break</span><span class="token punctuation">;</span>                                                                    
            <span class="token punctuation">&#125;</span>                                                                             
        <span class="token punctuation">&#125;</span>                                                                                 
    <span class="token punctuation">&#125;</span>                                                                                     
                                                                                          
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                              
                                                                                          
                                                                                          
                                                                                          
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                                                             
            <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                  
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                          
        <span class="token punctuation">&#125;</span>                                                                                 
                                                                                          
                                                                                          
        <span class="token comment">//打印当前系统时间                                                                        </span>
        <span class="token class-name">Date</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取系统当前时间                  </span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                                     
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                                                         
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                       
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
                startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新当前时间                 </span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      
            <span class="token punctuation">&#125;</span>                                                                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="线程礼让-yield"><a href="#线程礼让-yield" class="headerlink" title="线程礼让 yield"></a>线程礼让 yield</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试礼让线程，礼让不一定成功，看CPU心情</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestYield</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">MyYield</span> myYield <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myYield<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myYield<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MyYield</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//礼让(礼让不一定成功，看CPU心情）</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程停止执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="线程强制执行-Join"><a href="#线程强制执行-Join" class="headerlink" title="线程强制执行 Join"></a>线程强制执行 Join</h3><ol>
<li>Join合并线程，待此线程执行完成后，再执行其它线程，其它线程阻塞</li>
<li>可以想象成插队</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJoin</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程VIP来了"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//启动我们的线程</span>
        <span class="token class-name">TestJoin</span> testJoin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testJoin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//主线程</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//观察测试线程状态</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestState</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//观察状态</span>
        <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//观察启动后</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//启动线程</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">.</span>TERMINATED<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//Thread.sleep(10000);</span>
            state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新线程状态</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出状态</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//线程一旦进入Terminate状态就不能再次启动了</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ol>
<li>线程优先级高，只能代表它被CPU调度执行的权重大，是可能被执行，但不是一定被执行</li>
<li>线程的优先级相当于抢到CPU的概率</li>
<li><strong>先设置优先级，再启动线程（这个一定要注意）</strong>默认线程优先级为5</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//线程的优先级相当于抢到CPU的概率</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPriority</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//主线程的默认优先级</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---->"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MyPriority</span> myPriority <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//先设置优先级再启动</span>
        <span class="token comment">//优先级从1到10，1最低，10最高</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t3<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t4<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最大优先级为10</span>
        t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        t5.setPriority(-1);</span>
<span class="token comment">//        t5.start();</span>
    <span class="token punctuation">&#125;</span>



<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">MyPriority</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---->"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="守护-daemon-线程"><a href="#守护-daemon-线程" class="headerlink" title="守护(daemon)线程"></a>守护(daemon)线程</h3><ol>
<li>线程分为用户线程和守护线程</li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>如，后台记录操作日志，监控内存，垃圾回收等待（比如gc就属于守护线程）</li>
<li>里面有一个方法叫setDaemon()，参数传true就是守护线程，传false就不是守护线程</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试守护线程</span>
<span class="token comment">//上帝守护你</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDaemon</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">God</span> god <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">You</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">You</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>god<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里面可以传一个继承了Runnable接口的实现类对象</span>
        thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//默认是false，表示其为用户线程，一般的线程都是用户线程</span>

        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//上帝守护线程启动</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//你 用户线程启动</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//上帝</span>
<span class="token keyword">class</span> <span class="token class-name">God</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上帝保佑着你！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//你</span>
<span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">36500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你一生都开心的活着"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======Goodbye!======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在用户线程结束之后，守护线程还运行了一小段短暂的时间后便一起结束了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ol>
<li>发生在多个线程操作同一个资源的时候（并发）</li>
<li>并发：同一个对象被多个线程操作（比如上面的购买火车票）</li>
<li>处理多线程问题时，多个线程访问同一个对象，某些线程还想修改这个对象，这个时候我们就需要线程同步，线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面一个线程使用完毕，下一个线程再使用</li>
<li>锁：保证线程安全</li>
<li>线程同步形成条件：队列+锁，保证线程同步的安全性</li>
<li>锁是对象本身的，每个对象都拥有一把锁，一个线程过来（排队取钱），对象先把锁给这个线程，把门锁上，完事儿了再给下一个线程</li>
<li>锁：synchronized，当一个线程获得对象的排它锁，独占资源，其它线程必须等待，使用后释放锁即可。存在以下问题：  <ul>
<li>一个线程持有锁会导致其它所有需要此锁的线程挂起</li>
<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li>
<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题（性能导致） </li>
</ul>
</li>
</ol>
<h3 id="三大不安全案例"><a href="#三大不安全案例" class="headerlink" title="三大不安全案例"></a>三大不安全案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.买票</span>

<span class="token comment">//不安全地买票</span>
<span class="token comment">//线程不安全，有负数，或者重复票</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeBuyTicket</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BuyTicket</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span><span class="token string">"我"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span><span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span><span class="token string">"他"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//继承Runnable接口也是创建线程的三大方式之一</span>
<span class="token keyword">class</span> <span class="token class-name">BuyTicket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//票</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//外部停止方式</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//买票</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//判断是否有票</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//模拟延时，放大问题的发生性</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//买票</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"拿到"</span> <span class="token operator">+</span> ticketNums<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//不安全地取钱</span>
<span class="token comment">//两个人去银行取钱，账户</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeBank</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//账户</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"结婚基金"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Drawing</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Drawing</span> girlFriend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"girlFriend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        you<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        girlFriend<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//账户</span>
<span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> money<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//卡名</span>

    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//银行：模拟取款</span>
<span class="token keyword">class</span> <span class="token class-name">Drawing</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span> <span class="token comment">//这里可以继承Thread，因为取钱不涉及到多个线程操作同一个对象</span>
    <span class="token class-name">Account</span> account<span class="token punctuation">;</span> <span class="token comment">//账户</span>
    <span class="token comment">//取了多少钱</span>
    <span class="token keyword">int</span> drawingMoney<span class="token punctuation">;</span>
    <span class="token comment">//现在手里有多少钱</span>
    <span class="token keyword">int</span> nowMoney<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Drawing</span> <span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">,</span> <span class="token keyword">int</span> drawingMoney<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用父类的有参构造方法，传入当前线程的名字</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>drawingMoney <span class="token operator">=</span> drawingMoney<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//重写的run方法就是取钱的操作</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//判断有没有钱</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>money <span class="token operator">-</span> drawingMoney <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"钱不够，取不了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//卡内余额</span>
        account<span class="token punctuation">.</span>money <span class="token operator">=</span> account<span class="token punctuation">.</span>money <span class="token operator">-</span> drawingMoney<span class="token punctuation">;</span>
        <span class="token comment">//你手里的钱</span>
        nowMoney <span class="token operator">=</span> nowMoney <span class="token operator">+</span> drawingMoney<span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"余额为："</span> <span class="token operator">+</span> account<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Thread.currentThread().getPriority() == this.getName()</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"手里的钱"</span> <span class="token operator">+</span> nowMoney<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//this指向当前类的实现类对象</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>

<span class="token comment">//线程不安全的集合</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeList</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ArrayList是线程不安全的集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//用线程来添加</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//这里面要传的是一个Runnable接口的实现类，故可以使用lambda表达式</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里输出的集合中没有10000个元素，因为ArrayList线程不安全，线程可能会把内容同步添加到同一个元素中（没有锁，抢食堂饭吃）</span>
        <span class="token comment">//所以元素就会变少</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="同步方法及同步块"><a href="#同步方法及同步块" class="headerlink" title="同步方法及同步块"></a>同步方法及同步块</h3><p>同步方法：</p>
<ul>
<li>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种方法：synchronized方法和synchronized块</li>
<li>同步方法：public synchronized void method(int args){}</li>
<li>synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，知道方法返回才释放该锁，后面被阻塞的线程才能获得这个锁，继续执行。</li>
<li>缺陷：若将一个大的方法申明为synchronized将会影响效率</li>
</ul>
<p>同步块：synchronized(Obj){ }  </p>
<ul>
<li>Obj称之为<strong>同步监视器</strong></li>
<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>
<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class（反射中讲解）</li>
<li>同步监视器的执行过程<ol>
<li>第一个线程访问，锁定同步监视器，执行其中代码</li>
<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>
<li>第一个线程访问完毕，解锁同步监视器</li>
<li>第二个线程访问完毕，发现同步监视器没有锁，然后锁定并访问</li>
</ol>
</li>
</ul>
<p>上面三个不安全案例的加锁版：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//不安全地取钱</span>
<span class="token comment">//两个人去银行取钱，账户</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeBank</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//账户</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"结婚基金"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Drawing</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Drawing</span> girlFriend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"girlFriend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        you<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        girlFriend<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//账户</span>
<span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> money<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//卡名</span>

    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//银行：模拟取款</span>
<span class="token keyword">class</span> <span class="token class-name">Drawing</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span> <span class="token comment">//这里可以继承Thread，因为取钱不涉及到多个线程操作同一个对象</span>
    <span class="token class-name">Account</span> account<span class="token punctuation">;</span> <span class="token comment">//账户</span>
    <span class="token comment">//取了多少钱</span>
    <span class="token keyword">int</span> drawingMoney<span class="token punctuation">;</span>
    <span class="token comment">//现在手里有多少钱</span>
    <span class="token keyword">int</span> nowMoney<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Drawing</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">,</span> <span class="token keyword">int</span> drawingMoney<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用父类的有参构造方法，传入当前线程的名字</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>drawingMoney <span class="token operator">=</span> drawingMoney<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//重写的run方法就是取钱的操作</span>
    <span class="token comment">//synchronized默认锁的是this，这里面synchronized应该锁的是Account，而不是Drawing</span>
    <span class="token comment">//因为synchronized锁的是被访问对象里面的内容</span>
    <span class="token comment">//此时需要同步块synchronized(obj)&#123;&#125;来解决</span>
    <span class="token comment">//锁的对象一定是变化的量，需要增删改的量</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//判断有没有钱</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span>money <span class="token operator">-</span> drawingMoney <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"钱不够，取不了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//卡内余额</span>
            account<span class="token punctuation">.</span>money <span class="token operator">=</span> account<span class="token punctuation">.</span>money <span class="token operator">-</span> drawingMoney<span class="token punctuation">;</span>
            <span class="token comment">//你手里的钱</span>
            nowMoney <span class="token operator">=</span> nowMoney <span class="token operator">+</span> drawingMoney<span class="token punctuation">;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"余额为："</span> <span class="token operator">+</span> account<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//Thread.currentThread().getPriority() == this.getName()</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"手里的钱"</span> <span class="token operator">+</span> nowMoney<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//this指向当前类的实现类对象</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//不安全地买票</span>
<span class="token comment">//线程不安全，有负数，或者重复票</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeBuyTicket</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BuyTicket</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> <span class="token string">"我"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> <span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> <span class="token string">"他"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//继承Runnable接口也是创建线程的三大方式之一</span>
<span class="token keyword">class</span> <span class="token class-name">BuyTicket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//票</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//外部停止方式</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//买票</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//synchronized同步方法，锁的是this</span>
    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//判断是否有票</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//模拟延时，放大问题的发生性</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//买票</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"拿到"</span> <span class="token operator">+</span> ticketNums<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//线程不安全的集合</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeList</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ArrayList是线程不安全的集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//用线程来添加</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">//这里面要传的是一个Runnable接口的实现类，故可以使用lambda表达式</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里输出的集合中没有10000个元素，因为ArrayList线程不安全，线程可能会把内容同步添加到同一个元素中（没有锁，抢食堂饭吃）</span>
        <span class="token comment">//所以元素就会变少</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CopyOnWriteArrayList</span><span class="token punctuation">;</span>
<span class="token comment">//这是一个线程安全的ArrayList</span>

<span class="token comment">//测试JUC安全类型的集合</span>
<span class="token comment">//JUC就是java.util.current,是并发编程，属于并发领域的</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJUC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>多个线程互相抱有对方需要的资源，当一个线程拿着一个锁又想要去拿另外一个线程的锁时，此时它不会释放自己手中的锁，另外一个线程也不会释放，人会主动先给锁，但程序不会</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//死锁：多个线程互相抱有对方需要的资源，然后形成僵持</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">MakeUp</span> girl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeUp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"灰姑娘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MakeUp</span> girl2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeUp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"灰太郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        girl1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        girl2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//口红</span>
<span class="token keyword">class</span> <span class="token class-name">LipStick</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//镜子</span>
<span class="token keyword">class</span> <span class="token class-name">Mirror</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//化妆</span>
<span class="token keyword">class</span> <span class="token class-name">MakeUp</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//需要的资源只有一份，用static来保证只有一份</span>
    <span class="token keyword">static</span> <span class="token class-name">LipStick</span> lipStick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LipStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">Mirror</span> mirror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> choice<span class="token punctuation">;</span> <span class="token comment">//选择</span>
    <span class="token class-name">String</span> herName<span class="token punctuation">;</span> <span class="token comment">//人名</span>

    <span class="token class-name">MakeUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice<span class="token punctuation">,</span> <span class="token class-name">String</span> herName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>choice <span class="token operator">=</span> choice<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">=</span> herName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//化妆</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">makeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span>
    <span class="token comment">//这个地方两个人都拿不到对方的资源，出现僵持，发生死锁的情况</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipStick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//获得口红的锁</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//一秒钟后想获得镜子</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"一秒钟后获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//获得镜子的锁</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipStick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//两秒钟后想获得口红</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"两秒钟后获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//死锁：多个线程互相抱有对方需要的资源，然后形成僵持</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">MakeUp</span> girl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeUp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"灰姑娘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MakeUp</span> girl2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeUp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"灰太郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        girl1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        girl2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//口红</span>
<span class="token keyword">class</span> <span class="token class-name">LipStick</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//镜子</span>
<span class="token keyword">class</span> <span class="token class-name">Mirror</span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//化妆</span>
<span class="token keyword">class</span> <span class="token class-name">MakeUp</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//需要的资源只有一份，用static来保证只有一份</span>
    <span class="token keyword">static</span> <span class="token class-name">LipStick</span> lipStick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LipStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">Mirror</span> mirror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> choice<span class="token punctuation">;</span> <span class="token comment">//选择</span>
    <span class="token class-name">String</span> herName<span class="token punctuation">;</span> <span class="token comment">//人名</span>

    <span class="token class-name">MakeUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice<span class="token punctuation">,</span> <span class="token class-name">String</span> herName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>choice <span class="token operator">=</span> choice<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">=</span> herName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//化妆</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">makeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span>
    <span class="token comment">//这个地方两个人都拿不到对方的资源，出现僵持，发生死锁的情况</span>
    <span class="token comment">//之前是synchronized中又嵌套了一个synchronized，锁中锁</span>
    <span class="token comment">//只需要把下面那个synchronized拿出来即可</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipStick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//获得口红的锁</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//一秒钟后想获得镜子</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"一秒钟后获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//获得镜子的锁</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"获得镜子的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipStick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//两秒钟后想获得口红</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>herName <span class="token operator">+</span> <span class="token string">"两秒钟后获得口红的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123201915188.png" alt="image-20210123201915188" style="zoom: 50%;" />

<h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>Lock是一个接口，一般使用它的实现类ReentrantLock（可重入锁），可以显示加锁，释放锁。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span>

<span class="token comment">//测试Lock锁</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TestLock2</span> testLock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestLock2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testLock2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">TestLock2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">int</span> tickNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">//定义lock锁</span>
    <span class="token comment">//加private和final保证其私有，安全</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个就是加锁</span>
                            <span class="token comment">//解锁、一般建议把最后解锁的代码块放到finally里面</span>
                <span class="token comment">//这个是不安全的代码</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickNums <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tickNums<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：try可以不catch直接finally</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123201616774.png" alt="image-20210123201616774" style="zoom:33%;" />

<h3 id="生产者消费者问题（线程通信）"><a href="#生产者消费者问题（线程通信）" class="headerlink" title="生产者消费者问题（线程通信）"></a>生产者消费者问题（线程通信）</h3><p>线程协作，生产者消费者问题</p>
<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123201826664.png" alt="image-20210123201826664" style="zoom:33%;" />



<img src="https://cdn.jsdelivr.net/gh/Mozartto/pictures/Mozarttoimage-20210123200407170.png" alt="image-20210123200407170" style="zoom:33%;" />

<p>通过一个标志位来判断，比如为false就让他等，为true就可以来拿东西</p>
<h4 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h4><p>pv问题，p操作原语和v操作原语</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试：生产者消费者问题-->利用缓冲区解决：管程法</span>
<span class="token comment">//需要哪些对象：生产者，消费者，产品，缓冲区</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SynContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//生产者</span>
<span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//生产(生产和消费行为都是用线程来跑）</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产了"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            container<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//消费者</span>
<span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//消费</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费了第--->"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//产品</span>
<span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//产品编号</span>

    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//缓冲区（容器）</span>
<span class="token keyword">class</span> <span class="token class-name">SynContainer</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//需要一个容器大小</span>
    <span class="token class-name">Product</span><span class="token punctuation">[</span><span class="token punctuation">]</span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//容器计数器</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//生产者放入产品(现在写方法需要同步，因为它涉及到并发问题）</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//如果容器满了，就需要等待消费者消费</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> products<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//通知消费者消费，生产者等待</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//如果没有满，就需要丢入产品</span>
        products<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token comment">//可以通知消费者消费</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token comment">//消费者消费产品</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Product</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//判断能否消费</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//没产品，等待生产者生产，消费者等待</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//如果可以消费</span>
        count<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token class-name">Product</span> product <span class="token operator">=</span> products<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">//吃完了，通知生产者生产</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Framework</title>
    <url>/2021/03/28/Spring/</url>
    <content><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring的功能是降低耦合，还有整合其它框架。比如SpringMVC和MyBatis都可以整合到Spring中。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410184125297.png" alt="image-20210410184125297" style="zoom:67%;" />

<h3 id="Spring-Ioc概念引入"><a href="#Spring-Ioc概念引入" class="headerlink" title="Spring_Ioc概念引入"></a>Spring_Ioc概念引入</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410184450871.png" alt="image-20210410184450871"></p>
<p>我们想创建对象时是直接到容器里面去取，而不是自己现场创建实现类。所有实现类全部放在容器里。我们直接在配置文件中指定一下实现类的路径即可。创建对象的权利由我们自己反转给了配置文件和容器，这种控制方式可以降低模块之间的耦合度。当我们需要修改某个对象时，不需要在模块中现场修改对象，只需要修改配置文件即可。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210410185905670.png" alt="image-20210410185905670"></p>
<h3 id="Spring-Ioc代码测试"><a href="#Spring-Ioc代码测试" class="headerlink" title="Spring_Ioc代码测试"></a>Spring_Ioc代码测试</h3><p>首先先创建一个maven项目（maven项目的创建步骤参考maven笔记），然后导入spring容器的五个核心jar包（在pom.xml文件中使用dependency导入，依赖的代码到mvnrepository.com里面去找。四个核心jar包是上面绿色图中的Beans、Core、Context、SpEL</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411111008461.png" alt="image-20210411111008461" style="zoom:60%;" />

<p>其实我们只需要导一个context包，它就包含了上面的四个核心jar包。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411111322195.png" alt="image-20210411111322195" style="zoom:67%;" />

<p>如何查看当前导入的依赖的关系图：点击右侧侧边栏上的maven，然后点击右上角那个闪电图标右侧的那个有两个箭头的图标即可查看到如下图所示的注入依赖的关系图：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411111502441.png" alt="image-20210411111502441"></p>
<p>我们要进行测试（test文件夹下的代码），所以还要导一个junit包，在mvn仓库里面找。</p>
<p>之前我们在写mybatis的时候操作每个数据库表都需要自己在Java文件夹中创建一个对应的实体类，test方法每次都要new一个实体类对应的实现类对象。上面说过这样的话项目耦合度过高。所以我们要创建一个容器，然后把对象全部放到容器中去，然后通过一个配置文件访问我们所需的对象。那IDEA提供了一种非常便利的创建Spring配置文件的方法。如下图，在创建新的xml文档的时候可以直接创建spring Config文件。（注意是在maven项目的resources目录下建）</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411113740662.png" alt="image-20210411113740662"></p>
<p>因为我们有连接数据库的DAO文件（之前mybatis中的mapper文件），那么我们要对应的实现类，实现类要自己写（之前学mybatis的时候是把操作数据库的方法写在一个接口里做抽象方法，然后在mapper里具体实现，并且要创建一个接口对应的实现类，在test方法中创建实现类对象），但是当我们需要实现类对象的时候，不需要自己new实现类对象，只需要到容器中去取实现类对象即可，也就是说实现类我们自己写好之后，要在容器中创建对应的实现类对象。所以现在我们要在配置文件中配置对应的实现类对象的路径。</p>
<p>IDEA为我们创建的原始的Spring配置文件如下：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411114058625.png" alt="image-20210411114058625" style="zoom:67%;" />

<p>里面有beans标签，我们需要为我们的实现类对象创建bean标签：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411114618680.png" alt="image-20210411114618680" style="zoom:67%;" />

<p>bean标签中的class选项对应的就是我们自己写的实体类，然后它会把实体类放入一个map集合中，真实的class就是实体类的值，这个id就相当于是一个键，每个id和class构成一个键值对。当我们需要这个实体类的对象的时候不用自己new，只需要引用这个id即可。</p>
<p>那么在test方法中我们需要实现类对象的时候我们该如何获取呢？首先要先创建一个容器：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411115837411.png" alt="image-20210411115837411"></p>
<p>使用ApplicationContext类来创建容器对象，参数里面传入我们配置文件的名称。</p>
<p>然后创建EmpDao接口对应的实现类对象时就不用new了，之间使用getBean方法，里面传入之前设置的id（里面其实可以传两个参数，如何后面那个参数你不传的话，前面就要进行一下强制类型转换），如果要传的话，就传”接口名.class”</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411120505808.png" alt="image-20210411120505808"></p>
<p>注意：对应的接口和实现类都要自己先写好。</p>
<h3 id="Spring-Ioc实现原理"><a href="#Spring-Ioc实现原理" class="headerlink" title="Spring_Ioc实现原理"></a>Spring_Ioc实现原理</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411125050065.png" alt="image-20210411125050065" style="zoom: 67%;" />

<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411124453642.png" alt="image-20210411124453642"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411125425987.png" alt="image-20210411125425987"></p>
<h3 id="Spring-Ioc和DI概念解释"><a href="#Spring-Ioc和DI概念解释" class="headerlink" title="Spring_Ioc和DI概念解释"></a>Spring_Ioc和DI概念解释</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411125730020.png" alt="image-20210411125730020" style="zoom: 67%;" />

<p>创建对象不用我们管，Spring来管。创建对象这一块是Ioc来管。那么对象的属性赋值谁来管呢？也是Spring来管，也就是说不用我们自己去调get/set方法去给对象赋值</p>
<p>实际开发中基于注解方式的Bean管理用得比较多。基于XML方式的Bean管是便于我们对下一步学习的理解。</p>
<h3 id="Spring-Bean标签属性简介"><a href="#Spring-Bean标签属性简介" class="headerlink" title="Spring_Bean标签属性简介"></a>Spring_Bean标签属性简介</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411132333568.png" alt="image-20210411132333568" style="zoom:67%;" />

<p>在XML配置文件中可以配置积极加载和懒加载。积极加载在初始化容器的时候就会调用new 对象的构造方法，懒加载则在初始化容器的时候不会初始化对象，必须要我们手动在容器中取出对象时它才会初始化对象。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411132939275.png" alt="image-20210411132939275"></p>
<p>bean标签还有一个属性值，就是scope，如果scope选择singleton，则每次创建相同的对象时都是从容器中取出相同的对象（取出两次相同的对象，检测结果两个对象为同一个），如果scope选择prototype，则取出相同的对象时会创建新的对象，不会直接取原来的对象。（在内存上指向不同的对象）</p>
<p>一般我们在开发项目的时候能用singleton就用这个，单例节省内存，不用重新创建对象。（在不涉及线程共享和线程安全时优先考虑）</p>
<p>普通的Java项目的scope只有这两个选项，一般的web项目的scope还有其它选项：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411133924798.png" alt="image-20210411133924798" style="zoom:60%;" />

<p>在创建完对象之后我们发现对象的属性是没有被赋值的，那么如何给这些属性赋值呢？请看下面一节。</p>
<h3 id="Spring-XML实现DI"><a href="#Spring-XML实现DI" class="headerlink" title="Spring_XML实现DI"></a>Spring_XML实现DI</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411134129501.png" alt="image-20210411134129501" style="zoom:70%;" />

<p>property name 后面对应的是实体类里面的属性名，value是我们赋的属性值（前提是你的实体类中要有set方法），那这样我们在初始化对象的时候Spring就会自动为我们调用类中的set方法为对象的属性赋值。</p>
<p>如果属性中有其它对象，则会用到ref标签（property中还有一个ref标签）</p>
<p>刚刚那个是通过get/set方法给实现类对象的属性赋值，如果想要通过构造方法给实体类对象的属性赋值的话，需要使用另一个标签来代替property：constructor-arg标签</p>
<p>注意：使用property方法设定属性的值可以不用全部设定，而如果要使用有参构造方法则必须将构造方法中指定的所有参数全部传入。index指的是参数的顺序，从0开始。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411151628643.png" alt="image-20210411151628643" style="zoom:67%;" />

<h5 id="通过p名称空间和c名称空间实现DI（给对象属性赋值）"><a href="#通过p名称空间和c名称空间实现DI（给对象属性赋值）" class="headerlink" title="通过p名称空间和c名称空间实现DI（给对象属性赋值）"></a>通过p名称空间和c名称空间实现DI（给对象属性赋值）</h5><p>为了简化上面两种写法，我们需要先启用p名称空间和c名称空间，在xml配置文件的开头加上这么灰色的两行，即可开启p名称空间和c名称空间：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411152020556.png" alt="image-20210411152020556" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411152252844.png" alt="image-20210411152252844" style="zoom:80%;" />



<h4 id="通过DI注入一些空值和特殊符号"><a href="#通过DI注入一些空值和特殊符号" class="headerlink" title="通过DI注入一些空值和特殊符号"></a>通过DI注入一些空值和特殊符号</h4><p>为成员属性赋值的时候一些特殊情况：</p>
<p>CDATA标签代表指定里面的内容是纯文本，不需要对特殊符号进行转义</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411152916695.png" alt="image-20210411152916695" style="zoom:70%;" />

<p>xml文件中的写法：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411153011934.png" alt="image-20210411153011934" style="zoom:67%;" />



<h4 id="类中成员变量有其它类时的bean——通过ref或嵌套bean"><a href="#类中成员变量有其它类时的bean——通过ref或嵌套bean" class="headerlink" title="类中成员变量有其它类时的bean——通过ref或嵌套bean"></a>类中成员变量有其它类时的bean——通过ref或嵌套bean</h4><p>现在有一个小老鼠类，小老鼠类里面有一个birthday属性，其类型为Date类型，我们在容器中添加这个对象时如果直接添加字符串形式的日期给birthday属性的话会出错，所以我们要往里面添加一个Date对象。那我们自己就需要先在容器中创建一个Date对象，然后让小老鼠对象进行ref引用。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411182243996.png" alt="image-20210411182243996" style="zoom: 80%;" />

<p>现在有一个cat类，里面有小老鼠类作为成员变量：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411183609282.png" alt="image-20210411183609282" style="zoom:67%;" />

<p>在容器中创建cat类的对象：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411183505818.png" alt="image-20210411183505818" style="zoom:73%;" />

<p>创建cat类对象时为Mouse成员变量赋值，直接ref引用上面的那只小老鼠，和小老鼠ref引用外部Date对象一样</p>
<p>在测试方法里面测试一波：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411183813715.png" alt="image-20210411183813715"></p>
<p>除了引用外部的bean之外，我们还可以直接直接在内部创建一个bean，然后再为内部的bean进行赋值（使用property标签）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411184052245.png" alt="image-20210411184052245" style="zoom:75%;" />

<p>内部的bean中还可以再创建bean，这是一种内部的级联写法。</p>
<p>还有：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411184525113.png" alt="image-20210411184525113" style="zoom:80%;" />

<p>mouse2是老鼠名，mouse1是cat中的成员变量，当作mouse即可。</p>
<p>注意，使用mouse1.name的时候一定要保证mouse对象有name对应的get方法才行。</p>
<h4 id="使用DI为对象的属性赋值时，成员变量是List、Map等特殊类型的情况"><a href="#使用DI为对象的属性赋值时，成员变量是List、Map等特殊类型的情况" class="headerlink" title="使用DI为对象的属性赋值时，成员变量是List、Map等特殊类型的情况"></a>使用DI为对象的属性赋值时，成员变量是List、Map等特殊类型的情况</h4><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411203441191.png" alt="image-20210411203441191" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411203600349.png" alt="image-20210411203600349" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411203640006.png" alt="image-20210411203640006" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411203934072.png" alt="image-20210411203934072" style="zoom:67%;" />

<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411203820707.png" alt="image-20210411203820707" style="zoom:67%;" />

<h3 id="Spring-bean工厂"><a href="#Spring-bean工厂" class="headerlink" title="Spring_bean工厂"></a>Spring_bean工厂</h3><p>我们提前创建好了一个Book类，现在创建一个生产Book的工厂，BookFactory类：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210411205728949.png" alt="image-20210411205728949" style="zoom:67%;" />

<p>工厂模式需要实现FactoryBean<T>接口，并重写其中的两个抽象方法。注意这个方法返回的是一个Book对象，而不是BookFactory对象，但是我们在容器的xml文件中配置的是工厂类，但返回的是Book类的对象。</p>
<h3 id="SpringBean的生命周期"><a href="#SpringBean的生命周期" class="headerlink" title="SpringBean的生命周期"></a>SpringBean的生命周期</h3><p>SpringBean的生命周期分为五步：(以在容器中放入的User对象为例)</p>
<p>如果此时我们要创建一个User的实体类对象，不需要自己创建，只需要从容其中获取。</p>
<ol>
<li>第一步：User构造（调用实体类中的构造方法）</li>
<li>第二步：User set方法，通过DI为属性赋值</li>
<li>第三步：User初始化，调用Userinit方法？</li>
<li>第四步：User获取，可以在测试方法中获取User并进行输出等操作</li>
<li>第五步：User销毁。User销毁会随着容器的关闭而销毁，如果我们想要手动关闭，调用application.close()方法即可。（一开始获取容器是通过application对象获取的，获取容器对象那一步）</li>
</ol>
<p>在User类中定义完相应的方法之后要在容器中告诉Bean各个方法对应的作用：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412125401146.png" alt="image-20210412125401146"></p>
<p>添加后置处理器：</p>
<p>如果我们想要在初始化之前和初始化之后对我们的Bean对象做出一些处理，我们需要额外写一个后置处理器类，并让它实现BeanPostProcessor接口，并重写其中的两个方法。然后要在容器中通过显式地去注册    后置处理器。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412125256913.png" alt="image-20210412125256913"></p>
<p>就算初始化方法没有，后置处理器也会在第三步的时候进行干预。</p>
<h3 id="Spring自动装配"><a href="#Spring自动装配" class="headerlink" title="Spring自动装配"></a>Spring自动装配</h3><p>当一个对象中的属性有其它对象时，我们想要在容器中添加这个对象，往往还要先添加其属性中包含的对象。那有没有方法可以自动帮我们添加其中包含的对象呢？通过autowire关键字，我们就可以让容器自动检测其中装有的对应的对象，并自动帮我们添加。（这样我们就不用通过property属性手动添加了，大妙）</p>
<p>autowire有两个选项可选：byName和byType</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412131924102.png" alt="image-20210412131924102" style="zoom:67%;" />

<p>byName要求在容器中被期望添加的对象与类中的对象名一致（要保证当前的属性值与目标id保持一致）</p>
<p>byType是根据数据类型，此时跟名字就没关系了。</p>
<p>注意，使用byType类型时目标类型在容器中只能有一个，否则bean不知道要装配哪一个：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412132410606.png" alt="image-20210412132410606" style="zoom:80%;" />



<h3 id="Spring-读取属性配置文件"><a href="#Spring-读取属性配置文件" class="headerlink" title="Spring_读取属性配置文件"></a>Spring_读取属性配置文件</h3><p>之前在MyBatis中讲过读取jdbc.properties属性配置文件并对其进行编辑，那么这个功能在Spring中是否可以实现呢？也可以。这样一种技术叫做数据库连接池技术。</p>
<p>阿里自己写的德鲁伊连接池性能很好。注意，以后连接池都不叫连接池了，叫数据源。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412133648044.png" alt="image-20210412133648044"></p>
<p>德鲁伊的依赖可以在mvnrepository.com去找（Druid），搜alibaba也可以。</p>
<p>然后通过maven导入对应的dependencies（jar包，里面有对应的class类），并在容器中添加其对应的bean。</p>
<p>在bean中需要通过property属性来配置类中的四个和数据连接有关的成员变量信息：username、password、url、driverClassName</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412150206342.png" alt="image-20210412150206342"></p>
<p>xml中双标签中间没有内容的可以直接写成单标签。</p>
<p>然后你会发现和之前一样，这些JDBC信息写在bean的配置文件中耦合度有点高了，所以我们最好把这些信息单独写在一个另外的jdbc.properties文件中，然后在bean容器配置文件中使用美元符+大括号引用即可。</p>
<p>容器的xml文件中：（加上jdbc前缀防止重名）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412155427356.png" alt="image-20210412155427356" style="zoom:80%;" />

<p>jdbc.properties文件中：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412155505668.png" alt="image-20210412155505668"></p>
<h3 id="Spring-Ioc注解方式实现"><a href="#Spring-Ioc注解方式实现" class="headerlink" title="Spring_Ioc注解方式实现"></a>Spring_Ioc注解方式实现</h3><p>前面说的bean对象的创建和通过DI为属性赋值基本上都是通过xml文件实现的，但这在实际开发中其实不是很常用。实际开发中常用的是通过注解方式实现。下面来说一下：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412160048986.png" alt="image-20210412160048986" style="zoom:60%;" />

<p>上面那个是“但是不推荐”。。。</p>
<p>bean的xml文件中：添加context那一行</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412161556883.png" alt="image-20210412161556883"></p>
<p>相当于bean中直接就添加了左侧bean包里的两个类</p>
<p>然后在类上加上@Component注解即可在容器中成功地添加这个类，注解后面可以加括号，括号里写的就是test方法中获取的当前类的对象地名称，相当于之前的id。<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412162431825.png" alt="image-20210412162431825" style="zoom:50%;" /></p>
<p>test方法：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412162524947.png" alt="image-20210412162524947"></p>
<p>排除注解：（一般默认情况下四个注解都用，但也可以指定不识别某个特定注解）</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210412170320054.png" alt="image-20210412170320054"></p>
<p>比如上图就不会识别Controller注解，其它注解都可以识别。exclude是排除，include是包含（识别）。</p>
<h3 id="Spring-DI注解方式实现"><a href="#Spring-DI注解方式实现" class="headerlink" title="Spring_DI注解方式实现"></a>Spring_DI注解方式实现</h3><p>当容器中的对象想要引用容器中的另一个对象时（其成员属性中有一个对象），在其实体类中对应的成员变量的对象上加上@Autowired注解，则容器会自动寻找容器中是否已经有我们需要引用的对象，如果有会自动进行引用并给属性赋值。</p>
<p>比如service层里面有DAO对象，但是我们不能直接在service层或者其对应的方法中直接new一个DAO对象，因为这样就提高了两层之间的耦合度。那spring的目的就是把对象放入容器中从而降低耦合度，所以我们需要在容器中创建service类中的DAO类的对象（成员变量）。之前的方法是先在容器中创建好DAO层的对象，然后在service层的bean标签中的property标签里引用DAO层的对象。但是现在不用了，你只需要在service的实体类中的DAO成员变量上加上@Autowired注解，容器就会为我们自动添加，不用通过property标签添加。（但是还是要在容器中创建实体类对象，前面我们说过，我们可以直接在实体类上写@Component注解，从而让容器自动帮助我们创建对象，不用再自己去写bean标签。那DAO层的实体类上应该写的是@Repository注解（@Component的子注解，在数据库交互层使用），service层的实体类上写的应该是@service注解，同时service层的实体类中的DAO对象上又写了@property注解，这样他喵的我们在容器中啥都不用写😊。</p>
<p>DAO层实体类：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413113625783.png" alt="image-20210413113625783" style="zoom:67%;" />

<p>service层实体类：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413113522943.png" alt="image-20210413113522943" style="zoom: 67%;" />

<p>注意每一层都有一个接口，方法定义在接口中，实体类继承了接口之后重写其中的方法：（可以有多个同一层的多个实体类继承同一个接口）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413113717511.png" alt="image-20210413113717511" style="zoom:67%;" />

<p>注意，如果上图中你DAO层的两个实现类A和B都添加了@Repository注解，那系统会报错，因为他不知道到底要new哪一个实体类的对象。</p>
<p>如果你想两个实体类都加@Repository注解，但可以指定调用其中一个类的对象，可以使用@Qualifier注解，可以通过名称去找，默认名称就是类名（首字母小写）：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413114520989.png" alt="image-20210413114520989" style="zoom:67%;" />

<p>也可以通过@Resource注解，可以直接添加指定类名：（相当于上面两个注解加起来），不加后面那个括号就相当于@Autowired</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413115206469.png" alt="image-20210413115206469" style="zoom:60%;" />

<p>但在实际开发中很少出现DAO层一个接口有两个实现类的，所以很少用名称去找，@Autowired用得较多。</p>
<p>因为@Autowired来自SpringFrameWork包，而@Resource来自javax包。Spring官方推荐是使用来自Spring的注解，这样可以降低Spring和JDK的耦合度。但是你想用@Resource注解也没问题。</p>
<p>使用@Value注解为可以直接成员变量赋值：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413120005504.png" alt="image-20210413120005504" style="zoom: 60%;" />

<p>使用字符串为Integer类型赋值系统会自动转换。但是这样赋值有弊端，就是这个值直接写死在这个类里面了，如果以后我们想要动态的读取和修改，就会很麻烦。</p>
<p>但是我们之前学过可以把这些玩意儿写在property配置文件中👨‍🚀，然后通过 ${} 进行引用，大妙啊。</p>
<p>先在容器中指定一下配置文件：（上面那一行）</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413121610991.png" alt="image-20210413121610991"></p>
<p>配置文件中的内容：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413121855895.png" alt="image-20210413121855895" style="zoom:67%;" />

<p>原来的类中成员变量上的@Value注解内容可以进行引用了：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413121807417.png" alt="image-20210413121807417" style="zoom:67%;" />

<p>注意，这里没有加前缀，但是最好还是加上，以免搞混（就像jdbc配置文件中的信息加了jdbc_前缀一样）</p>
<h3 id="配置类方式实现Ioc和DI"><a href="#配置类方式实现Ioc和DI" class="headerlink" title="配置类方式实现Ioc和DI"></a>配置类方式实现Ioc和DI</h3><p>前面已经说过，配置文件中几乎什么信息都不用写，除了包扫描信息和一些引用property文件的信息，那配置文件中内容这么少，其实配置文件可以不用写，我们可以用一个类，通过代码的提示来体现配置信息。</p>
<p>作为了解即可，我感觉还是配置文件香，反正代码量都是一样的少。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413123318519.png" alt="image-20210413123318519" style="zoom:67%;" />

<p>在配置类中用两个注解可以代替xml容器配置文件，又感觉有点香了，好简洁。注意，使用配置类最好新建一个Config文件夹然后把配置类都放这里面。</p>
<h3 id="Spring-代理模式概念和静态代理"><a href="#Spring-代理模式概念和静态代理" class="headerlink" title="Spring_代理模式概念和静态代理"></a>Spring_代理模式概念和静态代理</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413123900548.png" alt="image-20210413123900548"><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413124455110.png" alt="image-20210413124455110" style="zoom: 45%;" /></p>
<p>Aop就是通过代理模式来实现其具体功能的.</p>
<p>静态代理实际开发中几乎不用，而且麻烦不好用，增加工作量且效率低下。</p>
<p>代理的精髓就是我们想要使用一个对象，可以用另外一个对象来代理这个对象，并对其中的功能进行拓展和增强。当我们想要使用这个对象时可以直接使用它的代理对象，但是代理对象中有一部分功能时来自于原来的对象。</p>
<p>代理模式一共有三个组成部分：</p>
<ol>
<li>被代理的类</li>
<li>代理类</li>
<li>面向的或者要实现的接口</li>
</ol>
<h3 id="Spring-JDK动态代理"><a href="#Spring-JDK动态代理" class="headerlink" title="Spring_JDK动态代理"></a>Spring_JDK动态代理</h3><p>代理类在程序运行时才会创建的代理模式称为动态代理模式。在这种情况下，代理类并不是在Java代码中定义好的，而是在程序运行时根据我们在Java代码中的“指示”动态生成的。</p>
<p>这种动态代理有两种模式：</p>
<ol>
<li>JDK内置的Proxy动态代理——面向接口</li>
<li>cglib第三方动态代理——面向父类</li>
</ol>
<p>动态代理案例——张三吃饭</p>
<p>通过Proxy动态代理获得一个代理对象，在代理对象中，对某个方法进行增强</p>
<p>调用JDK中Proxy类的newProxyInstance()方法，此方法中传入三个参数：loader、interfaces、h</p>
<p>向上转型自动转，向下转型要强转。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413195534440.png" alt="image-20210413195534440"></p>
<p>我们在调用重写的抽象方法时系统会自动执行invoke方法，invoke方法中可以定义增强方法功能的代码</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413202959233.png" alt="image-20210413202959233"></p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413202809125.png" alt="image-20210413202809125"></p>
<p>JDK动态代理模式比较难理解，如果大家觉得不好理解的话，就先记住动态代理的定义即可</p>
<h3 id="Spring-cglib动态代理"><a href="#Spring-cglib动态代理" class="headerlink" title="Spring_cglib动态代理"></a>Spring_cglib动态代理</h3><p>子类直接继承来父类方法然后对父类方法进行功能重写，在new对象时new子类对象即可，这是cglib代理模式的底层逻辑。</p>
<p>cglib代理模式的执行步骤：</p>
<ol>
<li>获得一个Enhancer对象（专门用来生产代理对象的）</li>
<li>设置父类的字节码</li>
<li>获取MethodIntercepter对象，用于定义增强规则</li>
<li>获得代理对象</li>
<li>使用代理对象完成功能</li>
</ol>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413211456121.png" alt="image-20210413211456121"></p>
<p>获得代理对象之前再加一步：</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413211644118.png" alt="image-20210413211644118"></p>
<p>cglib代理和jdk代理了解即可，因为这个已经到了写工具给别人用的阶段了，现在刚入门可以先基本了解一下。</p>
<h3 id="Spring-Aop术语解析"><a href="#Spring-Aop术语解析" class="headerlink" title="Spring_Aop术语解析"></a>Spring_Aop术语解析</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210413213313773.png" alt="image-20210413213313773"></p>
<ol>
<li>可以被增强的方法称为连接点，但是连接点不一定被增强</li>
<li>每一个切入点都是连接点，但连接点不一定是切入点</li>
</ol>
<h3 id="Spring-AOP项目准备"><a href="#Spring-AOP项目准备" class="headerlink" title="Spring_AOP项目准备"></a>Spring_AOP项目准备</h3><p>我们以一个DAO层的方法增强的案例来进行AOP的演示。</p>
<p>AspectJ 本身并不是spring框架中的组成部分，是一个独立的AOP框架，一般把 AspectJ 和spring框架的AOP依赖一起使用，所以要导入一个独立的依赖。</p>
<p>实现的两种方式：</p>
<ol>
<li>基于注解方式实现（熟练）</li>
<li>基于XML配置方式（了解）（实际开发中用的一般都是注解）</li>
</ol>
<p>还要导入一大堆jar包（通过maven的pom.xml配置文件导入依赖）</p>
<p>一共需要导入如下几个jar包：spring-aspects包、aopalliance包、commons-logging包、Junit包、Lombok包，如果需要连接数据库进行操作的话还可以导入Druid包和MySQL驱动包。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415121021646.png" alt="image-20210415121021646"></p>
<h3 id="Spring-AOP注解实现"><a href="#Spring-AOP注解实现" class="headerlink" title="Spring_AOP注解实现"></a>Spring_AOP注解实现</h3><p>AOP的功能就是用来增强方法的，和之前的动态代理一样。有@Before和@After，可以在你所需执行的方法的前后自己再定义功能，可以增强方法。</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415122725296.png" alt="image-20210415122725296" style="zoom:67%;" />

<p>指定在addUser方法前运行此方法（注意，这个Aspect也需要使用@Component来在容器中创建对象</p>
<p>参数列表可以用JoinPoint接收切点对象</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415124316766.png" alt="image-20210415124316766" style="zoom:67%;" />

<p>后置通知无论切点方法是否出现异常，都会被执行：（也叫做最终通知）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415124535795.png" alt="image-20210415124535795" style="zoom:67%;" />

<p>如何获得目标方法的返回结果呢？使用@AfterReturning。返回通知：在切点方法返回结果之后增强的功能</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415125602816.png" alt="image-20210415125602816" style="zoom:80%;" />

<p>如果切点方法出现异常则此方法不会执行（注意与@After方法的区别）</p>
<p>异常通知：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415131435358.png" alt="image-20210415131435358" style="zoom:67%;" />



<p>环绕通知：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415132930212.png" alt="image-20210415132930212" style="zoom:67%;" />

<p>注意，每个通知前面都有切点表达式，那我们可以把切点表达式给抽出来，定义一个公共切点：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415133125800.png" alt="image-20210415133125800" style="zoom:67%;" />



<p>下面的方法上注释可以改成这样：</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415133151269.png" alt="image-20210415133151269" style="zoom:67%;" />

<p>公共切点execution中不建议写实现类，耦合度有点高，可以让它指向接口</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415133320134.png" alt="image-20210415133320134" style="zoom:67%;" />



<h4 id="JoinPoint对象和ProceedingJoinPoint对象"><a href="#JoinPoint对象和ProceedingJoinPoint对象" class="headerlink" title="JoinPoint对象和ProceedingJoinPoint对象"></a>JoinPoint对象和ProceedingJoinPoint对象</h4><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415134901125.png" alt="image-20210415134901125" style="zoom: 60%;" />





<h3 id="完全使用注解开发（使用配置类）"><a href="#完全使用注解开发（使用配置类）" class="headerlink" title="完全使用注解开发（使用配置类）"></a>完全使用注解开发（使用配置类）</h3><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415135459180.png" alt="image-20210415135459180" style="zoom:67%;" />



<h3 id="Spring-AOP-XML实现"><a href="#Spring-AOP-XML实现" class="headerlink" title="Spring_AOP_XML实现"></a>Spring_AOP_XML实现</h3><p>这里系统解释一下切点和切面的区别。切点是什么呢？切点就是我们想要增强的某个方法。切面是什么呢？就是我们增强了方法之后添加的@Before、@After等等等等一大堆在被增强方法前后执行的所有方法。这些方法构成一个切面，而原来的最初的方法是切点。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415195316410.png" alt="image-20210415195316410"></p>
<h3 id="Spring-JdbcTemplate项目搭建"><a href="#Spring-JdbcTemplate项目搭建" class="headerlink" title="Spring_JdbcTemplate项目搭建"></a>Spring_JdbcTemplate项目搭建</h3><p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415200200747.png" alt="image-20210415200200747"></p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415200235344.png" alt="image-20210415200235344" style="zoom:50%;" />

<p>我们之前学的Ioc、DI是在Core部分，AOP和Aspects也学完了。现在学的这个JdbcTemplate是在左上方的Data AccessIntegration部分，后面这个部分会被MyBatis替代，但我们可以先学一下，还是好学的。我们可以使用其实现增删改查的功能。</p>
<p>先创建一个maven项目，喵的，又要导入一大堆jar包。</p>
<p>然后创建jdbc.properties属性配置文件，把username、password、connector、url等数据库连接配置信息放里面（前面说过，降低耦合度）</p>
<img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415203200336.png" alt="image-20210415203200336" style="zoom:50%;" />

<p>然后创建applicationContext.xml配置文件（没错，就是我们的spring容器），然后配置如图的一堆信息。</p>
<p>JdbcTemplate和MyBatis功能是一样的。MyBatis对比JdbcTemplate优势明显。所以直接用MyBatis即可。</p>
<p>所以这个就先跳过了，后面直接整合MyBatis即可。</p>
<h3 id="Spring-事务回顾"><a href="#Spring-事务回顾" class="headerlink" title="Spring_事务回顾"></a>Spring_事务回顾</h3><p>我们的项目分为视图层、控制层、服务层、DAO层。事务和前两层没什么关系，主要是和服务层和DAO层有关系。DAO只封装数据的基本增删改查，不处理业务。Service专门处理业务，如果需要实现增删改查则通过DAO来影响数据库。</p>
<p><img src="C:\Users\xiaoqiyao\AppData\Roaming\Typora\typora-user-images\image-20210415210232126.png" alt="image-20210415210232126"></p>
<p>我们需要在执行service方法之前开启事务，在执行service方法之后检测其是否正常结束。而这刚好跟我们之前学的AOP相关。前置通知、异常通知和后置通知。</p>
<h3 id="Spring-日志使用"><a href="#Spring-日志使用" class="headerlink" title="Spring_日志使用"></a>Spring_日志使用</h3><p>和mybatis一样，在maven项目的pom.xm核心配置文件中导入log4j2的依赖</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
  </entry>
</search>
